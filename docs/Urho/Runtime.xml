<Type Name="Runtime" FullName="Urho.Runtime">
  <TypeSignature Language="C#" Value="public class Runtime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Runtime extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Urho</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Runtime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Initialize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Runtime initialization.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupObject&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T LookupObject&lt;T&gt; (IntPtr ptr, bool createIfNotFound = true) where T : Urho.UrhoObject;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T LookupObject&lt;(class Urho.UrhoObject) T&gt;(native int ptr, bool createIfNotFound) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>Urho.UrhoObject</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="createIfNotFound" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="ptr">Pointer to an unmanaged Urho object</param>
        <param name="createIfNotFound">If true, and the pointer is not known to the runtime, this will create a new wrapper for the object and return it.</param>
        <summary>Looks up the specified native pointer into the internal runtime mapping to managed objects.</summary>
        <returns>If the object exists in the internal runtime hash, it will return the existing managed wrapper for the unmanaged Urho object.   If it does not exist, and createIfNotFound is true, a new wrapper will be created by invoking the constructor that takes an <see cref="T:System.IntPtr" /> parameter, otherwise the returned value is null.</returns>
        <remarks>
          <para>Use this method to lookup objects that derive from the <see cref="T:Urho.UrhoObject" /> class.</para>
          <para>This will return the most derived type.   The “ptr” parameter is used to retrieve the type name of the Urho object and to determine its real identity.</para>
          <para></para>
          <para>This means that you might get a cast exception if you try to LookupObject and try to force the wrong type to be returned.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupRefCounted&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T LookupRefCounted&lt;T&gt; (IntPtr ptr, bool createIfNotFound = true) where T : Urho.RefCounted;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T LookupRefCounted&lt;(class Urho.RefCounted) T&gt;(native int ptr, bool createIfNotFound) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>Urho.RefCounted</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="createIfNotFound" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="ptr">Pointer to an unmanaged RefCounted Urho object</param>
        <param name="createIfNotFound">If true, and the pointer is not known to the runtime, this will create a new wrapper for the object and return it.</param>
        <summary>Looks up the specified native pointer into the internal runtime mapping to managed objects.</summary>
        <returns>If the object exists in the internal runtime hash, it will return the existing managed wrapper for the unmanaged Urho object.   If it does not exist, and createIfNotFound is true, a new wrapper will be created by invoking the constructor that takes an <see cref="T:System.IntPtr" /> parameter, otherwise the returned value is null.</returns>
        <remarks>Use this method to lookup objects that derive from the <see cref="T:Urho.RefCounted" /> class.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupStringHash">
      <MemberSignature Language="C#" Value="public static Urho.StringHash LookupStringHash (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Urho.StringHash LookupStringHash(class System.Type t) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.StringHash</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="t">The C# type to lookup the string hash for</param>
        <summary>Returns the associated string hash for the given C# type (must be an UrhoType)</summary>
        <returns>The string hash for the </returns>
        <remarks>This will only work for Urho types.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Platform">
      <MemberSignature Language="C#" Value="public static string Platform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Platform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterObject">
      <MemberSignature Language="C#" Value="public static void RegisterObject (Urho.RefCounted refCounted);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterObject(class Urho.RefCounted refCounted) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refCounted" Type="Urho.RefCounted" />
      </Parameters>
      <Docs>
        <param name="refCounted">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterObject">
      <MemberSignature Language="C#" Value="public static void UnregisterObject (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterObject(native int handle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
