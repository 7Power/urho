<Type Name="ShaderProgram" FullName="Urho.ShaderProgram">
  <TypeSignature Language="C#" Value="public class ShaderProgram : Urho.RefCounted" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ShaderProgram extends Urho.RefCounted" />
  <AssemblyInfo>
    <AssemblyName>Urho</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Urho.RefCounted</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Linked shader program on the GPU.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ShaderProgram (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer to the raw unmanaged Urho object.</param>
        <summary>Constructs a new instance of ShaderProgram, given a raw pointer to an unmanaged object</summary>
        <remarks>
          <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
          <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
          <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ShaderProgram (Urho.UrhoObjectFlag emptyFlag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Urho.UrhoObjectFlag emptyFlag) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="emptyFlag" Type="Urho.UrhoObjectFlag" />
      </Parameters>
      <Docs>
        <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
        <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
        <remarks>
          <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
          <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
          <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ShaderProgram (Urho.Graphics graphics, Urho.ShaderVariation vertexShader, Urho.ShaderVariation pixelShader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Urho.Graphics graphics, class Urho.ShaderVariation vertexShader, class Urho.ShaderVariation pixelShader) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="graphics" Type="Urho.Graphics" />
        <Parameter Name="vertexShader" Type="Urho.ShaderVariation" />
        <Parameter Name="pixelShader" Type="Urho.ShaderVariation" />
      </Parameters>
      <Docs>
        <param name="graphics">To be added.</param>
        <param name="vertexShader">To be added.</param>
        <param name="pixelShader">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearGlobalParameterSource">
      <MemberSignature Language="C#" Value="public static void ClearGlobalParameterSource (Urho.ShaderParameterGroup group);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearGlobalParameterSource(valuetype Urho.ShaderParameterGroup group) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="group" Type="Urho.ShaderParameterGroup" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <summary>
            Clear a global parameter source when constant buffers change.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearParameterSource">
      <MemberSignature Language="C#" Value="public void ClearParameterSource (Urho.ShaderParameterGroup group);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearParameterSource(valuetype Urho.ShaderParameterGroup group) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="group" Type="Urho.ShaderParameterGroup" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <summary>
            Clear a parameter source. Affects only the current shader program if appropriate.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearParameterSources">
      <MemberSignature Language="C#" Value="public static void ClearParameterSources ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearParameterSources() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clear all parameter sources from all shader programs by incrementing the global parameter source framenumber.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameter">
      <MemberSignature Language="C#" Value="public Urho.ShaderParameter* GetParameter (Urho.StringHash param);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Urho.ShaderParameter* GetParameter(valuetype Urho.StringHash param) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.ShaderParameter*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="Urho.StringHash" />
      </Parameters>
      <Docs>
        <param name="param">To be added.</param>
        <summary>
            Return the info for a shader parameter, or null if does not exist.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasParameter">
      <MemberSignature Language="C#" Value="public bool HasParameter (Urho.StringHash param);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasParameter(valuetype Urho.StringHash param) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="Urho.StringHash" />
      </Parameters>
      <Docs>
        <param name="param">To be added.</param>
        <summary>
            Return whether uses a shader parameter.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTextureUnit">
      <MemberSignature Language="C#" Value="public bool HasTextureUnit (Urho.TextureUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasTextureUnit(valuetype Urho.TextureUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="Urho.TextureUnit" />
      </Parameters>
      <Docs>
        <param name="unit">To be added.</param>
        <summary>
            Return whether uses a texture unit.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Link">
      <MemberSignature Language="C#" Value="public bool Link ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Link() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Link the shaders and examine the uniforms and samplers used. Return true if successful.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkerOutput">
      <MemberSignature Language="C#" Value="public string LinkerOutput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LinkerOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return linker output.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedParameterUpdate">
      <MemberSignature Language="C#" Value="public bool NeedParameterUpdate (Urho.ShaderParameterGroup group, void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool NeedParameterUpdate(valuetype Urho.ShaderParameterGroup group, void* source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="group" Type="Urho.ShaderParameterGroup" />
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="source">To be added.</param>
        <summary>
            Check whether a shader parameter group needs update. Does not actually check whether parameters exist in the shaders.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeviceLost">
      <MemberSignature Language="C#" Value="public void OnDeviceLost ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnDeviceLost() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Mark the GPU resource destroyed on context destruction.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelShader">
      <MemberSignature Language="C#" Value="public Urho.ShaderVariation PixelShader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.ShaderVariation PixelShader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.ShaderVariation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return the pixel shader.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public void Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Release() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Release shader program.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexShader">
      <MemberSignature Language="C#" Value="public Urho.ShaderVariation VertexShader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Urho.ShaderVariation VertexShader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.ShaderVariation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Return the vertex shader.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
