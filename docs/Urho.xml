<doc>
    <assembly>
        <name>Urho</name>
    </assembly>
    <members>
        <member name="T:Urho.ActionEase">
            <summary>Base class for all the Action Easing functions.</summary>
            <remarks>
                <para>In general, you will be using one of the concrete subclasses: EaseBackIn, EaseBackInOut, EaseBackOut, EaseBounceIn, EaseBounceInOut, EaseBounceOut, EaseCustom, EaseElastic, EaseElasticIn, EaseElasticInOut, EaseElasticOut, EaseExponentialIn, EaseExponentialInOut, EaseExponentialOut, EaseIn, EaseInOut, EaseOut, EaseRateAction, EaseSineIn, EaseSineInOut and EaseSineOut.</para>
                <para />
            </remarks>
        </member>
        <member name="C:Urho.ActionEase(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionEase.InnerAction">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionEase.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionEase.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ActionEaseState">
            <summary>Encapsultes the state of an easing function, for internal use of the Easing action functions.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:Urho.ActionEaseState(Urho.ActionEase,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary>
                <para />
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionEaseState.InnerActionState">
            <summary>
                <para />
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionEaseState.Stop">
            <summary>
                <para />
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionEaseState.Update(System.Single)">
            <param name="time"></param>
            <summary>
                <para />
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ActionInstant">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ActionInstant">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionInstant.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionInstant.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ActionInstantState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ActionInstantState(Urho.ActionInstant,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionInstantState.IsDone">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionInstantState.Step(System.Single)">
            <param name="dt"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionInstantState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ActionManager">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ActionManager">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.AddAction(Urho.BaseAction,Urho.Node,System.Boolean)">
            <param name="action"></param>
            <param name="target"></param>
            <param name="paused"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.Dispose">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.Dispose(System.Boolean)">
            <param name="disposing"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.Finalize">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.GetAction(System.Int32,Urho.Node)">
            <param name="tag"></param>
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.GetActionState(System.Int32,Urho.Node)">
            <param name="tag"></param>
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.NumberOfRunningActionsInTarget(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.PauseAllRunningActions">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.PauseTarget(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.RemoveAction(Urho.ActionState)">
            <param name="actionState"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.RemoveAction(System.Int32,Urho.Node)">
            <param name="tag"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.RemoveAllActions">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.RemoveAllActionsFromTarget(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.ResumeTarget(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.ResumeTargets(System.Collections.Generic.List{Urho.Node})">
            <param name="targetsToResume"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionManager.Update(System.Single)">
            <param name="dt"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ActionState">
            <summary>Encapsulates the states of a running action.</summary>
            <remarks>ActionStates encapsulate the running state of an Action when the <see cref="M:Urho.Action.StartAction" /> method is invoked to trigger the execution fo the action.</remarks>
        </member>
        <member name="C:Urho.ActionState(Urho.BaseAction,Urho.Node)">
            <param name="action">Points to the action that is triggering the creation of this state, this is the blueprint for what the action should do.</param>
            <param name="target">The node that this action will be operating on.</param>
            <summary>Creates a new action state</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:Urho.ActionState.Action">
            <summary>Links to the action for which this action state was created.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionState.IsDone">
            <summary>
            Gets a value indicating whether this instance is done.
            </summary>
            <value>
                <c>true</c> if this instance is done; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionState.OriginalTarget">
            <summary>The node that this action will be operating on.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:Urho.ActionState.Step(System.Single)">
            <param name="dt">Delta Time</param>
            <summary>
            Called every frame with it's delta time.
            DON'T override unless you know what you are doing.
            </summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:Urho.ActionState.Stop">
            <summary>
            Called after the action has finished.
            It will set the 'Target' to null. </summary>
            <remarks>You should never call this method manually. Instead, call the <see cref="M:Urho.Node.StopAction" /> method with this action state.</remarks>
        </member>
        <member name="P:Urho.ActionState.Target">
            <summary>
            Gets or sets the target.
            Will be set with the 'StartAction' method of the corresponding Action.
            When the 'Stop' method is called, Target will be set to null.
            </summary>
            <value>The target.</value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionState.Update(System.Single)">
            <param name="time">A value between 0 and 1
            For example:
            0 means that the action just started
            0.5 means that the action is in the middle
            1 means that the action is over</param>
            <summary>
            Called once per frame.
            </summary>
            <remarks>
                <para>When you provide your own Actions, and your own action states, this is the method that will perform the actual changes to your <see cref="P:Urho.ActionState.Target" /> node.   The action should affect the state of the target node in an implementation specific way, and should be done in function of the specified dt.</para>
                <para />
            </remarks>
        </member>
        <member name="T:Urho.ActionTag">
            <summary>Enumeration used to tag actions, the only interesting value is the field “Invalid” which is used to tell the tag apart from user-set tags.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:Urho.ActionTag.Invalid">
            <summary>
                <para />
            </summary>
        </member>
        <member name="T:Urho.ActionTween">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ActionTween(System.Single,System.String,System.Single,System.Single)">
            <param name="duration"></param>
            <param name="key"></param>
            <param name="from"></param>
            <param name="to"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ActionTween(System.Single,System.String,System.Single,System.Single,System.Action{System.Single,System.String})">
            <param name="duration"></param>
            <param name="key"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="tweenAction"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionTween.From">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionTween.Key">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionTween.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionTween.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionTween.To">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionTween.TweenAction">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ActionTweenState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ActionTweenState(Urho.ActionTween,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ActionTweenState.Delta">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionTweenState.From">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionTweenState.Key">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionTweenState.To">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ActionTweenState.TweenAction">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ActionTweenState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AmplitudeAction">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.AmplitudeAction(System.Single,System.Single)">
            <param name="duration"></param>
            <param name="amplitude"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AmplitudeAction.Amplitude">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AmplitudeActionState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.AmplitudeActionState(Urho.AmplitudeAction,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AmplitudeActionState.Amplitude">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AmplitudeActionState.AmplitudeRate">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Animatable">
            <summary>
            Base class for animatable object, an animatable object can be set animation on it's attributes, or can be set an object animation to it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Animatable(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Animatable, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Animatable(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Animatable.AnimationEnabled">
            <summary>
            Return animation enabled.
            Or
            Set animation enabled.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Animatable.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Animatable.GetAttributeAnimation(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute animation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animatable.GetAttributeAnimationSpeed(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute animation speed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animatable.GetAttributeAnimationWrapMode(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute animation wrap mode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animatable.LoadXml(Urho.XmlElement,System.Boolean)">
            <param name="source"></param>
            <param name="setInstanceDefault"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Animatable.ObjectAnimation">
            <summary>
            Return object animation.
            Or
            Set object animation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Animatable.ObjectAnimationAttr">
            <summary>
            Return object animation attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animatable.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animatable.SaveXml(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animatable.SetAttributeAnimation(System.String,Urho.ValueAnimation,Urho.WrapMode,System.Single)">
            <param name="name"></param>
            <param name="attributeAnimation"></param>
            <param name="wrapMode"></param>
            <param name="speed"></param>
            <summary>
            Set attribute animation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animatable.SetAttributeAnimationSpeed(System.String,System.Single)">
            <param name="name"></param>
            <param name="speed"></param>
            <summary>
            Set attribute animation speed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animatable.SetAttributeAnimationWrapMode(System.String,Urho.WrapMode)">
            <param name="name"></param>
            <param name="wrapMode"></param>
            <summary>
            Set attribute animation wrap mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Animatable.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Animatable.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Animatable.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Animatable.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AnimatedModel">
            <summary>
            Animated model component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.AnimatedModel(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of AnimatedModel, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.AnimatedModel(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of AnimatedModel that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of AnimatedModel attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.AnimatedModel(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.AnimatedModel.AddAnimationState(Urho.Animation)">
            <param name="animation"></param>
            <summary>
            Add an animation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedModel.AnimationLodBias">
            <summary>
            Return animation LOD bias.
            Or
            Set animation LOD bias.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedModel.AnimationStates">
            <summary>
            Return all animation states.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedModel.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.AnimatedModel.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.GetAnimationState(System.String)">
            <param name="animationName"></param>
            <summary>
            Return animation state by animation name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.GetAnimationState(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return animation state by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.GetAnimationState(Urho.Animation)">
            <param name="animation"></param>
            <summary>
            Return animation state by animation pointer.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.GetAnimationState(Urho.StringHash)">
            <param name="animationNameHash"></param>
            <summary>
            Return animation state by animation name hash.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.GetMorphWeight(System.String)">
            <param name="name"></param>
            <summary>
            Return vertex morph weight by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.GetMorphWeight(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return vertex morph weight by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.GetMorphWeight(Urho.StringHash)">
            <param name="nameHash"></param>
            <summary>
            Return vertex morph weight by name hash.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.IsMaster">
            <summary>
            Return whether is the master (first) animated model.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.LoadXml(Urho.XmlElement,System.Boolean)">
            <param name="source"></param>
            <param name="setInstanceDefault"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedModel.ModelAttr">
            <summary>
            Return model attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedModel.MorphVertexBuffers">
            <summary>
            Return all morph vertex buffers.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedModel.NumAnimationStates">
            <summary>
            Return number of animation states.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedModel.NumMorphs">
            <summary>
            Return number of vertex morphs.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. Drawable must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.RemoveAllAnimationStates">
            <summary>
            Remove all animations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.RemoveAnimationState(System.String)">
            <param name="animationName"></param>
            <summary>
            Remove an animation by animation name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.RemoveAnimationState(System.UInt32)">
            <param name="index"></param>
            <summary>
            Remove an animation by index.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.RemoveAnimationState(Urho.Animation)">
            <param name="animation"></param>
            <summary>
            Remove an animation by animation pointer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.RemoveAnimationState(Urho.AnimationState)">
            <param name="state"></param>
            <summary>
            Remove an animation by AnimationState pointer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.RemoveAnimationState(Urho.StringHash)">
            <param name="animationNameHash"></param>
            <summary>
            Remove an animation by animation name hash.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.ResetMorphWeights">
            <summary>
            Reset all vertex morphs to zero.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.SetModel(Urho.Model,System.Boolean)">
            <param name="model"></param>
            <param name="createBones"></param>
            <summary>
            Set model.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.SetMorphWeight(System.String,System.Single)">
            <param name="name"></param>
            <param name="weight"></param>
            <summary>
            Set vertex morph weight by name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.SetMorphWeight(System.UInt32,System.Single)">
            <param name="index"></param>
            <param name="weight"></param>
            <summary>
            Set vertex morph weight by index.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedModel.SetMorphWeight(Urho.StringHash,System.Single)">
            <param name="nameHash"></param>
            <param name="weight"></param>
            <summary>
            Set vertex morph weight by name hash.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedModel.Skeleton">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedModel.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.AnimatedModel.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.AnimatedModel.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.AnimatedModel.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedModel.UpdateGeometryType">
            <summary>
            Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedModel.UpdateInvisible">
            <summary>
            Return whether to update animation when not visible.
            Or
            Set whether to update animation and the bounding box when not visible. Recommended to enable for physically controlled models like ragdolls.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AnimatedSprite2D">
            <summary>
            Animated sprite component, it uses to play animation created by Spine (http://www.esotericsoftware.com) and Spriter (http://www.brashmonkey.com/).
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.AnimatedSprite2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of AnimatedSprite2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.AnimatedSprite2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of AnimatedSprite2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of AnimatedSprite2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.AnimatedSprite2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.AnimatedSprite2D.Animation">
            <summary>
            Return animation name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedSprite2D.AnimationSet">
            <summary>
            Return animation.
            Or
            Set animation set.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedSprite2D.AnimationSetAttr">
            <summary>
            Return animation set attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedSprite2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.AnimatedSprite2D.Entity">
            <summary>
            Return entity name.
            Or
            Set entity name (skin name for spine, entity name for spriter).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedSprite2D.LoopMode">
            <summary>
            Return loop mode.
            Or
            Set loop mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedSprite2D.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedSprite2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedSprite2D.SetAnimation(System.String,Urho.LoopMode2D)">
            <param name="name"></param>
            <param name="loopMode"></param>
            <summary>
            Set animation by name and loop mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimatedSprite2D.SetAnimationAttr(System.String)">
            <param name="name"></param>
            <summary>
            Set animation by name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedSprite2D.Speed">
            <summary>
            Return speed.
            Or
            Set speed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimatedSprite2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.AnimatedSprite2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.AnimatedSprite2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.AnimatedSprite2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Animation">
            <summary>
            Skeletal animation resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Animation(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Animation, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Animation(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Animation that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Animation attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Animation(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Animation.AddTrigger(System.Single,System.Boolean,System.Int32)">
            <param name="time"></param>
            <param name="timeIsNormalized"></param>
            <param name="data"></param>
            <summary>
            Add a trigger point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.AddTrigger(System.Single,System.Boolean,System.Single)">
            <param name="time"></param>
            <param name="timeIsNormalized"></param>
            <param name="data"></param>
            <summary>
            Add a trigger point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.AddTrigger(System.Single,System.Boolean,System.String)">
            <param name="time"></param>
            <param name="timeIsNormalized"></param>
            <param name="data"></param>
            <summary>
            Add a trigger point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.AddTrigger(System.Single,System.Boolean,Urho.Color)">
            <param name="time"></param>
            <param name="timeIsNormalized"></param>
            <param name="data"></param>
            <summary>
            Add a trigger point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.AddTrigger(System.Single,System.Boolean,Urho.IntRect)">
            <param name="time"></param>
            <param name="timeIsNormalized"></param>
            <param name="data"></param>
            <summary>
            Add a trigger point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.AddTrigger(System.Single,System.Boolean,Urho.IntVector2)">
            <param name="time"></param>
            <param name="timeIsNormalized"></param>
            <param name="data"></param>
            <summary>
            Add a trigger point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.AddTrigger(System.Single,System.Boolean,Urho.Quaternion)">
            <param name="time"></param>
            <param name="timeIsNormalized"></param>
            <param name="data"></param>
            <summary>
            Add a trigger point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.AddTrigger(System.Single,System.Boolean,Urho.Vector2)">
            <param name="time"></param>
            <param name="timeIsNormalized"></param>
            <param name="data"></param>
            <summary>
            Add a trigger point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.AddTrigger(System.Single,System.Boolean,Urho.Vector3)">
            <param name="time"></param>
            <param name="timeIsNormalized"></param>
            <param name="data"></param>
            <summary>
            Add a trigger point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.AddTrigger(System.Single,System.Boolean,Urho.Vector4)">
            <param name="time"></param>
            <param name="timeIsNormalized"></param>
            <param name="data"></param>
            <summary>
            Add a trigger point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Animation.AnimationName">
            <summary>
            Return animation name.
            Or
            Set animation name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Animation.AnimationNameHash">
            <summary>
            Return animation name hash.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Animation.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Animation.CreateTrack(System.String)">
            <param name="name"></param>
            <summary>
            Create and return a track by name. If track by same name already exists, returns the existing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.GetTrack(System.String)">
            <param name="name"></param>
            <summary>
            Return animation track by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.GetTrack(Urho.StringHash)">
            <param name="nameHash"></param>
            <summary>
            Return animation track by name hash.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.GetTrigger(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return a trigger point by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Animation.Length">
            <summary>
            Return animation length.
            Or
            Set animation length.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Animation.NumTracks">
            <summary>
            Return number of animation tracks.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Animation.NumTriggers">
            <summary>
            Return number of animation trigger points.
            Or
            Resize trigger point vector.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.RemoveAllTracks">
            <summary>
            Remove all tracks. This is unsafe if the animation is currently used in playback.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.RemoveAllTriggers">
            <summary>
            Remove all trigger points.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.RemoveTrack(System.String)">
            <param name="name"></param>
            <summary>
            Remove a track by name. Return true if was found and removed successfully. This is unsafe if the animation is currently used in playback.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Animation.RemoveTrigger(System.UInt32)">
            <param name="index"></param>
            <summary>
            Remove a trigger point by index.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Animation.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Animation.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Animation.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Animation.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AnimationController">
            <summary>
            %Component that drives an AnimatedModel's animations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.AnimationController(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of AnimationController, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.AnimationController(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of AnimationController that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of AnimationController attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.AnimationController(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.AnimationController.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.AnimationController.Fade(System.String,System.Single,System.Single)">
            <param name="name"></param>
            <param name="targetWeight"></param>
            <param name="fadeTime"></param>
            <summary>
            Fade animation to target weight. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.FadeOthers(System.String,System.Single,System.Single)">
            <param name="name"></param>
            <param name="targetWeight"></param>
            <param name="fadeTime"></param>
            <summary>
            Fade other animations on the same layer to target weight. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetAnimationState(System.String)">
            <param name="name"></param>
            <summary>
            Find an animation state by animation name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetAnimationState(Urho.StringHash)">
            <param name="nameHash"></param>
            <summary>
            Find an animation state by animation name hash
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetAutoFade(System.String)">
            <param name="name"></param>
            <summary>
            Return animation autofade time.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetFadeTarget(System.String)">
            <param name="name"></param>
            <summary>
            Return animation fade target weight.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetFadeTime(System.String)">
            <param name="name"></param>
            <summary>
            Return animation fade time.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetLayer(System.String)">
            <param name="name"></param>
            <summary>
            Return animation blending layer.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetLength(System.String)">
            <param name="name"></param>
            <summary>
            Return animation length.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetRemoveOnCompletion(System.String)">
            <param name="name"></param>
            <summary>
            Return whether animation auto-removes on completion, or false if no such animation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetSpeed(System.String)">
            <param name="name"></param>
            <summary>
            Return animation speed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetStartBone(System.String)">
            <param name="name"></param>
            <summary>
            Return animation start bone, or null if no such animation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetStartBoneName(System.String)">
            <param name="name"></param>
            <summary>
            Return animation start bone name, or empty string if no such animation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetTime(System.String)">
            <param name="name"></param>
            <summary>
            Return animation time position.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.GetWeight(System.String)">
            <param name="name"></param>
            <summary>
            Return animation weight.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.IsAtEnd(System.String)">
            <param name="name"></param>
            <summary>
            Return whether an animation is at its end. Will return false if the animation is not active at all.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.IsFadingIn(System.String)">
            <param name="name"></param>
            <summary>
            Return whether an animation is fading in.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.IsFadingOut(System.String)">
            <param name="name"></param>
            <summary>
            Return whether an animation is fading out.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.IsLooped(System.String)">
            <param name="name"></param>
            <summary>
            Return animation looping.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.IsPlaying(System.String)">
            <param name="name"></param>
            <summary>
            Return whether an animation is active. Note that non-looping animations that are being clamped at the end also return true.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.Play(System.String,System.Byte,System.Boolean,System.Single)">
            <param name="name"></param>
            <param name="layer"></param>
            <param name="looped"></param>
            <param name="fadeInTime"></param>
            <summary>
            Play an animation and set full target weight. Name must be the full resource name. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.PlayExclusive(System.String,System.Byte,System.Boolean,System.Single)">
            <param name="name"></param>
            <param name="layer"></param>
            <param name="looped"></param>
            <param name="fadeTime"></param>
            <summary>
            Play an animation, set full target weight and fade out all other animations on the same layer. Name must be the full resource name. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.SetAutoFade(System.String,System.Single)">
            <param name="name"></param>
            <param name="fadeOutTime"></param>
            <summary>
            Set animation autofade at end (non-looped animations only.) Zero time disables. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.SetLayer(System.String,System.Byte)">
            <param name="name"></param>
            <param name="layer"></param>
            <summary>
            Set animation blending layer priority. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.SetLooped(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="enable"></param>
            <summary>
            Set animation looping. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.SetRemoveOnCompletion(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="removeOnCompletion"></param>
            <summary>
            Set whether an animation auto-removes on completion.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.SetSpeed(System.String,System.Single)">
            <param name="name"></param>
            <param name="speed"></param>
            <summary>
            Set animation speed. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.SetStartBone(System.String,System.String)">
            <param name="name"></param>
            <param name="startBoneName"></param>
            <summary>
            Set animation start bone. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.SetTime(System.String,System.Single)">
            <param name="name"></param>
            <param name="time"></param>
            <summary>
            Set animation time position. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.SetWeight(System.String,System.Single)">
            <param name="name"></param>
            <param name="weight"></param>
            <summary>
            Set animation weight. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.Stop(System.String,System.Single)">
            <param name="name"></param>
            <param name="fadeOutTime"></param>
            <summary>
            Stop an animation. Zero fadetime is instant. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.StopAll(System.Single)">
            <param name="fadeTime"></param>
            <summary>
            Stop all animations. Zero fadetime is instant.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.StopLayer(System.Byte,System.Single)">
            <param name="layer"></param>
            <param name="fadeOutTime"></param>
            <summary>
            Stop all animations on a specific layer. Zero fadetime is instant.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationController.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.AnimationController.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.AnimationController.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.AnimationController.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationController.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Update the animations. Is called from HandleScenePostUpdate().
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AnimationSet2D">
            <summary>
            Spriter animation set, it includes one or more animations, for more information please refer to http://www.esotericsoftware.com and http://www.brashmonkey.com/spriter.htm.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.AnimationSet2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of AnimationSet2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.AnimationSet2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of AnimationSet2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of AnimationSet2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.AnimationSet2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.AnimationSet2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.AnimationSet2D.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationSet2D.GetAnimation(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return animation name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationSet2D.GetSpriterFileSprite(System.Int32,System.Int32)">
            <param name="folderId"></param>
            <param name="fileId"></param>
            <summary>
            Return spriter file sprite.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationSet2D.HasAnimation(System.String)">
            <param name="animation"></param>
            <summary>
            Check has animation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationSet2D.NumAnimations">
            <summary>
            Get number of animations.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationSet2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationSet2D.Sprite">
            <summary>
            Return sprite.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationSet2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.AnimationSet2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.AnimationSet2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.AnimationSet2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AnimationState">
            <summary>
            %Animation instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.AnimationState(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of AnimationState, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.AnimationState(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.AnimationState(Urho.AnimatedModel,Urho.Animation)">
            <param name="model"></param>
            <param name="animation"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.AnimationState(Urho.Node,Urho.Animation)">
            <param name="node"></param>
            <param name="animation"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.AddTime(System.Single)">
            <param name="delta"></param>
            <summary>
            Modify time position. %Animation triggers will be fired.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.AddWeight(System.Single)">
            <param name="delta"></param>
            <summary>
            Modify blending weight.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationState.Animation">
            <summary>
            Return animation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.Apply">
            <summary>
            Apply the animation at the current time position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.GetBoneWeight(System.String)">
            <param name="name"></param>
            <summary>
            Return per-bone blending weight by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.GetBoneWeight(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return per-bone blending weight by track index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.GetBoneWeight(Urho.StringHash)">
            <param name="nameHash"></param>
            <summary>
            Return per-bone blending weight by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.GetTrackIndex(System.String)">
            <param name="name"></param>
            <summary>
            Return track index by bone name, or M_MAX_UNSIGNED if not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.GetTrackIndex(Urho.Node)">
            <param name="node"></param>
            <summary>
            Return track index with matching bone node, or M_MAX_UNSIGNED if not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.GetTrackIndex(Urho.StringHash)">
            <param name="nameHash"></param>
            <summary>
            Return track index by bone name hash, or M_MAX_UNSIGNED if not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.IsEnabled">
            <summary>
            Return whether weight is nonzero.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.IsLooped">
            <summary>
            Return whether looped.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationState.Layer">
            <summary>
            Return blending layer.
            Or
            Set blending layer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationState.Length">
            <summary>
            Return animation length.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationState.Model">
            <summary>
            Return animated model this state belongs to (model mode.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationState.Node">
            <summary>
            Return root scene node this state controls (node hierarchy mode.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.SetBoneWeight(System.String,System.Single,System.Boolean)">
            <param name="name"></param>
            <param name="weight"></param>
            <param name="recursive"></param>
            <summary>
            Set per-bone blending weight by name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.SetBoneWeight(System.UInt32,System.Single,System.Boolean)">
            <param name="index"></param>
            <param name="weight"></param>
            <param name="recursive"></param>
            <summary>
            Set per-bone blending weight by track index. Default is 1.0 (full), is multiplied  with the state's blending weight when applying the animation. Optionally recurses to child bones.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.SetBoneWeight(Urho.StringHash,System.Single,System.Boolean)">
            <param name="nameHash"></param>
            <param name="weight"></param>
            <param name="recursive"></param>
            <summary>
            Set per-bone blending weight by name hash.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AnimationState.SetLooped(System.Boolean)">
            <param name="looped"></param>
            <summary>
            Set looping enabled/disabled.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationState.StartBone">
            <summary>
            Return start bone.
            Or
            Set start bone. Not supported in node animation mode. Resets any assigned per-bone weights.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationState.Time">
            <summary>
            Return time position.
            Or
            Set time position. Does not fire animation triggers.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationState.Weight">
            <summary>
            Return blending weight.
            Or
            Set blending weight.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AnimationTrack">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AnimationTriggerEventArgs">
            <summary>Event arguments for the Node's AnimationTrigger event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationTriggerEventArgs.Data">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationTriggerEventArgs.Name">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationTriggerEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AnimationTriggerEventArgs.Time">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AnimationTriggerPoint">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.AnimationTriggerPoint.Time">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.AnimationTriggerPoint.Variant">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Application">
            <summary>
            Base class for creating applications which initialize the Urho3D engine and run a main loop until exited.
            </summary>
            <remarks>
                <para>This is the base class that your application should subclass and provide at implementations for the <see cref="T:Urho.Application.Setup" /> and <see cref="T:Urho.Application.Start" /> methods.  You can use await asynchronous methods from the <see cref="T:Urho.Application.Start" /> methods.</para>
                <para />
                <para>Access to various subsystems in Urho is available through the various properties in this class:</para>
                <list type="bullet">
                    <item>
                        <term>
                            <see cref="P:Urho.Application.Audio" />
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="P:Urho.Application.Console" />
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="P:Urho.Application.FileSystem" />
                            <para />
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="P:Urho.Application.Graphics" />
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="P:Urho.Application.Input" />
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="P:Urho.Application.Log" />
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="P:Urho.Application.Network" />
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="P:Urho.Application.Profiler" />
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="P:Urho.Application.Renderer" />
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="P:Urho.Application.ResourceCache" />
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="P:Urho.Application.Time" />
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="P:Urho.Application.UI" />
                        </term>
                    </item>
                </list>
                <para>An application is tied to a <see cref="T:Urho.Context" /> which should be passed on the initial constructor.</para>
                <para>This shows a minimal application:</para>
                <para />
                <example>
                    <code lang="C#"><![CDATA[public class HelloWorld : Application
{
    public HelloWorld(Context c) : base(c) { }

    public override void Start()
    {
        var cache = ResourceCache;
        var helloText = new Text(Context) {
            Value = "Hello World from UrhoSharp",
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalAlignment = VerticalAlignment.Center
        };
        helloText.SetColor (new Color(0f, 1f, 0f));
        helloText.SetFont (font: cache.GetFont("Fonts/Anonymous Pro.ttf"), size: 30);
        UI.Root.AddChild (helloText);

        Graphics.SetWindowIcon(cache.GetImage("Textures/UrhoIcon.png"));
        Graphics.WindowTitle = "UrhoSharp Sample";

        // Subscribe to Esc key:
        SubscribeToKeyDown(args => { if (args.Key == Key.Esc) Engine.Exit(); });
    }
}]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Urho.Application(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Application, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Application(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.Application(Urho.Context,Urho.ApplicationOptions)">
            <param name="context">The context that this object will be attached to.</param>
            <param name="options"></param>
            <summary>Creates an instance of Application that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Application attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="P:Urho.Application.Audio">
            <summary>Returns the Audio subsystem.</summary>
            <value>
                <para />
            </value>
            <remarks>See the <see cref="T:Urho.Audio" /> class description for more information on how to use the Audio subsystem.</remarks>
        </member>
        <member name="P:Urho.Application.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Application.Console">
            <summary>Returns the Console subsystem</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.CreateInstance(System.Type,Urho.Context)">
            <param name="applicationType"></param>
            <param name="context"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.CreateInstance``1(Urho.Context)">
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.Current">
            <summary>
            Last created application.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.Delay(System.Single)">
            <param name="durationMs">Duration in millyseconds</param>
            <summary>
            Waits given game time.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.Engine">
            <summary>Returns the application’s engine.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.EngineInited">
            <summary>
            Call UrhoEngine.Init() to initialize the engine
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.ErrorExit(System.String)">
            <param name="message"></param>
            <summary>
            Show an error message (last log message if empty), terminate the main loop, and set failure exit code.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.FileSystem">
            <summary>Returns the FileSystem subsystem.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.GetApp(System.IntPtr)">
            <param name="h"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.Graphics">
            <summary>Returns the Graphics subsystem.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.Input">
            <summary>Returns the Input subsystem.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.InvokeOnMain(System.Action)">
            <param name="action"></param>
            <summary>
            Invoke actions in the Main Thread (the next Update call)
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.Log">
            <summary>Returns the Log subsystem.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.Network">
            <summary>Returns the Network subsystem.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.OnSceneUpdate(System.Single,Urho.Scene)">
            <param name="timeStep"></param>
            <param name="scene"></param>
            <summary>This method is invoked on each scene update.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.OnUpdate(System.Single)">
            <param name="timeStep"></param>
            <summary>This method is invoked on every application update.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.Profiler">
            <summary>Returns the Profiler subsystem.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.Renderer">
            <summary>Returns the Renderer subsystem.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.ResourceCache">
            <summary>Returns the ResourceCache subsystem.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.Run">
            <summary>
            Initialize the engine and run the main loop, then return the application exit code. Catch out-of-memory exceptions while running.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="E:Urho.Application.SceneUpdate">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.Setup">
            <summary>Method invoked to setup your application.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.Start">
            <summary>Method invoked to start your application, this is where you would typically create your scene.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Application.Stop">
            <summary>Method invoked to terminate your application.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.Time">
            <summary>Returns the Time subsystem.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Application.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Application.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Application.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.UI">
            <summary>Returns the UI subsystem.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="E:Urho.Application.Update">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Application.WorkQueue">
            <summary>Returns the WorkQueue subsystem.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Application+ActionIntPtr">
            <param name="value"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ApplicationOptions">
            <summary>
            Application options, see full description at:
            http://urho3d.github.io/documentation/1.4/_running.html
            </summary>
            <remarks>
                <para>This contains the list of options that can be configured at application startup, these settings control how the engine is initialized.</para>
                <para />
                <para>The options set with this selector are passed to the Urho game engine on startup.</para>
                <para />
                <para>You can use the convenience <see cref="T:Urho.ApplicationOptions.Default" /> or <see cref="T:Urho.ApplicationOptions.PortraitDefault" /> static values as options to use as either defaults for landscape or portrait.</para>
            </remarks>
        </member>
        <member name="C:Urho.ApplicationOptions">
            <summary>Empty construtor</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ApplicationOptions.AdditionalFlags">
            <summary>Any additional options from the Urho engine that might not be encompassed by one of the strongly typed properties here.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ApplicationOptions.Default">
            <summary>Convenience - default set of options.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ApplicationOptions.Height">
            <summary>
            Desktop only option.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ApplicationOptions.LimitFps">
            <summary>Determines whether we should limit the frames (defaults to true), the default is limit is 200 FPS for desktop, and 60 fps, despite of the flag settings.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ApplicationOptions.Orientation">
            <summary>iOS only - orientation for the game</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ApplicationOptions.PortraitDefault">
            <summary>Convenience - default set of options for portrait mode (800x500 on Portrait mode)</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ApplicationOptions.ResizableWindow">
            <summary>Desktop only - provides a resizable window.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ApplicationOptions.ResourcePackagesPaths">
            <summary>
                <para>Resource package files to use - default empty.</para>
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ApplicationOptions.ResourcePaths">
            <summary>
                <para>Resource path(s) to use (default: Data, CoreData)</para>
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ApplicationOptions.ToString">
            <summary>Returns the command line version suitable to be sent to the Urho engine.</summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ApplicationOptions.Width">
            <summary>Desktop only option.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ApplicationOptions.WindowedMode">
            <summary>Desktop only option.</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ApplicationOptions+OrientationType">
            <summary>Orientation type for the application</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:Urho.ApplicationOptions+OrientationType.Landscape">
            <summary>
                <para />
            </summary>
        </member>
        <member name="F:Urho.ApplicationOptions+OrientationType.Portrait">
            <summary>
                <para />
            </summary>
        </member>
        <member name="T:Urho.AsyncExecFinishedEventArgs">
            <summary>Event arguments for the FileSystem's AsyncExecFinished event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AsyncExecFinishedEventArgs.ExitCode">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AsyncExecFinishedEventArgs.RequestID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AsyncLoadFinishedEventArgs">
            <summary>Event arguments for the Scene's AsyncLoadFinished event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AsyncLoadFinishedEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AsyncLoadProgressEventArgs">
            <summary>Event arguments for the Scene's AsyncLoadProgress event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AsyncLoadProgressEventArgs.LoadedNodes">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AsyncLoadProgressEventArgs.LoadedResources">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AsyncLoadProgressEventArgs.Progress">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AsyncLoadProgressEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AsyncLoadProgressEventArgs.TotalNodes">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AsyncLoadProgressEventArgs.TotalResources">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AsyncLoadState">
            <summary>
            Asynchronous loading state of a resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.AsyncLoadState.Done">
            <summary></summary>
        </member>
        <member name="F:Urho.AsyncLoadState.Fail">
            <summary></summary>
        </member>
        <member name="F:Urho.AsyncLoadState.Loading">
            <summary></summary>
        </member>
        <member name="F:Urho.AsyncLoadState.Queued">
            <summary></summary>
        </member>
        <member name="F:Urho.AsyncLoadState.Success">
            <summary></summary>
        </member>
        <member name="T:Urho.AttributeAccessor">
            <summary>
            Abstract base class for invoking attribute accessors.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.AttributeAccessor(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of AttributeAccessor, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.AttributeAccessor(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.AttributeAccessor.Set(Urho.Serializable,System.Int32)">
            <param name="ptr"></param>
            <param name="src"></param>
            <summary>
            Set the attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AttributeAccessor.Set(Urho.Serializable,System.Single)">
            <param name="ptr"></param>
            <param name="src"></param>
            <summary>
            Set the attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AttributeAccessor.Set(Urho.Serializable,System.String)">
            <param name="ptr"></param>
            <param name="src"></param>
            <summary>
            Set the attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AttributeAccessor.Set(Urho.Serializable,Urho.Color)">
            <param name="ptr"></param>
            <param name="src"></param>
            <summary>
            Set the attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AttributeAccessor.Set(Urho.Serializable,Urho.IntRect)">
            <param name="ptr"></param>
            <param name="src"></param>
            <summary>
            Set the attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AttributeAccessor.Set(Urho.Serializable,Urho.IntVector2)">
            <param name="ptr"></param>
            <param name="src"></param>
            <summary>
            Set the attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AttributeAccessor.Set(Urho.Serializable,Urho.Quaternion)">
            <param name="ptr"></param>
            <param name="src"></param>
            <summary>
            Set the attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AttributeAccessor.Set(Urho.Serializable,Urho.Vector2)">
            <param name="ptr"></param>
            <param name="src"></param>
            <summary>
            Set the attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AttributeAccessor.Set(Urho.Serializable,Urho.Vector3)">
            <param name="ptr"></param>
            <param name="src"></param>
            <summary>
            Set the attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.AttributeAccessor.Set(Urho.Serializable,Urho.Vector4)">
            <param name="ptr"></param>
            <param name="src"></param>
            <summary>
            Set the attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AttributeAnimationAddedEventArgs">
            <summary>Event arguments for the ObjectAnimation's AttributeAnimationAdded event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AttributeAnimationAddedEventArgs.AttributeAnimationName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AttributeAnimationAddedEventArgs.ObjectAnimation">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AttributeAnimationInfo">
            <summary>
            Attribute animation instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.AttributeAnimationInfo(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of AttributeAnimationInfo, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.AttributeAnimationInfo(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="T:Urho.AttributeAnimationRemovedEventArgs">
            <summary>Event arguments for the ObjectAnimation's AttributeAnimationRemoved event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AttributeAnimationRemovedEventArgs.AttributeAnimationName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AttributeAnimationRemovedEventArgs.ObjectAnimation">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AttributeAnimationUpdateEventArgs">
            <summary>Event arguments for the Scene's AttributeAnimationUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AttributeAnimationUpdateEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.AttributeAnimationUpdateEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.AttributeInfo">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Audio">
            <summary>
            Audio subsystem, used to playback both regular audio and 3D sound.</summary>
            <remarks>
                <para>The Audio subsystem implements an audio output stream. Once it has been initialized, the following operations are supported:</para>
                <list type="bullet">
                    <item>
                        <term>Playing raw audio, Ogg Vorbis or WAV <see cref="T:Urho.Sound" /> resources using the <see cref="T:Urho.SoundSource" /> component. This allows manual stereo panning of mono sounds; stereo sounds will be output with their original stereo mix.</term>
                    </item>
                    <item>
                        <term>Playing the above sound formats in pseudo-3D using the <see cref="T:Urho.SoundSource3D" /> component. It has stereo positioning and distance attenuation, but does not (at least yet) filter the sound depending on the direction.</term>
                    </item>
                </list>
                <para>To hear pseudo-3D positional sounds, a <see cref="T:Urho.SoundListener" /> component must exist in a scene node and be assigned to the audio subsystem by setting the <see cref="P:Urho.Audio.Listener" /> property. If the sound listener's scene node exists within a specific scene, it will only hear sounds from that scene, but if it has been created into a "sceneless" node it will hear sounds from all scenes.</para>
                <para>The output is software mixed for an unlimited amount of simultaneous sounds. Ogg Vorbis sounds are decoded on the fly, and decoding them can be memory- and CPU-intensive, so WAV files are recommended when a large number of short sound effects need to be played.</para>
                <para>For purposes of volume control, each <see cref="T:Urho.SoundSource" /> can be classified into a user defined group which is multiplied with a master category and the individual <see cref="T:Urho.SoundSource" /> gain set using <see cref="P:Urho.SoundSource.Gain" /> for the final volume level.</para>
                <para>To control the category volumes, set the <see cref="M:Urho.Audio.SetMasterGain" />, which defines the category if it didn't already exist.</para>
                <para>The <see cref="T:Urho.SoundSource" /> components support automatic removal from the node they belong to, once playback is finished. To use, set the <see cref="P:Urho.SoundSource.AutoRemove property" /> on them. This may be useful when a game object plays several "fire and forget" sound effects.</para>
                <para />
                <format type="text/html">
                    <h2>Sound Parameters</h2>
                </format>
                <para />
                <para>A standard WAV file can not tell whether it should loop, and raw audio does not contain any header information. Parameters for the<see cref="Sound" /> resource can optionally be specified through an XML file that has the same name as the sound, but .xml extension. Possible elements are “format” which allows optional attributes “frequency” (and a value in Hz), “sixteenbits” (with either “true” and “false” values) and “stereo” (with either “true” and “false” values).  The other element is “loop” and it allows the optional attributes “enable” (with either “true” and “false” values) and “start” and “end” </para>
                <para>The frequency is in Hz, and loop start and end are bytes from the start of audio data. If a loop is enabled without specifying the start and end, it is assumed to be the whole sound. Ogg Vorbis compressed sounds do not support specifying the loop range, only whether whole sound looping is enabled or disabled.</para>
                <para>The <see cref="Audio" /> subsystem is always instantiated, but in headless mode it is not active. In headless mode the playback of sounds is simulated, taking the sound length and frequency into account. This allows basing logic on whether a specific sound is still playing or not, even in server code.</para>
                <format type="text/html">
                    <h2>Sound Streaming</h2>
                </format>
                <para>In addition to playing existing sound resources, sound can be generated during runtime using the <see cref="T:Urho.SoundSource" />  class and its subclasses. To start playback of a stream on a <see cref="T:Urho.SoundSource" />, call <see cref="M:Urho.SoundSource.Play(Urho.SoundStream)" />.</para>
                <para>Sound streaming is used internally to implement on-the-fly Ogg Vorbis decoding. See the SoundSynthesis sample for an example of using the <see cref="T:Urho.BufferedSoundStream" /> subclass, which allows the sound data to be queued for playback from the main thread.</para>
            </remarks>
        </member>
        <member name="C:Urho.Audio(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Audio, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Audio(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Audio that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Audio attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Audio(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Audio.AddSoundSource(Urho.SoundSource)">
            <param name="soundSource"></param>
            <summary>
            Add a sound source to keep track of. Called by SoundSource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Audio.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Audio.GetMasterGain(System.String)">
            <param name="type"></param>
            <summary>
            Return master gain for a specific sound source type. Unknown sound types will return full gain (1).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.GetSoundSourceMasterGain(Urho.StringHash)">
            <param name="typeHash"></param>
            <summary>
            Return sound type specific gain multiplied by master gain.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.HasMasterGain(System.String)">
            <param name="type"></param>
            <summary>
            Return whether the specified master gain has been defined.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Audio.Interpolation">
            <summary>
            Return whether output is interpolated.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.IsInitialized">
            <summary>
            Return whether an audio stream has been reserved.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.IsPlaying">
            <summary>
            Return whether audio is being output.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.IsStereo">
            <summary>
            Return whether output is stereo.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Audio.Listener">
            <summary>
            Return active sound listener.
            Or
            Set active sound listener for 3D sounds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.MixOutput(System.IntPtr,System.UInt32)">
            <param name="dest"></param>
            <param name="samples"></param>
            <summary>
            Mix sound sources into the buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Audio.MixRate">
            <summary>
            Return mixing rate.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.Play">
            <summary>
            Restart sound output.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.RemoveSoundSource(Urho.SoundSource)">
            <param name="soundSource"></param>
            <summary>
            Remove a sound source. Called by SoundSource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Audio.SampleSize">
            <summary>
            Return byte size of one sample.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.SetMasterGain(System.String,System.Single)">
            <param name="type"></param>
            <param name="gain"></param>
            <summary>
            Set master gain on a specific sound type such as sound effects, music or voice.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.SetMode(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <param name="bufferLengthMSec"></param>
            <param name="mixRate"></param>
            <param name="stereo"></param>
            <param name="interpolation"></param>
            <summary>
            Initialize sound output with specified buffer length and output mode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.Stop">
            <summary>
            Suspend sound output.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.StopSound(Urho.Sound)">
            <param name="sound"></param>
            <summary>
            Stop any sound source playing a certain sound clip.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Audio.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Audio.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Audio.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Audio.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Audio.Update(System.Single)">
            <param name="timeStep"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BackgroundLoader">
            <summary>
            Background loader of resources. Owned by the ResourceCache.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BackgroundLoader(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of BackgroundLoader, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.BackgroundLoader(Urho.ResourceCache)">
            <param name="owner"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BackgroundLoader(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.BackgroundLoader.FinishResources(System.Int32)">
            <param name="maxMs"></param>
            <summary>
            Process resources that are ready to finish.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BackgroundLoader.NumQueuedResources">
            <summary>
            Return amount of resources in the load queue.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BackgroundLoader.QueueResource(Urho.StringHash,System.String,System.Boolean,Urho.Resource)">
            <param name="type"></param>
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <param name="caller"></param>
            <summary>
            Queue loading of a resource. The name must be sanitated to ensure consistent format. Return true if queued (not a duplicate and resource was a known type).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BackgroundLoader.ThreadFunction">
            <summary>
            Resource background loading loop.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BackgroundLoader.WaitForResource(Urho.StringHash,Urho.StringHash)">
            <param name="type"></param>
            <param name="nameHash"></param>
            <summary>
            Wait and finish possible loading of a resource when being requested from the cache.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BaseAction">
            <summary>Base class for actions in Urho.</summary>
            <remarks>
                <para>In general, you will be using one of the concrete implementations of BaseAction that provide a lot of functionality.</para>
                <para />
                <para>Actions are stateless, when you subclass this class, you should never keep any writable state.  Your subclass should merely act as a blueprint for what the action should do.</para>
                <para />
                <para>When you create own actions, you need to override the <see cref="M:Urho.BaseAction.StartAction" /> method to return an <see cref="T:Urho.ActionState" /> subclass which is in chage of driving the action over time.</para>
            </remarks>
        </member>
        <member name="C:Urho.BaseAction">
            <summary>Base constructor</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BaseAction.StartAction(Urho.Node)">
            <param name="target">The target upon which the action will run against.</param>
            <summary>Method that subclasses must override to provide the functionality for the action.   They should create these on demand.</summary>
            <returns>The new <see cref="T:Urho.ActionState" /> that encapsulates the state and provides the implementation to perform your action.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:Urho.BaseAction.Tag">
            <summary>Tag used to easily reference an action from code using a code.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:Urho.BeginFrameEventArgs">
            <summary>Event arguments for the Time's BeginFrame event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginFrameEventArgs.FrameNumber">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginFrameEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BeginRenderingEventArgs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BeginViewRenderEventArgs">
            <summary>Event arguments for the Renderer's BeginViewRender event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginViewRenderEventArgs.Camera">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginViewRenderEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginViewRenderEventArgs.Surface">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginViewRenderEventArgs.Texture">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginViewRenderEventArgs.View">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BeginViewUpdateEventArgs">
            <summary>Event arguments for the View's BeginViewUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginViewUpdateEventArgs.Camera">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginViewUpdateEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginViewUpdateEventArgs.Surface">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginViewUpdateEventArgs.Texture">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BeginViewUpdateEventArgs.View">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BezierBy">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BezierBy(System.Single,Urho.BezierConfig)">
            <param name="t"></param>
            <param name="config"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BezierBy.BezierConfig">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BezierBy.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BezierBy.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BezierByState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BezierByState(Urho.BezierBy,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BezierByState.BezierConfig">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BezierByState.PreviousPosition">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BezierByState.StartPosition">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BezierByState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BezierConfig">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.BezierConfig.ControlPoint1">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.BezierConfig.ControlPoint2">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.BezierConfig.EndPosition">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BezierTo">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BezierTo(System.Single,Urho.BezierConfig)">
            <param name="t"></param>
            <param name="c"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BezierTo.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BezierToState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BezierToState(Urho.BezierBy,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BiasParameters">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BiasParameters(System.Single,System.Single)">
            <param name="constantBias"></param>
            <param name="slopeScaleBias"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.BiasParameters.ConstantBias">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.BiasParameters.SlopeScaleBias">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Billboard">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Billboard.Color">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Billboard.Enabled">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Billboard.Position">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Billboard.Rotation">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Billboard.Size">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Billboard.SortDistance">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Billboard.Uv">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BillboardSet">
            <summary>
            %Billboard component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BillboardSet(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of BillboardSet, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.BillboardSet(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of BillboardSet that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of BillboardSet attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.BillboardSet(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.BillboardSet.AnimationLodBias">
            <summary>
            Return animation LOD bias.
            Or
            Set animation LOD bias.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardSet.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.BillboardSet.Commit">
            <summary>
            Mark for bounding box and vertex buffer update. Call after modifying the billboards.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardSet.FaceCameraMode">
            <summary>
            Return how the billboards rotate in relation to the camera.
            Or
            Set how the billboards should rotate in relation to the camera. Default is to follow camera rotation on all axes (FC_ROTATE_XYZ.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BillboardSet.GetBillboard(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return billboard by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BillboardSet.GetBillboardSafe(System.UInt32)">
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BillboardSet.IsRelative">
            <summary>
            Return whether billboards are relative to the scene node.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BillboardSet.IsScaled">
            <summary>
            Return whether scene node scale affects billboards' size.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BillboardSet.IsSorted">
            <summary>
            Return whether billboards are sorted.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardSet.Material">
            <summary>
            Return material.
            Or
            Set material.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardSet.MaterialAttr">
            <summary>
            Return material attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardSet.NumBillboards">
            <summary>
            Return number of billboards.
            Or
            Set number of billboards.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BillboardSet.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BillboardSet.SetRelative(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether billboards are relative to the scene node. Default true.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BillboardSet.SetScaled(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether scene node scale affects billboards' size. Default true.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BillboardSet.SetSorted(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether billboards are sorted by distance. Default false.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardSet.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.BillboardSet.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.BillboardSet.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.BillboardSet.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardSet.UpdateGeometryType">
            <summary>
            Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BillboardWrapper">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BillboardWrapper(System.Object,Urho.Billboard*)">
            <param name="bbHolder"></param>
            <param name="bb"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardWrapper.Color">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardWrapper.Enabled">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardWrapper.Position">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardWrapper.Rotation">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardWrapper.Size">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardWrapper.SortDistance">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BillboardWrapper.Uv">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BlendMode">
            <summary>
            Blending mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.BlendMode.Add">
            <summary></summary>
        </member>
        <member name="F:Urho.BlendMode.Addalpha">
            <summary></summary>
        </member>
        <member name="F:Urho.BlendMode.Alpha">
            <summary></summary>
        </member>
        <member name="F:Urho.BlendMode.InvDestAlpha">
            <summary></summary>
        </member>
        <member name="F:Urho.BlendMode.MaxBlendmodes">
            <summary></summary>
        </member>
        <member name="F:Urho.BlendMode.Multiply">
            <summary></summary>
        </member>
        <member name="F:Urho.BlendMode.PremultipliedAlpha">
            <summary></summary>
        </member>
        <member name="F:Urho.BlendMode.Replace">
            <summary></summary>
        </member>
        <member name="F:Urho.BlendMode.Subtract">
            <summary></summary>
        </member>
        <member name="F:Urho.BlendMode.SubtractAlpha">
            <summary></summary>
        </member>
        <member name="T:Urho.Blink">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Blink(System.Single,System.UInt32)">
            <param name="duration"></param>
            <param name="numOfBlinks"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Blink.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Blink.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Blink.Times">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BlinkState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BlinkState(Urho.Blink,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BlinkState.OriginalState">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BlinkState.Stop">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BlinkState.Times">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BlinkState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BodyType2D">
            <summary>
            Rigid body type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.BodyType2D.Dynamic">
            <summary></summary>
        </member>
        <member name="F:Urho.BodyType2D.Kinematic">
            <summary></summary>
        </member>
        <member name="F:Urho.BodyType2D.Static">
            <summary></summary>
        </member>
        <member name="T:Urho.Bone">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Bone.Animated">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Bone.BoundingBox">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Bone.CollisionMask">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Bone.InitialPosition">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Bone.InitialRotation">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Bone.InitialScale">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Bone.Name">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Bone.NameHash">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Bone.OffsetMatrix">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Bone.ParentIndex">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Bone.Radius">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BoneHierarchyCreatedEventArgs">
            <summary>Event arguments for the Node's BoneHierarchyCreated event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneHierarchyCreatedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BoneWrapper">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BoneWrapper(System.Object,Urho.Bone*)">
            <param name="objHolder"></param>
            <param name="bone"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneWrapper.Animated">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneWrapper.BoundingBox">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneWrapper.CollisionMask">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneWrapper.InitialPosition">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneWrapper.InitialRotation">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneWrapper.InitialScale">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneWrapper.Name">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneWrapper.NameHash">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneWrapper.OffsetMatrix">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneWrapper.ParentIndex">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoneWrapper.Radius">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BorderImage">
            <summary>
            %Image %UI element with optional border.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BorderImage(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of BorderImage, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.BorderImage(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of BorderImage that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of BorderImage attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.BorderImage(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.BorderImage.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.BorderImage.BlendMode">
            <summary>
            Return blend mode.
            Or
            Set blend mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BorderImage.Border">
            <summary>
            Return border screen dimensions.
            Or
            Set border dimensions on the screen.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BorderImage.HoverOffset">
            <summary>
            Return offset to image rectangle used on hover.
            Or
            Set offset to image rectangle used on hover.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BorderImage.ImageBorder">
            <summary>
            Return border image dimensions. Zero rect uses border screen dimensions.
            Or
            Set border dimensions on the image. If zero (default) uses the screen dimensions, resulting in pixel-perfect borders.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BorderImage.ImageRect">
            <summary>
            Return image rectangle.
            Or
            Set part of texture to use as the image.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BorderImage.IsTiled">
            <summary>
            Return whether is tiled.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BorderImage.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BorderImage.SetFullImageRect">
            <summary>
            Use whole texture as the image.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BorderImage.SetHoverOffset(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set offset to image rectangle used on hover.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BorderImage.SetTiled(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set tiled mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BorderImage.Texture">
            <summary>
            Return texture.
            Or
            Set texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BorderImage.TextureAttr">
            <summary>
            Return texture attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BorderImage.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.BorderImage.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.BorderImage.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.BorderImage.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BoundingBox">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BoundingBox(System.Single,System.Single)">
            <param name="min"></param>
            <param name="max"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BoundingBox(Urho.Vector3,Urho.Vector3)">
            <param name="min"></param>
            <param name="max"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BoundingBox.Defined">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.BoundingBox.Max">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.BoundingBox.Min">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.BufferedSoundStream">
            <summary>
            %Sound stream that supports manual buffering of data from the main thread.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BufferedSoundStream">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.BufferedSoundStream(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of BufferedSoundStream, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.BufferedSoundStream(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.BufferedSoundStream.AddData(System.IntPtr,System.UInt32)">
            <param name="data"></param>
            <param name="numBytes"></param>
            <summary>
            Buffer sound data. Makes a copy of it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BufferedSoundStream.AddData(System.Byte[],System.Int32,System.Int32)">
            <param name="data"></param>
            <param name="start"></param>
            <param name="count"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BufferedSoundStream.AddData(System.Int16[],System.Int32,System.Int32)">
            <param name="data"></param>
            <param name="start"></param>
            <param name="count"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BufferedSoundStream.BufferLength">
            <summary>
            Return length of buffered (unplayed) sound data in seconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.BufferedSoundStream.BufferNumBytes">
            <summary>
            Return amount of buffered (unplayed) sound data in bytes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BufferedSoundStream.Clear">
            <summary>
            Remove all buffered audio data.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.BufferedSoundStream.GetData(System.SByte*,System.UInt32)">
            <param name="dest"></param>
            <param name="numBytes"></param>
            <summary>
            Produce sound data into destination. Return number of bytes produced. Called by SoundSource from the mixing thread.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Button">
            <summary>
            Push button %UI element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Button(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Button, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Button(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Button that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Button attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Button(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Button.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Button.IsPressed">
            <summary>
            Return whether is currently pressed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Button.OnClickBegin(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="button"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse click begin.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Button.OnClickEnd(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,System.Int32,Urho.Cursor,Urho.UIElement)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="button"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <param name="beginElement"></param>
            <summary>
            React to mouse click end.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Button.OnDragMove(Urho.IntVector2,Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="deltaPos"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag motion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Button.OnKey(System.Int32,System.Int32,System.Int32)">
            <param name="key"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <summary>
            React to a key press.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Button.PressedChildOffset">
            <summary>
            Return offset of child elements when pressed.
            Or
            Set offset of child elements when pressed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Button.PressedOffset">
            <summary>
            Return pressed image offset.
            Or
            Set offset to image rectangle used when pressed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Button.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Button.RepeatDelay">
            <summary>
            Return repeat delay.
            Or
            Set repeat delay.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Button.RepeatRate">
            <summary>
            Return repeat rate.
            Or
            Set repeat rate.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Button.SetPressedChildOffset(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set offset of child elements when pressed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Button.SetPressedOffset(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set offset to image rectangle used when pressed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Button.SetRepeat(System.Single,System.Single)">
            <param name="delay"></param>
            <param name="rate"></param>
            <summary>
            Set repeat properties. Rate 0 (default) disables repeat.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Button.SubscribeToPressed(System.Action{Urho.PressedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the Pressed event raised by the Button.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Button.SubscribeToReleased(System.Action{Urho.ReleasedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the Released event raised by the Button.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Button.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Button.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Button.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Button.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Button.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Perform UI element update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CallFunc">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CallFunc">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CallFunc(System.Action)">
            <param name="selector"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFunc.CallFunction">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFunc.ScriptFuncName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CallFunc.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CallFuncN">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CallFuncN">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CallFuncN(System.Action{Urho.Node})">
            <param name="selector"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncN.CallFunctionN">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CallFuncN.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CallFuncND">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CallFuncND(System.Action{Urho.Node,System.Object},System.Object)">
            <param name="selector"></param>
            <param name="d"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncND.CallFunctionND">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncND.Data">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CallFuncND.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CallFuncNDState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CallFuncNDState(Urho.CallFuncND,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncNDState.CallFunctionND">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncNDState.Data">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CallFuncNDState.Execute">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CallFuncNState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CallFuncNState(Urho.CallFuncN,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncNState.CallFunctionN">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CallFuncNState.Execute">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CallFuncO">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CallFuncO">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CallFuncO(System.Action{System.Object},System.Object)">
            <param name="selector"></param>
            <param name="pObject"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncO.CallFunctionO">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncO.Object">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CallFuncO.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CallFuncOState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CallFuncOState(Urho.CallFuncO,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncOState.CallFunctionO">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CallFuncOState.Execute">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncOState.Object">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CallFuncState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CallFuncState(Urho.CallFunc,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncState.CallFunction">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CallFuncState.Execute">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CallFuncState.ScriptFuncName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CallFuncState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Camera">
            <summary>
            %Camera component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Camera(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Camera, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Camera(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Camera that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Camera attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Camera(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Camera.AspectRatio">
            <summary>
            Return aspect ratio.
            Or
            Set aspect ratio manually. Disables the auto aspect ratio -mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.AutoAspectRatio">
            <summary>
            Return auto aspect ratio flag.
            Or
            Set automatic aspect ratio based on viewport dimensions. Enabled by default.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Camera.ClipPlane">
            <summary>
            Return the custom clipping plane.
            Or
            Set custom clipping plane in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.ClipPlaneAttr">
            <summary>
            Return clipping plane attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.EffectiveWorldTransform">
            <summary>
            Get effective world transform for matrix and frustum calculations including reflection but excluding node scaling.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.FarClip">
            <summary>
            Return far clip distance.
            Or
            Set far clip distance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.FillMode">
            <summary>
            Return fill mode.
            Or
            Set polygon fill mode to use when rendering a scene.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.FlipVertical">
            <summary>
            Return vertical flipping mode.
            Or
            Set vertical flipping mode. Called internally by View to resolve OpenGL / Direct3D9 rendertarget sampling differences.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.Fov">
            <summary>
            Return vertical field of view in degrees.
            Or
            Set vertical field of view in degrees.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.GetDistance(Urho.Vector3)">
            <param name="worldPos"></param>
            <summary>
            Return distance to position. In orthographic mode uses only Z coordinate.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.GetDistanceSquared(Urho.Vector3)">
            <param name="worldPos"></param>
            <summary>
            Return squared distance to position. In orthographic mode uses only Z coordinate.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.GetFaceCameraRotation(Urho.Vector3,Urho.Quaternion,Urho.FaceCameraMode)">
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="mode"></param>
            <summary>
            Return a world rotation for facing a camera on certain axes based on the existing world rotation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.GetLodDistance(System.Single,System.Single,System.Single)">
            <param name="distance"></param>
            <param name="scale"></param>
            <param name="bias"></param>
            <summary>
            Return a scene node's LOD scaled distance.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.GetProjection(System.Boolean)">
            <param name="apiSpecific"></param>
            <summary>
            Return either API-specific or API-independent (D3D convention) projection matrix.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.GetScreenRay(System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Return ray corresponding to normalized screen coordinates (0.0 - 1.0).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.GetSplitFrustum(System.Single,System.Single)">
            <param name="nearClip"></param>
            <param name="farClip"></param>
            <summary>
            Return frustum split by custom near and far clip distances.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.GetViewSpaceSplitFrustum(System.Single,System.Single)">
            <param name="nearClip"></param>
            <param name="farClip"></param>
            <summary>
            Return split frustum in view space.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.HalfViewSize">
            <summary>
            Return half view size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.IsOrthographic">
            <summary>
            Return orthographic flag.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.IsProjectionValid">
            <summary>
            Return if projection parameters are valid for rendering and raycasting.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.LodBias">
            <summary>
            Return LOD bias.
            Or
            Set LOD bias.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.NearClip">
            <summary>
            Return near clip distance.
            Or
            Set near clip distance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.OrthoSize">
            <summary>
            Return orthographic mode size.
            Or
            Set orthographic mode view uniform size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.ProjectionOffset">
            <summary>
            Return projection offset.
            Or
            Set projection offset. It needs to be calculated as (offset in pixels) / (viewport dimensions.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.ReflectionPlane">
            <summary>
            Return the reflection plane.
            Or
            Set reflection plane in world space for reflection mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.ReflectionPlaneAttr">
            <summary>
            Return reflection plane attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.ReverseCulling">
            <summary>
            Return whether to reverse culling; affected by vertical flipping and reflection.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.ScreenToWorldPoint(Urho.Vector3)">
            <param name="screenPos"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.SetAspectRatioInternal(System.Single)">
            <param name="aspectRatio"></param>
            <summary>
            Set aspect ratio without disabling the "auto aspect ratio" mode. Called internally by View.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.SetClipPlaneAttr(Urho.Vector4)">
            <param name="value"></param>
            <summary>
            Set clipping plane attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.SetOrthographic(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set orthographic mode enabled/disabled.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.SetOrthoSize(Urho.Vector2)">
            <param name="orthoSize"></param>
            <summary>
            Set orthographic mode view non-uniform size. Disables the auto aspect ratio -mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.SetOrthoSizeAttr(System.Single)">
            <param name="orthoSize"></param>
            <summary>
            Set orthographic size attribute without forcing the aspect ratio.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.SetReflectionPlaneAttr(Urho.Vector4)">
            <param name="value"></param>
            <summary>
            Set reflection plane attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Camera.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Camera.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Camera.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.UseClipping">
            <summary>
            Return whether is using a custom clipping plane.
            Or
            Set whether to use a custom clip plane.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.UseReflection">
            <summary>
            Return whether is using reflection.
            Or
            Set reflection mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.ViewMask">
            <summary>
            Return view mask.
            Or
            Set view mask. Will be and'ed with object's view mask to see if the object should be rendered.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.ViewOverrideFlags">
            <summary>
            Return view override flags.
            Or
            Set view override flags.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.ViewSpaceFrustum">
            <summary>
            Return frustum in view space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Camera.WorldToScreenPoint(Urho.Vector3)">
            <param name="worldPos"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Camera.Zoom">
            <summary>
            Return zoom.
            Or
            Set zoom.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CascadeParameters">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CascadeParameters(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="split1"></param>
            <param name="split2"></param>
            <param name="split3"></param>
            <param name="split4"></param>
            <param name="fadeStart"></param>
            <param name="biasAutoAdjust"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CascadeParameters.BiasAutoAdjust">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CascadeParameters.FadeStart">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CascadeParameters.Split1">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CascadeParameters.Split2">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CascadeParameters.Split3">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CascadeParameters.Split4">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ChangeLanguageEventArgs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CharEntryEventArgs">
            <summary>Event arguments for the LineEdit's CharEntry event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CharEntryEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CharEntryEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CharEntryEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CharEntryEventArgs.Text">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CheckBox">
            <summary>
            %UI element that can be toggled between unchecked and checked state.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CheckBox(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of CheckBox, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.CheckBox(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of CheckBox that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of CheckBox attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.CheckBox(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.CheckBox.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CheckBox.CheckedOffset">
            <summary>
            Return checked image offset.
            Or
            Set checked image offset.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CheckBox.IsChecked">
            <summary>
            Return whether is checked.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CheckBox.OnClickBegin(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="button"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse click begin.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CheckBox.OnKey(System.Int32,System.Int32,System.Int32)">
            <param name="key"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <summary>
            React to a key press.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CheckBox.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CheckBox.SetChecked(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set checked state.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CheckBox.SetCheckedOffset(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set checked image offset.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CheckBox.SubscribeToToggled(System.Action{Urho.ToggledEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the Toggled event raised by the CheckBox.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.CheckBox.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CheckBox.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CheckBox.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CheckBox.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ClientConnectedEventArgs">
            <summary>Event arguments for the Connection's ClientConnected event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ClientConnectedEventArgs.Connection">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ClientDisconnectedEventArgs">
            <summary>Event arguments for the Connection's ClientDisconnected event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ClientDisconnectedEventArgs.Connection">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ClientIdentityEventArgs">
            <summary>Event arguments for the Connection's ClientIdentity event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ClientIdentityEventArgs.Allow">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ClientIdentityEventArgs.Connection">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ClientSceneLoadedEventArgs">
            <summary>Event arguments for the Connection's ClientSceneLoaded event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ClientSceneLoadedEventArgs.Connection">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CollisionBox2D">
            <summary>
            2D box collision component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CollisionBox2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of CollisionBox2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionBox2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of CollisionBox2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of CollisionBox2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionBox2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.CollisionBox2D.Angle">
            <summary>
            Return angle.
            Or
            Set angle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionBox2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CollisionBox2D.Center">
            <summary>
            Return center.
            Or
            Set center.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionBox2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionBox2D.SetCenter(System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set center.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionBox2D.SetSize(System.Single,System.Single)">
            <param name="width"></param>
            <param name="height"></param>
            <summary>
            Set size.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionBox2D.Size">
            <summary>
            Return size.
            Or
            Set size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionBox2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CollisionBox2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionBox2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionBox2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CollisionChain2D">
            <summary>
            2D chain collision component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CollisionChain2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of CollisionChain2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionChain2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of CollisionChain2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of CollisionChain2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionChain2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.CollisionChain2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.CollisionChain2D.GetVertex(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return vertex.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionChain2D.Loop">
            <summary>
            Return loop.
            Or
            Set loop.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionChain2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionChain2D.SetVertex(System.UInt32,Urho.Vector2)">
            <param name="index"></param>
            <param name="vertex"></param>
            <summary>
            Set vertex.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionChain2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CollisionChain2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionChain2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionChain2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionChain2D.VertexCount">
            <summary>
            Return vertex count.
            Or
            Set vertex count.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CollisionCircle2D">
            <summary>
            2D circle collision component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CollisionCircle2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of CollisionCircle2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionCircle2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of CollisionCircle2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of CollisionCircle2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionCircle2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.CollisionCircle2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CollisionCircle2D.Center">
            <summary>
            Return center.
            Or
            Set center.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionCircle2D.Radius">
            <summary>
            Return radius.
            Or
            Set radius.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionCircle2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionCircle2D.SetCenter(System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set center.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionCircle2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CollisionCircle2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionCircle2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionCircle2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CollisionData">
            <summary>Contains the information about a physics collision event.</summary>
            <remarks>The data in this structure is the result of a collision event between scene nodes and rigit bodies.</remarks>
        </member>
        <member name="C:Urho.CollisionData(System.Byte*)">
            <param name="p"></param>
            <summary>Contructs a CollisionData structure from a low-level buffer containing the encoded collision event.</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CollisionData.ContactDistance">
            <summary>Distance, negative when interpenetrating</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CollisionData.ContactImpulse">
            <summary>Impulse applied in collision</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CollisionData.ContactNormal">
            <summary>Normal vector.</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CollisionData.ContactPosition">
            <summary>World space position</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionData.ToString">
            <summary>Returns a human readable description of the collision.</summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CollisionEdge2D">
            <summary>
            2D edge collision component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CollisionEdge2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of CollisionEdge2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionEdge2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of CollisionEdge2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of CollisionEdge2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionEdge2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.CollisionEdge2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.CollisionEdge2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionEdge2D.SetVertices(Urho.Vector2,Urho.Vector2)">
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <summary>
            Set vertices.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionEdge2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CollisionEdge2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionEdge2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionEdge2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionEdge2D.Vertex1">
            <summary>
            Return vertex 1.
            Or
            Set vertex 1.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionEdge2D.Vertex2">
            <summary>
            Return vertex 2.
            Or
            Set vertex 2.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CollisionEventMode">
            <summary>
            Rigid body collision event signaling mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CollisionEventMode.Active">
            <summary></summary>
        </member>
        <member name="F:Urho.CollisionEventMode.Always">
            <summary></summary>
        </member>
        <member name="F:Urho.CollisionEventMode.Never">
            <summary></summary>
        </member>
        <member name="T:Urho.CollisionGeometryData">
            <summary>
            Base class for collision shape geometry data.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CollisionPolygon2D">
            <summary>
            2D polygon collision component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CollisionPolygon2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of CollisionPolygon2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionPolygon2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of CollisionPolygon2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of CollisionPolygon2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionPolygon2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.CollisionPolygon2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.CollisionPolygon2D.GetVertex(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return vertex.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionPolygon2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionPolygon2D.SetVertex(System.UInt32,Urho.Vector2)">
            <param name="index"></param>
            <param name="vertex"></param>
            <summary>
            Set vertex.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionPolygon2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CollisionPolygon2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionPolygon2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionPolygon2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionPolygon2D.VertexCount">
            <summary>
            Return vertex count.
            Or
            Set vertex count.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CollisionShape">
            <summary>
            Physics collision shape component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CollisionShape(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of CollisionShape, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionShape(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of CollisionShape that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of CollisionShape attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionShape(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.CollisionShape.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.CollisionShape.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.LodLevel">
            <summary>
            Return model LOD level.
            Or
            Set model LOD level.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.Margin">
            <summary>
            Return collision margin.
            Or
            Set collision margin.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.Model">
            <summary>
            Return triangle mesh / convex hull model.
            Or
            Set triangle mesh / convex hull model.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.ModelAttr">
            <summary>
            Return model attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.NotifyRigidBody(System.Boolean)">
            <param name="updateMass"></param>
            <summary>
            Update the new collision shape to the RigidBody.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.PhysicsWorld">
            <summary>
            Return physics world.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.Position">
            <summary>
            Return offset position.
            Or
            Set offset position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.ReleaseShape">
            <summary>
            Release the collision shape.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.Rotation">
            <summary>
            Return offset rotation.
            Or
            Set offset rotation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetBox(Urho.Vector3,Urho.Vector3,Urho.Quaternion)">
            <param name="size"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set as a box.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetCapsule(System.Single,System.Single,Urho.Vector3,Urho.Quaternion)">
            <param name="diameter"></param>
            <param name="height"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set as a capsule.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetCone(System.Single,System.Single,Urho.Vector3,Urho.Quaternion)">
            <param name="diameter"></param>
            <param name="height"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set as a cone.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetConvexHull(Urho.Model,System.UInt32,Urho.Vector3,Urho.Vector3,Urho.Quaternion)">
            <param name="model"></param>
            <param name="lodLevel"></param>
            <param name="scale"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set as a convex hull from Model.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetCustomConvexHull(Urho.CustomGeometry,Urho.Vector3,Urho.Vector3,Urho.Quaternion)">
            <param name="custom"></param>
            <param name="scale"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set as a convex hull from CustomGeometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetCustomTriangleMesh(Urho.CustomGeometry,Urho.Vector3,Urho.Vector3,Urho.Quaternion)">
            <param name="custom"></param>
            <param name="scale"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set as a triangle mesh from CustomGeometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetCylinder(System.Single,System.Single,Urho.Vector3,Urho.Quaternion)">
            <param name="diameter"></param>
            <param name="height"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set as a cylinder.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetSphere(System.Single,Urho.Vector3,Urho.Quaternion)">
            <param name="diameter"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set as a sphere.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetStaticPlane(Urho.Vector3,Urho.Quaternion)">
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set as a static plane.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetTerrain(System.UInt32)">
            <param name="lodLevel"></param>
            <summary>
            Set as a terrain. Only works if the same scene node contains a Terrain component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetTransform(Urho.Vector3,Urho.Quaternion)">
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set offset transform.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape.SetTriangleMesh(Urho.Model,System.UInt32,Urho.Vector3,Urho.Vector3,Urho.Quaternion)">
            <param name="model"></param>
            <param name="lodLevel"></param>
            <param name="scale"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set as a triangle mesh from Model. If you update a model's geometry and want to reapply the shape, call physicsWorld-&gt;RemoveCachedGeometry(model) first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.ShapeType">
            <summary>
            Return shape type.
            Or
            Set shape type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.Size">
            <summary>
            Return shape size.
            Or
            Set shape size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CollisionShape.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionShape.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionShape.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape.WorldBoundingBox">
            <summary>
            Return world-space bounding box.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CollisionShape2D">
            <summary>
            2D collision shape component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CollisionShape2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of CollisionShape2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.CollisionShape2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.CategoryBits">
            <summary>
            Return filter category bits.
            Or
            Set filter category bits.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape2D.CreateFixture">
            <summary>
            Create fixture.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.Density">
            <summary>
            Return density.
            Or
            Set density.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.Friction">
            <summary>
            Return friction.
            Or
            Set friction.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.GroupIndex">
            <summary>
            Return filter group index.
            Or
            Set filter group index.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.Inertia">
            <summary>
            Return inertia.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape2D.IsTrigger">
            <summary>
            Return trigger.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.MaskBits">
            <summary>
            Return filter mask bits.
            Or
            Set filter mask bits.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.Mass">
            <summary>
            Return mass.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.MassCenter">
            <summary>
            Return mass center.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape2D.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape2D.ReleaseFixture">
            <summary>
            Release fixture.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.Restitution">
            <summary>
            Return restitution.
            Or
            Set restitution .
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CollisionShape2D.SetTrigger(System.Boolean)">
            <param name="trigger"></param>
            <summary>
            Set trigger.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CollisionShape2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionShape2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CollisionShape2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Color">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Color(Urho.Color)">
            <param name="source"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Color(Urho.Color,System.Single)">
            <param name="source"></param>
            <param name="alpha"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Color(System.Single,System.Single,System.Single,System.Single)">
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.A">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.B">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.Black">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.Blue">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.Cyan">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.G">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.Gray">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.Green">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.Magenta">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.R">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.Red">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.Transparent">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.White">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Color.Yellow">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ColorFrame">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CompareMode">
            <summary>
            Depth or stencil compare mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CompareMode.Always">
            <summary></summary>
        </member>
        <member name="F:Urho.CompareMode.Equal">
            <summary></summary>
        </member>
        <member name="F:Urho.CompareMode.Greater">
            <summary></summary>
        </member>
        <member name="F:Urho.CompareMode.GreaterEqual">
            <summary></summary>
        </member>
        <member name="F:Urho.CompareMode.Less">
            <summary></summary>
        </member>
        <member name="F:Urho.CompareMode.LessEqual">
            <summary></summary>
        </member>
        <member name="F:Urho.CompareMode.MaxComparemodes">
            <summary></summary>
        </member>
        <member name="F:Urho.CompareMode.NotEqual">
            <summary></summary>
        </member>
        <member name="T:Urho.Component">
            <summary>
            Base class for components. Components can be attached to scene nodes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Component(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Component, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Component(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Component that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Component attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Component(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Component.AddReplicationState(Urho.ComponentReplicationState*)">
            <param name="state"></param>
            <summary>
            Add a replication state that is tracking this component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Component.Application">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Component.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Component.BaseTypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.CleanupConnection(Urho.Connection)">
            <param name="connection"></param>
            <summary>
            Clean up all references to a network connection that is about to be removed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.GetComponent(Urho.StringHash)">
            <param name="type"></param>
            <summary>
            Return component in the same scene node by type. If there are several, returns the first.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.GetComponent``1">
            <typeparam name="T"></typeparam>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Component.ID">
            <summary>
            Return ID.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.IsEnabled">
            <summary>
            Return whether is enabled.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.IsEnabledEffective">
            <summary>
            Return whether is effectively enabled (node is also enabled.)
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.MarkNetworkUpdate">
            <summary>
            Mark for attribute check on the next network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Component.Node">
            <summary>
            Return scene node.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.OnAttachedToNode(Urho.Node)">
            <param name="node"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.OnDeleted">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.OnDeserialize(Urho.IComponentDeserializer)">
            <param name="deserializer"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.OnSerialize(Urho.IComponentSerializer)">
            <param name="serializer"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.OnUpdate(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Make sure you set SubscribeToSceneUpdate property to true in order to receive Update events
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.PrepareNetworkUpdate">
            <summary>
            Prepare network update by comparing attributes and marking replication states dirty as necessary.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Component.ReceiveSceneUpdates">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.Remove">
            <summary>
            Remove from the scene node. If no other shared pointer references exist, causes immediate deletion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.SaveXml(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Component.Scene">
            <summary>
            Return the scene the node belongs to.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Component.SetEnabled(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set enabled/disabled state.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Component.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Component.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Component.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Component.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ComponentAddedEventArgs">
            <summary>Event arguments for the Scene's ComponentAdded event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ComponentAddedEventArgs.Component">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ComponentAddedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ComponentAddedEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ComponentEnabledChangedEventArgs">
            <summary>Event arguments for the Scene's ComponentEnabledChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ComponentEnabledChangedEventArgs.Component">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ComponentEnabledChangedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ComponentEnabledChangedEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ComponentRemovedEventArgs">
            <summary>Event arguments for the Scene's ComponentRemoved event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ComponentRemovedEventArgs.Component">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ComponentRemovedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ComponentRemovedEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ComponentReplicationState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CompressedFormat">
            <summary>
            Supported compressed image formats.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CompressedFormat.Dxt1">
            <summary></summary>
        </member>
        <member name="F:Urho.CompressedFormat.Dxt3">
            <summary></summary>
        </member>
        <member name="F:Urho.CompressedFormat.Dxt5">
            <summary></summary>
        </member>
        <member name="F:Urho.CompressedFormat.Etc1">
            <summary></summary>
        </member>
        <member name="F:Urho.CompressedFormat.None">
            <summary></summary>
        </member>
        <member name="F:Urho.CompressedFormat.PvrtcRgbaN2Bpp">
            <summary></summary>
        </member>
        <member name="F:Urho.CompressedFormat.PvrtcRgbaN4Bpp">
            <summary></summary>
        </member>
        <member name="F:Urho.CompressedFormat.PvrtcRgbN2Bpp">
            <summary></summary>
        </member>
        <member name="F:Urho.CompressedFormat.PvrtcRgbN4Bpp">
            <summary></summary>
        </member>
        <member name="F:Urho.CompressedFormat.Rgba">
            <summary></summary>
        </member>
        <member name="T:Urho.CompressedLevel">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConnectFailedEventArgs">
            <summary>Event arguments for the Network's ConnectFailed event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Connection">
            <summary>
            %Connection to a remote network host.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Connection(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Connection, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Connection(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Connection.Address">
            <summary>
            Return remote address.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Connection.BytesInPerSec">
            <summary>
            Return bytes received per second.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.BytesOutPerSec">
            <summary>
            Return bytes sent per second.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.ConfigureNetworkSimulator(System.Int32,System.Single)">
            <param name="latencyMs"></param>
            <param name="packetLoss"></param>
            <summary>
            Set network simulation parameters. Called by Network.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.Controls">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.Disconnect(System.Int32)">
            <param name="waitMSec"></param>
            <summary>
            Disconnect. If wait time is non-zero, will block while waiting for disconnect to finish.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.DownloadName">
            <summary>
            Return name of current package download, or empty if no downloads.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.DownloadProgress">
            <summary>
            Return progress of current package download, or 1.0 if no downloads.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.IsClient">
            <summary>
            Return whether is a client connection.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.IsConnected">
            <summary>
            Return whether is fully connected.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.IsConnectPending">
            <summary>
            Return whether connection is pending.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.IsSceneLoaded">
            <summary>
            Return whether the scene is loaded and ready to receive server updates.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.LastHeardTime">
            <summary>
            Return the time since last received data from the remote host in milliseconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.LogStatistics">
            <summary>
            Return whether to log data in/out statistics.
            Or
            Set whether to log data in/out statistics.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.NumDownloads">
            <summary>
            Return number of package downloads remaining.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.PacketsInPerSec">
            <summary>
            Return packets received per second.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.PacketsOutPerSec">
            <summary>
            Return packets sent per second.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.Port">
            <summary>
            Return remote port.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.Position">
            <summary>
            Return the observer position sent by the client for interest management.
            Or
            Set the observer position for interest management, to be sent to the server.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.ProcessPendingLatestData">
            <summary>
            Process pending latest data for nodes and components.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.Rotation">
            <summary>
            Return the observer rotation sent by the client for interest management.
            Or
            Set the observer rotation for interest management, to be sent to the server. Note: not used by the NetworkPriority component.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.RoundTripTime">
            <summary>
            Return the connection's round trip time in milliseconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.Scene">
            <summary>
            Return the scene used by this connection.
            Or
            Assign scene. On the server, this will cause the client to load it.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.SendClientUpdate">
            <summary>
            Send latest controls from the client. Called by Network.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.SendMessage(System.Int32,System.Boolean,System.Boolean,System.Byte[],System.UInt32)">
            <param name="msgId"></param>
            <param name="reliable"></param>
            <param name="inOrder"></param>
            <param name="buffer"></param>
            <param name="contentId"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.SendMessage(System.Int32,System.Boolean,System.Boolean,System.Byte*,System.UInt32,System.UInt32)">
            <param name="msgID"></param>
            <param name="reliable"></param>
            <param name="inOrder"></param>
            <param name="data"></param>
            <param name="numBytes"></param>
            <param name="contentID"></param>
            <summary>
            Send a message.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.SendPackages">
            <summary>
            Send package files to client. Called by network.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.SendPackageToClient(Urho.PackageFile)">
            <param name="package"></param>
            <summary>
            Trigger client connection to download a package file from the server. Can be used to download additional resource packages when client is already joined in a scene. The package must have been added as a requirement to the scene the client is joined in, or else the eventual download will fail.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.SendRemoteEvents">
            <summary>
            Send queued remote events. Called by Network.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.SendServerUpdate">
            <summary>
            Send scene update messages. Called by Network.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.SetConnectPending(System.Boolean)">
            <param name="connectPending"></param>
            <summary>
            Set the connection pending status. Called by Network.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.SubscribeToClientConnected(System.Action{Urho.ClientConnectedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ClientConnected event raised by the Connection.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Connection.SubscribeToClientDisconnected(System.Action{Urho.ClientDisconnectedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ClientDisconnected event raised by the Connection.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Connection.SubscribeToClientIdentity(System.Action{Urho.ClientIdentityEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ClientIdentity event raised by the Connection.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Connection.SubscribeToClientSceneLoaded(System.Action{Urho.ClientSceneLoadedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ClientSceneLoaded event raised by the Connection.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Connection.SubscribeToNetworkMessage(System.Action{Urho.NetworkMessageEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NetworkMessage event raised by the Connection.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Connection.SubscribeToNetworkSceneLoadFailed(System.Action{Urho.NetworkSceneLoadFailedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NetworkSceneLoadFailed event raised by the Connection.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Connection.TimeStamp">
            <summary>
            Return the controls timestamp, sent from client to server along each control update.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Connection.ToDebugString">
            <summary>
            Return an address:port string.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Connection.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Connection.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Connection.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Connection.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConsoleCommandEventArgs">
            <summary>Event arguments for the UrhoConsole's ConsoleCommand event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConsoleCommandEventArgs.Command">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConsoleCommandEventArgs.Id">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstantBuffer">
            <summary>
            Hardware constant buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstantBuffer(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstantBuffer, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstantBuffer(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstantBuffer that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstantBuffer attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstantBuffer(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.ConstantBuffer.Apply">
            <summary>
            Apply to GPU.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstantBuffer.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.ConstantBuffer.IsDirty">
            <summary>
            Return whether has unapplied data.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstantBuffer.OnDeviceReset">
            <summary>
            Recreate the GPU resource and restore data if applicable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstantBuffer.Release">
            <summary>
            Release the buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstantBuffer.SetParameter(System.UInt32,System.UInt32,System.Void*)">
            <param name="offset"></param>
            <param name="size"></param>
            <param name="data"></param>
            <summary>
            Set a generic parameter and mark buffer dirty.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstantBuffer.SetSize(System.UInt32)">
            <param name="size"></param>
            <summary>
            Set size and create GPU-side buffer. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstantBuffer.SetVector3ArrayParameter(System.UInt32,System.UInt32,System.Void*)">
            <param name="offset"></param>
            <param name="rows"></param>
            <param name="data"></param>
            <summary>
            Set a Vector3 array parameter and mark buffer dirty.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstantBuffer.Size">
            <summary>
            Return size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstantBuffer.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstantBuffer.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstantBuffer.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstantBuffer.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Constraint">
            <summary>
            Physics constraint component. Connects two rigid bodies together, or one rigid body to a static point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Constraint(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Constraint, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Constraint(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Constraint that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Constraint attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Constraint(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Constraint.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint.ApplyFrames">
            <summary>
            Apply constraint frames.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Constraint.CFM">
            <summary>
            Return constraint force mixing parameter.
            Or
            Set constraint force mixing parameter. Zero = leave to default.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.ConstraintType">
            <summary>
            Return constraint type.
            Or
            Set constraint type and recreate the constraint.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.DisableCollision">
            <summary>
            Return whether collisions between connected bodies are disabled.
            Or
            Set whether to disable collisions between connected bodies.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.ERP">
            <summary>
            Return constraint error reduction parameter.
            Or
            Set constraint error reduction parameter. Zero = leave to default.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.HighLimit">
            <summary>
            Return high limit.
            Or
            Set high limit. Interpretation is constraint type specific.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.LowLimit">
            <summary>
            Return low limit.
            Or
            Set low limit. Interpretation is constraint type specific.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.OtherBody">
            <summary>
            Return the other rigid body. May be null if connected to the static world.
            Or
            Set other body to connect to. Set to null to connect to the static world.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.OtherPosition">
            <summary>
            Return constraint position relative to other body.
            Or
            Set constraint position relative to the other body. If connected to the static world, is a world space position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.OtherRotation">
            <summary>
            Return constraint rotation relative to other body.
            Or
            Set constraint rotation relative to the other body. If connected to the static world, is a world space rotation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.OwnBody">
            <summary>
            Return rigid body in own scene node.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.PhysicsWorld">
            <summary>
            Return physics world.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.Position">
            <summary>
            Return constraint position relative to own body.
            Or
            Set constraint position relative to own body.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint.ReleaseConstraint">
            <summary>
            Release the constraint.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.Rotation">
            <summary>
            Return constraint rotation relative to own body.
            Or
            Set constraint rotation relative to own body.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint.SetAxis(Urho.Vector3)">
            <param name="axis"></param>
            <summary>
            Set constraint rotation relative to own body by specifying the axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint.SetOtherAxis(Urho.Vector3)">
            <param name="axis"></param>
            <summary>
            Set constraint rotation relative to the other body by specifying the axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint.SetWorldPosition(Urho.Vector3)">
            <param name="position"></param>
            <summary>
            Set constraint world space position. Resets both own and other body relative position, ie. zeroes the constraint error.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Constraint.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Constraint.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Constraint.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint.WorldPosition">
            <summary>
            Return constraint world position, calculated from own body.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Constraint2D">
            <summary>
            2D physics constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Constraint2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Constraint2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Constraint2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Constraint2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Constraint2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Constraint2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Constraint2D.AttachedConstraint">
            <summary>
            Return attached constraint (for gear).
            Or
            Set attached constriant (for gear).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Constraint2D.CollideConnected">
            <summary>
            Return collide connected.
            Or
            Set collide connected.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint2D.CreateJoint">
            <summary>
            Create Joint.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint2D.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint2D.OtherBody">
            <summary>
            Return other body.
            Or
            Set other rigid body.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint2D.OwnerBody">
            <summary>
            Return owner body.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Constraint2D.ReleaseJoint">
            <summary>
            Release Joint.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Constraint2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Constraint2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Constraint2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Constraint2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstraintDistance2D">
            <summary>
            2D distance constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstraintDistance2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstraintDistance2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintDistance2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstraintDistance2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstraintDistance2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintDistance2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ConstraintDistance2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintDistance2D.DampingRatio">
            <summary>
            Return damping ratio.
            Or
            Set damping ratio.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintDistance2D.FrequencyHz">
            <summary>
            Return frequency Hz.
            Or
            Set frequency Hz.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintDistance2D.OtherBodyAnchor">
            <summary>
            Return other body anchor.
            Or
            Set other body anchor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintDistance2D.OwnerBodyAnchor">
            <summary>
            Return owner body anchor.
            Or
            Set owner body anchor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstraintDistance2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintDistance2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintDistance2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintDistance2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintDistance2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstraintFriction2D">
            <summary>
            2D friction constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstraintFriction2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstraintFriction2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintFriction2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstraintFriction2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstraintFriction2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintFriction2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ConstraintFriction2D.Anchor">
            <summary>
            Return anchor.
            Or
            Set anchor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintFriction2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintFriction2D.MaxForce">
            <summary>
            Set max force.
            Or
            Set max force.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintFriction2D.MaxTorque">
            <summary>
            Set max torque.
            Or
            Set max torque.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstraintFriction2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintFriction2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintFriction2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintFriction2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintFriction2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstraintGear2D">
            <summary>
            2D gear constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstraintGear2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstraintGear2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintGear2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstraintGear2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstraintGear2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintGear2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ConstraintGear2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintGear2D.OtherConstraint">
            <summary>
            Return other constraint.
            Or
            Set other constraint.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintGear2D.OwnerConstraint">
            <summary>
            Return owner constraint.
            Or
            Set owner constraint.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintGear2D.Ratio">
            <summary>
            Return ratio.
            Or
            Set ratio.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstraintGear2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintGear2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintGear2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintGear2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintGear2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstraintMotor2D">
            <summary>
            2D motor constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstraintMotor2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstraintMotor2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintMotor2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstraintMotor2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstraintMotor2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintMotor2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ConstraintMotor2D.AngularOffset">
            <summary>
            Return angular offset.
            Or
            Set angular offset.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintMotor2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintMotor2D.CorrectionFactor">
            <summary>
            Return correction factor.
            Or
            Set correction factor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintMotor2D.LinearOffset">
            <summary>
            Return linear offset.
            Or
            Set linear offset.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintMotor2D.MaxForce">
            <summary>
            Return max force.
            Or
            Set max force.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintMotor2D.MaxTorque">
            <summary>
            Return max torque.
            Or
            Set max torque.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstraintMotor2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintMotor2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintMotor2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintMotor2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintMotor2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstraintMouse2D">
            <summary>
            2D mouse constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstraintMouse2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstraintMouse2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintMouse2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstraintMouse2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstraintMouse2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintMouse2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ConstraintMouse2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintMouse2D.DampingRatio">
            <summary>
            Return damping ratio.
            Or
            Set damping ratio.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintMouse2D.FrequencyHz">
            <summary>
            Return frequency Hz.
            Or
            Set frequency Hz.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintMouse2D.MaxForce">
            <summary>
            Return max force.
            Or
            Set max force.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstraintMouse2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintMouse2D.Target">
            <summary>
            Return target.
            Or
            Set target.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintMouse2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintMouse2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintMouse2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintMouse2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstraintPrismatic2D">
            <summary>
            2D prismatic constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstraintPrismatic2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstraintPrismatic2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintPrismatic2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstraintPrismatic2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstraintPrismatic2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintPrismatic2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.Anchor">
            <summary>
            Return anchor.
            Or
            Set anchor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.Axis">
            <summary>
            Return axis.
            Or
            Set axis.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.EnableLimit">
            <summary>
            Return enable limit.
            Or
            Set enable limit.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.EnableMotor">
            <summary>
            Return enable motor.
            Or
            Set enable motor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.LowerTranslation">
            <summary>
            Return lower translation.
            Or
            Set lower translation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.MaxMotorForce">
            <summary>
            Return maxmotor force.
            Or
            Set maxmotor force.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.MotorSpeed">
            <summary>
            Return motor speed.
            Or
            Set motor speed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstraintPrismatic2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPrismatic2D.UpperTranslation">
            <summary>
            Return upper translation.
            Or
            Set upper translation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstraintPulley2D">
            <summary>
            2D pulley constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstraintPulley2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstraintPulley2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintPulley2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstraintPulley2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstraintPulley2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintPulley2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ConstraintPulley2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintPulley2D.OtherBodyAnchor">
            <summary>
            Return other body anchor.
            Or
            Set other body anchor point.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPulley2D.OtherBodyGroundAnchor">
            <summary>
            return other body ground anchor.
            Or
            Set other body ground anchor point.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPulley2D.OwnerBodyAnchor">
            <summary>
            Return owner body anchor.
            Or
            Set owner body anchor point.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPulley2D.OwnerBodyGroundAnchor">
            <summary>
            Return owner body ground anchor.
            Or
            Set other body ground anchor point.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPulley2D.Ratio">
            <summary>
            Return ratio.
            Or
            Set ratio.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstraintPulley2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintPulley2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintPulley2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintPulley2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintPulley2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstraintRevolute2D">
            <summary>
            2D revolute constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstraintRevolute2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstraintRevolute2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintRevolute2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstraintRevolute2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstraintRevolute2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintRevolute2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ConstraintRevolute2D.Anchor">
            <summary>
            Return anchor.
            Or
            Set anchor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintRevolute2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintRevolute2D.EnableLimit">
            <summary>
            Return enable limit.
            Or
            Set enable limit.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintRevolute2D.EnableMotor">
            <summary>
            Return enable motor.
            Or
            Set enable motor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintRevolute2D.LowerAngle">
            <summary>
            Return lower angle.
            Or
            Set lower angle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintRevolute2D.MaxMotorTorque">
            <summary>
            Return max motor torque.
            Or
            Set max motor torque.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintRevolute2D.MotorSpeed">
            <summary>
            Return motor speed.
            Or
            Set motor speed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstraintRevolute2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintRevolute2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintRevolute2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintRevolute2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintRevolute2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintRevolute2D.UpperAngle">
            <summary>
            Return upper angle.
            Or
            Set upper angle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstraintRope2D">
            <summary>
            2D rope constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstraintRope2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstraintRope2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintRope2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstraintRope2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstraintRope2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintRope2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ConstraintRope2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintRope2D.MaxLength">
            <summary>
            Return max length.
            Or
            Set max length.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintRope2D.OtherBodyAnchor">
            <summary>
            Return other body anchor.
            Or
            Set other body anchor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintRope2D.OwnerBodyAnchor">
            <summary>
            Return owner body anchor.
            Or
            Set owner body anchor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstraintRope2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintRope2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintRope2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintRope2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintRope2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstraintType">
            <summary>
            Supported constraint types.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ConstraintType.ConeTwist">
            <summary></summary>
        </member>
        <member name="F:Urho.ConstraintType.Hinge">
            <summary></summary>
        </member>
        <member name="F:Urho.ConstraintType.Point">
            <summary></summary>
        </member>
        <member name="F:Urho.ConstraintType.Slider">
            <summary></summary>
        </member>
        <member name="T:Urho.ConstraintWeld2D">
            <summary>
            2D weld constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstraintWeld2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstraintWeld2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintWeld2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstraintWeld2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstraintWeld2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintWeld2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ConstraintWeld2D.Anchor">
            <summary>
            Return anchor.
            Or
            Set anchor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintWeld2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintWeld2D.DampingRatio">
            <summary>
            Return damping ratio.
            Or
            Set damping ratio.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintWeld2D.FrequencyHz">
            <summary>
            Return frequency Hz.
            Or
            Set frequency Hz.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstraintWeld2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintWeld2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintWeld2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintWeld2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintWeld2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ConstraintWheel2D">
            <summary>
            2D wheel constraint component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ConstraintWheel2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ConstraintWheel2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintWheel2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ConstraintWheel2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ConstraintWheel2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ConstraintWheel2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ConstraintWheel2D.Anchor">
            <summary>
            Return anchor.
            Or
            Set anchor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintWheel2D.Axis">
            <summary>
            Return axis.
            Or
            Set axis.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintWheel2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintWheel2D.DampingRatio">
            <summary>
            Return damping ratio.
            Or
            Set damping ratio.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintWheel2D.EnableMotor">
            <summary>
            Return enable motor.
            Or
            Set enable motor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintWheel2D.FrequencyHz">
            <summary>
            Return frequency Hz.
            Or
            Set frequency Hz.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintWheel2D.MaxMotorTorque">
            <summary>
            Return maxMotor torque.
            Or
            Set max motor torque.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintWheel2D.MotorSpeed">
            <summary>
            Return motor speed.
            Or
            Set motor speed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ConstraintWheel2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ConstraintWheel2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ConstraintWheel2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintWheel2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ConstraintWheel2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Context">
            <summary>
            Urho3D execution context. Provides access to subsystems, object factories and attributes, and event receivers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Context">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Context(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Context, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Context(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Context.CopyBaseAttributes(Urho.StringHash,Urho.StringHash)">
            <param name="baseType"></param>
            <param name="derivedType"></param>
            <summary>
            Copy base class attributes to derived class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Context.CreateObject(Urho.StringHash)">
            <param name="objectType"></param>
            <summary>
            Create an object by type hash. Return pointer to it or null if no factory found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Context.EventHandler">
            <summary>
            Return active event handler. Set by Object. Null outside event handling.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Context.EventSender">
            <summary>
            Return active event sender. Null outside event handling.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Context.GetSubsystem(Urho.StringHash)">
            <param name="type"></param>
            <summary>
            Return subsystem by type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Context.GetTypeName(Urho.StringHash)">
            <param name="objectType"></param>
            <summary>
            Return object type name from hash, or empty if unknown.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Context.RegisterFactory(Urho.ObjectFactory)">
            <param name="factory"></param>
            <summary>
            Register a factory for an object type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Context.RegisterSubsystem(Urho.UrhoObject)">
            <param name="subsystem"></param>
            <summary>
            Register a subsystem.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Context.RemoveSubsystem(Urho.StringHash)">
            <param name="objectType"></param>
            <summary>
            Remove a subsystem.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Controls">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Controls">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Controls.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Controls.Finalize">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Controls.IsDown(System.UInt32)">
            <param name="button"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Controls.IsPressed(System.UInt32,Urho.Controls@)">
            <param name="button"></param>
            <param name="previousControls"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Controls.Pitch">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Controls.Reset">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Controls.Set(System.UInt32,System.Boolean)">
            <param name="buttons"></param>
            <param name="down"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Controls.Yaw">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Corner">
            <summary>
            %UI element corners.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Corner.BottomLeft">
            <summary></summary>
        </member>
        <member name="F:Urho.Corner.BottomRight">
            <summary></summary>
        </member>
        <member name="F:Urho.Corner.MaxUielementCorners">
            <summary></summary>
        </member>
        <member name="F:Urho.Corner.TopLeft">
            <summary></summary>
        </member>
        <member name="F:Urho.Corner.Topright">
            <summary></summary>
        </member>
        <member name="T:Urho.CreateMode">
            <summary>
            Component and child node creation mode for networking.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CreateMode.Local">
            <summary></summary>
        </member>
        <member name="F:Urho.CreateMode.Replicated">
            <summary></summary>
        </member>
        <member name="T:Urho.CrowdAgent">
            <summary>
            Crowd agent component, requires a CrowdManager component in the scene. When not set explicitly, agent's radius and height are defaulted to navigation mesh's agent radius and height, respectively.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CrowdAgent(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of CrowdAgent, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.CrowdAgent(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of CrowdAgent that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of CrowdAgent attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.CrowdAgent(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.CrowdAgent.ActualVelocity">
            <summary>
            Return the agent's actual velocity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.AgentCrowdId">
            <summary>
            Return the agent id.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.AgentState">
            <summary>
            Return the agent's  state.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdAgent.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CrowdAgent.DesiredVelocity">
            <summary>
            Return the agent's desired velocity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdAgent.DrawDebugGeometry(System.Boolean)">
            <param name="param1"></param>
            <summary>
            Draw debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdAgent.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Draw debug feelers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdAgent.HasArrived">
            <summary>
            Return true when the agent has arrived at its target.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdAgent.HasRequestedTarget">
            <summary>
            Return true when the agent has a target.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.Height">
            <summary>
            Get the agent's height.
            Or
            Set the agent's height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdAgent.IsInCrowd">
            <summary>
            Return true when the agent is in crowd (being managed by a crowd manager).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.MaxAccel">
            <summary>
            Get the agent's max acceleration.
            Or
            Set the agent's max acceleration.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.MaxSpeed">
            <summary>
            Get the agent's max velocity.
            Or
            Set the agent's max velocity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.NavigationPushiness">
            <summary>
            Get the agent's navigation pushiness.
            Or
            Set the agent's navigation pushiness.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.NavigationQuality">
            <summary>
            Get the agent's navigation quality.
            Or
            Set the agent's navigation quality.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.ObstacleAvoidanceType">
            <summary>
            Get the agent's obstacle avoidance type.
            Or
            Set the agent's obstacle avoidance type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdAgent.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.Position">
            <summary>
            Return the agent's position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.QueryFilterType">
            <summary>
            Get the agent's query filter type.
            Or
            Set the agent's query filter type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.Radius">
            <summary>
            Get the agent's radius.
            Or
            Set the agent's radius.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdAgent.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.RequestedTargetType">
            <summary>
            Return the agent's requested target type, if any.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdAgent.ResetTarget">
            <summary>
            Reset any target request for the specified agent.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdAgent.SubscribeToCrowdAgentFailure(System.Action{Urho.CrowdAgentFailureEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the CrowdAgentFailure event raised by the CrowdAgent.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.CrowdAgent.SubscribeToCrowdAgentReposition(System.Action{Urho.CrowdAgentRepositionEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the CrowdAgentReposition event raised by the CrowdAgent.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.CrowdAgent.SubscribeToCrowdAgentStateChanged(System.Action{Urho.CrowdAgentStateChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the CrowdAgentStateChanged event raised by the CrowdAgent.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.CrowdAgent.TargetPosition">
            <summary>
            Return the agent's requested target position.
            Or
            Submit a new target position request for this agent.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.TargetState">
            <summary>
            Return the agent's target state.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.TargetVelocity">
            <summary>
            Return the agent's requested target velocity.
            Or
            Submit a new target velocity request for this agent.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CrowdAgent.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CrowdAgent.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CrowdAgent.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgent.UpdateNodePosition">
            <summary>
            Return true when the node's position should be updated by the CrowdManager.
            Or
            Update the node position. When set to false, the node position should be updated by other means (e.g. using Physics) in response to the E_CROWD_AGENT_REPOSITION event.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CrowdAgentFailureEventArgs">
            <summary>Event arguments for the CrowdAgent's CrowdAgentFailure event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentFailureEventArgs.CrowdAgent">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentFailureEventArgs.CrowdAgentState">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentFailureEventArgs.CrowdTargetState">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentFailureEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentFailureEventArgs.Position">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentFailureEventArgs.Velocity">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CrowdAgentFormationEventArgs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentFormationEventArgs.CrowdAgent">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentFormationEventArgs.Index">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentFormationEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentFormationEventArgs.Position">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentFormationEventArgs.Size">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CrowdAgentRepositionEventArgs">
            <summary>Event arguments for the CrowdAgent's CrowdAgentReposition event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentRepositionEventArgs.Arrived">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentRepositionEventArgs.CrowdAgent">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentRepositionEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentRepositionEventArgs.Position">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentRepositionEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentRepositionEventArgs.Velocity">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CrowdAgentRequestedTarget">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdAgentRequestedTarget.RequestedtargetNone">
            <summary></summary>
        </member>
        <member name="F:Urho.CrowdAgentRequestedTarget.RequestedtargetPosition">
            <summary></summary>
        </member>
        <member name="F:Urho.CrowdAgentRequestedTarget.RequestedtargetVelocity">
            <summary></summary>
        </member>
        <member name="T:Urho.CrowdAgentState">
            <summary>
            The agent is not in a valid state.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdAgentState.StateInvalid">
            <summary></summary>
        </member>
        <member name="F:Urho.CrowdAgentState.StateOffmesh">
            <summary></summary>
        </member>
        <member name="F:Urho.CrowdAgentState.StateWalking">
            <summary></summary>
        </member>
        <member name="T:Urho.CrowdAgentStateChangedEventArgs">
            <summary>Event arguments for the CrowdAgent's CrowdAgentStateChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentStateChangedEventArgs.CrowdAgent">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentStateChangedEventArgs.CrowdAgentState">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentStateChangedEventArgs.CrowdTargetState">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentStateChangedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentStateChangedEventArgs.Position">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdAgentStateChangedEventArgs.Velocity">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CrowdAgentTargetState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdAgentTargetState.Failed">
            <summary></summary>
        </member>
        <member name="F:Urho.CrowdAgentTargetState.None">
            <summary></summary>
        </member>
        <member name="F:Urho.CrowdAgentTargetState.Requesting">
            <summary></summary>
        </member>
        <member name="F:Urho.CrowdAgentTargetState.Valid">
            <summary></summary>
        </member>
        <member name="F:Urho.CrowdAgentTargetState.Velocity">
            <summary></summary>
        </member>
        <member name="F:Urho.CrowdAgentTargetState.WaitingForPath">
            <summary></summary>
        </member>
        <member name="F:Urho.CrowdAgentTargetState.WaitingForQueue">
            <summary></summary>
        </member>
        <member name="T:Urho.CrowdManager">
            <summary>
            Crowd manager scene component. Should be added only to the root scene node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CrowdManager(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of CrowdManager, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.CrowdManager(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of CrowdManager that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of CrowdManager attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.CrowdManager(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.CrowdManager.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdManager.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.CrowdManager.DrawDebugGeometry(System.Boolean)">
            <param name="depthTest"></param>
            <summary>
            Add debug geometry to the debug renderer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Draw the agents' pathing debug data.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.FindNearestPoint(Urho.Vector3,System.Int32,System.UInt32*)">
            <param name="point"></param>
            <param name="queryFilterType"></param>
            <param name="nearestRef"></param>
            <summary>
            Find the nearest point on the navigation mesh to a given point using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.GetAreaCost(System.UInt32,System.UInt32)">
            <param name="queryFilterType"></param>
            <param name="areaID"></param>
            <summary>
            Get the cost of an area for the specified query filter type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.GetDistanceToWall(Urho.Vector3,System.Single,System.Int32,Urho.Vector3*,Urho.Vector3*)">
            <param name="point"></param>
            <param name="radius"></param>
            <param name="queryFilterType"></param>
            <param name="hitPos"></param>
            <param name="hitNormal"></param>
            <summary>
            Return distance to wall from a point using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type. Maximum search radius must be specified.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.GetExcludeFlags(System.UInt32)">
            <param name="queryFilterType"></param>
            <summary>
            Get the exclude flags for the specified query filter type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.GetIncludeFlags(System.UInt32)">
            <param name="queryFilterType"></param>
            <summary>
            Get the include flags for the specified query filter type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.GetNumAreas(System.UInt32)">
            <param name="queryFilterType"></param>
            <summary>
            Get the number of configured area in the specified query filter type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.GetObstacleAvoidanceParams(System.UInt32)">
            <param name="obstacleAvoidanceType"></param>
            <summary>
            Get the params for the specified obstacle avoidance type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.GetRandomPoint(System.Int32,System.UInt32*)">
            <param name="queryFilterType"></param>
            <param name="randomRef"></param>
            <summary>
            Return a random point on the navigation mesh using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.GetRandomPointInCircle(Urho.Vector3,System.Single,System.Int32,System.UInt32*)">
            <param name="center"></param>
            <param name="radius"></param>
            <param name="queryFilterType"></param>
            <param name="randomRef"></param>
            <summary>
            Return a random point on the navigation mesh within a circle using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type. The circle radius is only a guideline and in practice the returned point may be further away.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdManager.MaxAgentRadius">
            <summary>
            Get the maximum radius of any agent.
            Or
            Set the maximum radius of any agent.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdManager.MaxAgents">
            <summary>
            Get the maximum number of agents.
            Or
            Set the maximum number of agents.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.MoveAlongSurface(Urho.Vector3,Urho.Vector3,System.Int32,System.Int32)">
            <param name="start"></param>
            <param name="end"></param>
            <param name="queryFilterType"></param>
            <param name="maxVisited"></param>
            <summary>
            Try to move along the surface from one point to another using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdManager.NavigationMesh">
            <summary>
            Get the Navigation mesh assigned to the crowd.
            Or
            Assigns the navigation mesh for the crowd.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdManager.NumObstacleAvoidanceTypes">
            <summary>
            Get the number of configured obstacle avoidance types.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdManager.NumQueryFilterTypes">
            <summary>
            Get the number of configured query filter types.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.Raycast(Urho.Vector3,Urho.Vector3,System.Int32,Urho.Vector3*)">
            <param name="start"></param>
            <param name="end"></param>
            <param name="queryFilterType"></param>
            <param name="hitNormal"></param>
            <summary>
            Perform a walkability raycast on the navigation mesh between start and end using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type. Return the point where a wall was hit, or the end point if no walls.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.ResetCrowdTarget(Urho.Node)">
            <param name="node"></param>
            <summary>
            Reset any crowd target for all crowd agents found in the specified node. Defaulted to scene node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.SetAreaCost(System.UInt32,System.UInt32,System.Single)">
            <param name="queryFilterType"></param>
            <param name="areaID"></param>
            <param name="cost"></param>
            <summary>
            Set the cost of an area for the specified query filter type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.SetCrowdTarget(Urho.Vector3,Urho.Node)">
            <param name="position"></param>
            <param name="node"></param>
            <summary>
            Set the crowd target position. The target position is set to all crowd agents found in the specified node. Defaulted to scene node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.SetCrowdVelocity(Urho.Vector3,Urho.Node)">
            <param name="velocity"></param>
            <param name="node"></param>
            <summary>
            Set the crowd move velocity. The move velocity is applied to all crowd agents found in the specified node. Defaulted to scene node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.SetExcludeFlags(System.UInt32,System.UInt16)">
            <param name="queryFilterType"></param>
            <param name="flags"></param>
            <summary>
            Set the exclude flags for the specified query filter type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.SetIncludeFlags(System.UInt32,System.UInt16)">
            <param name="queryFilterType"></param>
            <param name="flags"></param>
            <summary>
            Set the include flags for the specified query filter type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CrowdManager.SetObstacleAvoidanceParams(System.UInt32,Urho.CrowdObstacleAvoidanceParams)">
            <param name="obstacleAvoidanceType"></param>
            <param name="params"></param>
            <summary>
            Set the params for the specified obstacle avoidance type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CrowdManager.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CrowdManager.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CrowdManager.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CrowdManager.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CrowdObstacleAvoidanceParams">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdObstacleAvoidanceParams.AdaptiveDepth">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdObstacleAvoidanceParams.AdaptiveDivs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdObstacleAvoidanceParams.AdaptiveRings">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdObstacleAvoidanceParams.GridSize">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdObstacleAvoidanceParams.HorizTime">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdObstacleAvoidanceParams.VelBias">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdObstacleAvoidanceParams.WeightCurVel">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdObstacleAvoidanceParams.WeightDesVel">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdObstacleAvoidanceParams.WeightSide">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CrowdObstacleAvoidanceParams.WeightToi">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CubeMapFace">
            <summary>
            Cube map faces.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CubeMapFace.MaxCubemapFaces">
            <summary></summary>
        </member>
        <member name="F:Urho.CubeMapFace.NegativeX">
            <summary></summary>
        </member>
        <member name="F:Urho.CubeMapFace.NegativeY">
            <summary></summary>
        </member>
        <member name="F:Urho.CubeMapFace.NegativeZ">
            <summary></summary>
        </member>
        <member name="F:Urho.CubeMapFace.PositiveX">
            <summary></summary>
        </member>
        <member name="F:Urho.CubeMapFace.PositiveY">
            <summary></summary>
        </member>
        <member name="F:Urho.CubeMapFace.PositiveZ">
            <summary></summary>
        </member>
        <member name="T:Urho.CubeMapLayout">
            <summary>
            Cubemap single image layout modes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CubeMapLayout.Blender">
            <summary></summary>
        </member>
        <member name="F:Urho.CubeMapLayout.Horizontal">
            <summary></summary>
        </member>
        <member name="F:Urho.CubeMapLayout.HorizontalCross">
            <summary></summary>
        </member>
        <member name="F:Urho.CubeMapLayout.HorizontalNvidia">
            <summary></summary>
        </member>
        <member name="F:Urho.CubeMapLayout.VerticalCross">
            <summary></summary>
        </member>
        <member name="T:Urho.CullMode">
            <summary>
            Culling mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CullMode.Ccw">
            <summary></summary>
        </member>
        <member name="F:Urho.CullMode.Cw">
            <summary></summary>
        </member>
        <member name="F:Urho.CullMode.MaxCullmodes">
            <summary></summary>
        </member>
        <member name="F:Urho.CullMode.None">
            <summary></summary>
        </member>
        <member name="T:Urho.Cursor">
            <summary>
            Mouse cursor %UI element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Cursor(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Cursor, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Cursor(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Cursor that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Cursor attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Cursor(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Cursor.ApplyOSCursorShape">
            <summary>
            Apply pending OS cursor shape. Called by UI. No-op when the OS mouse pointer is not used.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Cursor.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Cursor.DefineShape(System.String,Urho.Image,Urho.IntRect,Urho.IntVector2)">
            <param name="shape"></param>
            <param name="image"></param>
            <param name="imageRect"></param>
            <param name="hotSpot"></param>
            <summary>
            Define a shape.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Cursor.DefineShape(Urho.CursorShape,Urho.Image,Urho.IntRect,Urho.IntVector2)">
            <param name="shape"></param>
            <param name="image"></param>
            <param name="imageRect"></param>
            <param name="hotSpot"></param>
            <summary>
            Define a shape.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Cursor.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Cursor.SetShape(Urho.CursorShape)">
            <param name="shape"></param>
            <summary>
            Set current shape.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Cursor.Shape">
            <summary>
            Get current shape.
            Or
            Set current shape.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Cursor.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Cursor.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Cursor.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Cursor.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Cursor.UseSystemShapes">
            <summary>
            Return whether is using system default shapes.
            Or
            Set whether to use system default shapes. Is only possible when the OS mouse cursor has been set visible from the Input subsystem.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CursorShape">
            <summary>
            %Cursor shapes recognized by the UI subsystem.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.CursorShape.Acceptdrop">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.Busy">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.BusyArrow">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.Cross">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.Ibeam">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.MaxShapes">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.Normal">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.Rejectdrop">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.ResizeAll">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.ResizediagonalTopLeft">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.ResizediagonalTopright">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.Resizehorizontal">
            <summary></summary>
        </member>
        <member name="F:Urho.CursorShape.Resizevertical">
            <summary></summary>
        </member>
        <member name="T:Urho.CustomGeometry">
            <summary>
            Custom geometry component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.CustomGeometry(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of CustomGeometry, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.CustomGeometry(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of CustomGeometry that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of CustomGeometry attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.CustomGeometry(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.CustomGeometry.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.CustomGeometry.BeginGeometry(System.UInt32,Urho.PrimitiveType)">
            <param name="index"></param>
            <param name="type"></param>
            <summary>
            Begin defining a geometry. Clears existing vertices in that index.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.Clear">
            <summary>
            Clear all geometries.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.Commit">
            <summary>
            Update vertex buffer and calculate the bounding box. Call after finishing defining geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.DefineColor(Urho.Color)">
            <param name="color"></param>
            <summary>
            Define a vertex color.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.DefineGeometry(System.UInt32,Urho.PrimitiveType,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <param name="index"></param>
            <param name="type"></param>
            <param name="numVertices"></param>
            <param name="hasNormals"></param>
            <param name="hasColors"></param>
            <param name="hasTexCoords"></param>
            <param name="hasTangents"></param>
            <summary>
            Set the primitive type, number of vertices and elements in a geometry, after which the vertices can be edited with GetVertex(). An alternative to BeginGeometry() / DefineVertex().
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.DefineNormal(Urho.Vector3)">
            <param name="normal"></param>
            <summary>
            Define a vertex normal.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.DefineTangent(Urho.Vector4)">
            <param name="tangent"></param>
            <summary>
            Define a vertex tangent.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.DefineTexCoord(Urho.Vector2)">
            <param name="texCoord"></param>
            <summary>
            Define a vertex UV coordinate.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.DefineVertex(Urho.Vector3)">
            <param name="position"></param>
            <summary>
            Define a vertex position. This begins a new vertex.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.DrawOcclusion(Urho.OcclusionBuffer)">
            <param name="buffer"></param>
            <summary>
            Draw to occlusion buffer. Return true if did not run out of triangles.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.GetLodGeometry(System.UInt32,System.UInt32)">
            <param name="batchIndex"></param>
            <param name="level"></param>
            <summary>
            Return the geometry for a specific LOD level.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.GetMaterial(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return material by geometry index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.GetNumVertices(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return number of vertices in a geometry.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.GetVertex(System.UInt32,System.UInt32)">
            <param name="geometryIndex"></param>
            <param name="vertexNum"></param>
            <summary>
            Return a vertex in a geometry for editing, or null if out of bounds. After the edits are finished, calling Commit() updates  the vertex buffer.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.IsDynamic">
            <summary>
            Return whether vertex buffer dynamic mode is enabled.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CustomGeometry.NumGeometries">
            <summary>
            Return number of geometries.
            Or
            Set number of geometries.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CustomGeometry.NumOccluderTriangles">
            <summary>
            Return number of occlusion geometry triangles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. Drawable must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.SetDynamic(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set vertex buffer dynamic mode. A dynamic buffer should be faster to update frequently. Effective at the next Commit() call.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.SetMaterial(Urho.Material)">
            <param name="material"></param>
            <summary>
            Set material on all geometries.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.CustomGeometry.SetMaterial(System.UInt32,Urho.Material)">
            <param name="index"></param>
            <param name="material"></param>
            <summary>
            Set material on one geometry. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.CustomGeometry.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.CustomGeometry.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CustomGeometry.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.CustomGeometry.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.CustomGeometryVertex">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DebugHud">
            <summary>
            Displays rendering stats and profiling information.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.DebugHud(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of DebugHud, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.DebugHud(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of DebugHud that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of DebugHud attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.DebugHud(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.DebugHud.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.DebugHud.ClearAppStats">
            <summary>
            Clear all application-specific stats.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DebugHud.DefaultStyle">
            <summary>
            Return the UI style file.
            Or
            Set UI elements' style from an XML file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DebugHud.Mode">
            <summary>
            Return currently shown elements.
            Or
            Set elements to show.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DebugHud.ModeText">
            <summary>
            Return rendering mode text.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DebugHud.ProfilerInterval">
            <summary>
            Return profiler accumulation interval in seconds
            Or
            Set profiler accumulation interval in seconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DebugHud.ProfilerMaxDepth">
            <summary>
            Return maximum profiler block depth.
            Or
            Set maximum profiler block depth, default unlimited.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DebugHud.ProfilerText">
            <summary>
            Return profiler text.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugHud.ResetAppStats(System.String)">
            <param name="label"></param>
            <summary>
            Reset application-specific stats. Return true if it was erased successfully.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugHud.SetAppStats(System.String,System.String)">
            <param name="label"></param>
            <param name="stats"></param>
            <summary>
            Set application-specific stats.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DebugHud.StatsText">
            <summary>
            Return rendering stats text.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugHud.Toggle(System.UInt32)">
            <param name="mode"></param>
            <summary>
            Toggle elements.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugHud.ToggleAll">
            <summary>
            Toggle all elements.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DebugHud.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.DebugHud.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.DebugHud.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.DebugHud.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugHud.Update">
            <summary>
            Update. Called by HandlePostUpdate().
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DebugHud.UseRendererStats">
            <summary>
            Return whether showing 3D geometry primitive/batch count only.
            Or
            Set whether to show 3D geometry primitive/batch count only. Default false.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DebugRenderer">
            <summary>
            Debug geometry rendering component. Should be added only to the root scene node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.DebugRenderer(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of DebugRenderer, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.DebugRenderer(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of DebugRenderer that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of DebugRenderer attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.DebugRenderer(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.DebugRenderer.AddBoundingBox(Urho.BoundingBox,Urho.Color,System.Boolean)">
            <param name="box"></param>
            <param name="color"></param>
            <param name="depthTest"></param>
            <summary>
            Add a bounding box.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.AddCircle(Urho.Vector3,Urho.Vector3,System.Single,Urho.Color,System.Int32,System.Boolean)">
            <param name="center"></param>
            <param name="normal"></param>
            <param name="radius"></param>
            <param name="color"></param>
            <param name="steps"></param>
            <param name="depthTest"></param>
            <summary>
            Add a circle.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.AddCross(Urho.Vector3,System.Single,Urho.Color,System.Boolean)">
            <param name="center"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="depthTest"></param>
            <summary>
            Add a cross.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.AddCylinder(Urho.Vector3,System.Single,System.Single,Urho.Color,System.Boolean)">
            <param name="position"></param>
            <param name="radius"></param>
            <param name="height"></param>
            <param name="color"></param>
            <param name="depthTest"></param>
            <summary>
            Add a cylinder
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.AddLine(Urho.Vector3,Urho.Vector3,System.UInt32,System.Boolean)">
            <param name="start"></param>
            <param name="end"></param>
            <param name="color"></param>
            <param name="depthTest"></param>
            <summary>
            Add a line with color already converted to unsigned.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.AddLine(Urho.Vector3,Urho.Vector3,Urho.Color,System.Boolean)">
            <param name="start"></param>
            <param name="end"></param>
            <param name="color"></param>
            <param name="depthTest"></param>
            <summary>
            Add a line.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.AddNode(Urho.Node,System.Single,System.Boolean)">
            <param name="node"></param>
            <param name="scale"></param>
            <param name="depthTest"></param>
            <summary>
            Add a scene node represented as its coordinate axes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.AddQuad(Urho.Vector3,System.Single,System.Single,Urho.Color,System.Boolean)">
            <param name="center"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="color"></param>
            <param name="depthTest"></param>
            <summary>
            Add a quad on the XZ plane.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.AddTriangle(Urho.Vector3,Urho.Vector3,Urho.Vector3,System.UInt32,System.Boolean)">
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="color"></param>
            <param name="depthTest"></param>
            <summary>
            Add a triangle with color already converted to unsigned.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.AddTriangle(Urho.Vector3,Urho.Vector3,Urho.Vector3,Urho.Color,System.Boolean)">
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="color"></param>
            <param name="depthTest"></param>
            <summary>
            Add a triangle.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DebugRenderer.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.DebugRenderer.HasContent">
            <summary>
            Return whether has something to render.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.IsInside(Urho.BoundingBox)">
            <param name="box"></param>
            <summary>
            Check whether a bounding box is inside the view frustum.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.Render">
            <summary>
            Update vertex buffer and render all debug lines. The viewport and rendertarget should be set before.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DebugRenderer.SetView(Urho.Camera)">
            <param name="camera"></param>
            <summary>
            Set the camera viewpoint. Call before rendering, or before adding geometry if you want to use culling.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DebugRenderer.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.DebugRenderer.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.DebugRenderer.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.DebugRenderer.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DecalSet">
            <summary>
            %Decal renderer component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.DecalSet(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of DecalSet, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.DecalSet(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of DecalSet that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of DecalSet attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.DecalSet(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.DecalSet.AddDecal(Urho.Drawable,Urho.Vector3,Urho.Quaternion,System.Single,System.Single,System.Single,Urho.Vector2,Urho.Vector2,System.Single,System.Single,System.UInt32)">
            <param name="target"></param>
            <param name="worldPosition"></param>
            <param name="worldRotation"></param>
            <param name="size"></param>
            <param name="aspectRatio"></param>
            <param name="depth"></param>
            <param name="topLeftUV"></param>
            <param name="bottomRightUV"></param>
            <param name="timeToLive"></param>
            <param name="normalCutoff"></param>
            <param name="subGeometry"></param>
            <summary>
            Add a decal at world coordinates, using a target drawable's geometry for reference. If the decal needs to move with the target, the decal component should be created to the target's node. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DecalSet.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DecalSet.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.DecalSet.Material">
            <summary>
            Return material.
            Or
            Set material. The material should use a small negative depth bias to avoid Z-fighting.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DecalSet.MaterialAttr">
            <summary>
            Return material attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DecalSet.MaxIndices">
            <summary>
            Return maximum number of decal vertex indices.
            Or
            Set maximum number of decal vertex indices.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DecalSet.MaxVertices">
            <summary>
            Return maximum number of decal vertices.
            Or
            Set maximum number of decal vertices.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DecalSet.NumDecals">
            <summary>
            Return number of decals.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DecalSet.NumIndices">
            <summary>
            Retur number of vertex indices in the decals.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DecalSet.NumVertices">
            <summary>
            Retur number of vertices in the decals.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DecalSet.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DecalSet.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DecalSet.RemoveAllDecals">
            <summary>
            Remove all decals.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DecalSet.RemoveDecals(System.UInt32)">
            <param name="num"></param>
            <summary>
            Remove n oldest decals.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DecalSet.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.DecalSet.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.DecalSet.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.DecalSet.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DecalSet.UpdateGeometryType">
            <summary>
            Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DeferredLightPSVariation">
            <summary>
            Deferred light volume pixels shader variations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.MaxDeferredLightPsVariations">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.None">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Ortho">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthopoint">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthopointmask">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthopointmaskshadow">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthopointmaskshadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthopointmaskspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthopointshadow">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthopointshadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthopointspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthoshadow">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthoshadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthospec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthospot">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthospotshadow">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthospotshadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Orthospotspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Point">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Pointmask">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Pointmaskshadow">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Pointmaskshadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Pointmaskspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Pointshadow">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Pointshadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Pointspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Shadow">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Shadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Spec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Spot">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Spotshadow">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Spotshadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightPSVariation.Spotspec">
            <summary></summary>
        </member>
        <member name="T:Urho.DeferredLightVSVariation">
            <summary>
            Deferred light volume vertex shader variations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.DeferredLightVSVariation.Dir">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightVSVariation.MaxDeferredLightVsVariations">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightVSVariation.None">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightVSVariation.Ortho">
            <summary></summary>
        </member>
        <member name="F:Urho.DeferredLightVSVariation.Orthodir">
            <summary></summary>
        </member>
        <member name="T:Urho.DefocusedEventArgs">
            <summary>Event arguments for the UIElement's Defocused event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DefocusedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DelayTime">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.DelayTime(System.Single)">
            <param name="duration"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DelayTime.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DelayTime.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DelayTimeState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.DelayTimeState(Urho.DelayTime,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DelayTimeState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DeviceLostEventArgs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DeviceResetEventArgs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DragBeginEventArgs">
            <summary>Event arguments for the UIElement's DragBegin event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragBeginEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragBeginEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragBeginEventArgs.ElementX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragBeginEventArgs.ElementY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragBeginEventArgs.NumButtons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragBeginEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragBeginEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DragCancelEventArgs">
            <summary>Event arguments for the UIElement's DragCancel event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragCancelEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragCancelEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragCancelEventArgs.ElementX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragCancelEventArgs.ElementY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragCancelEventArgs.NumButtons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragCancelEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragCancelEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DragDropFinishEventArgs">
            <summary>Event arguments for the UIElement's DragDropFinish event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragDropFinishEventArgs.Accept">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragDropFinishEventArgs.Source">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragDropFinishEventArgs.Target">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DragDropTestEventArgs">
            <summary>Event arguments for the UIElement's DragDropTest event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragDropTestEventArgs.Accept">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragDropTestEventArgs.Source">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragDropTestEventArgs.Target">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DragEndEventArgs">
            <summary>Event arguments for the UIElement's DragEnd event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragEndEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragEndEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragEndEventArgs.ElementX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragEndEventArgs.ElementY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragEndEventArgs.NumButtons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragEndEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragEndEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DragMoveEventArgs">
            <summary>Event arguments for the UIElement's DragMove event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragMoveEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragMoveEventArgs.DX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragMoveEventArgs.DY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragMoveEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragMoveEventArgs.ElementX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragMoveEventArgs.ElementY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragMoveEventArgs.NumButtons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragMoveEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DragMoveEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Drawable">
            <summary>
            Base class for visible components.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Drawable(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Drawable, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Drawable(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Drawable.AddLight(Urho.Light)">
            <param name="light"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.AddVertexLight(Urho.Light)">
            <param name="light"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Drawable.BoundingBox">
            <summary>
            Return local space bounding box. May not be applicable or properly updated on all drawables.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.CastShadows">
            <summary>
            Return shadowcaster flag.
            Or
            Set shadowcaster flag.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.Distance">
            <summary>
            Return distance from camera.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.DrawableFlags">
            <summary>
            Return drawable flags.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.DrawDistance">
            <summary>
            Return draw distance.
            Or
            Set draw distance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.DrawOcclusion(Urho.OcclusionBuffer)">
            <param name="buffer"></param>
            <summary>
            Draw to occlusion buffer. Return true if did not run out of triangles.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.FirstLight">
            <summary>
            Return the first added per-pixel light.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.GetLodGeometry(System.UInt32,System.UInt32)">
            <param name="batchIndex"></param>
            <param name="level"></param>
            <summary>
            Return the geometry for a specific LOD level.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.HasBasePass(System.UInt32)">
            <param name="batchIndex"></param>
            <summary>
            Return whether has a base pass.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.IsInView">
            <summary>
            Return whether is in view this frame from any viewport camera. Excludes shadow map cameras.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.IsInView(Urho.Camera)">
            <param name="camera"></param>
            <summary>
            Return whether is in view of a specific camera this frame. Pass in a null camera to allow any camera, including shadow map cameras.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.IsOccludee">
            <summary>
            Return occludee flag.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.IsOccluder">
            <summary>
            Return occluder flag.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.IsZoneDirty">
            <summary>
            Return whether current zone is inconclusive or dirty due to the drawable moving.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.LightMask">
            <summary>
            Return light mask.
            Or
            Set light mask. Is and'ed with light's and zone's light mask to see if the object should be lit.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.LimitLights">
            <summary>
            Sort and limit per-pixel lights to maximum allowed. Convert extra lights into vertex lights.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.LimitVertexLights(System.Boolean)">
            <param name="removeConvertedLights"></param>
            <summary>
            Sort and limit per-vertex lights to maximum allowed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.LodBias">
            <summary>
            Return LOD bias.
            Or
            Set LOD bias.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.LodDistance">
            <summary>
            Return LOD scaled distance from camera.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.MarkForUpdate">
            <summary>
            Mark for update and octree reinsertion. Update is automatically queued when the drawable's scene node moves or changes scale.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.MarkInView(System.UInt32)">
            <param name="frameNumber"></param>
            <summary>
            Mark in view without specifying a camera. Used for shadow casters.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.MaxLights">
            <summary>
            Return maximum number of per-pixel lights.
            Or
            Set maximum number of per-pixel lights. Default 0 is unlimited.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.MaxZ">
            <summary>
            Return the maximum view-space depth.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.MinZ">
            <summary>
            Return the minimum view-space depth.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.NumOccluderTriangles">
            <summary>
            Return number of occlusion geometry triangles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.Octant">
            <summary>
            Return octree octant.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object attributes. Drawable must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.SetBasePass(System.UInt32)">
            <param name="batchIndex"></param>
            <summary>
            Set base pass flag for a batch.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.SetMinMaxZ(System.Single,System.Single)">
            <param name="minZ"></param>
            <param name="maxZ"></param>
            <summary>
            Set view-space depth bounds.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.SetOccludee(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set occludee flag.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.SetOccluder(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set occlusion flag.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable.SetZone(Urho.Zone,System.Boolean)">
            <param name="zone"></param>
            <param name="temporary"></param>
            <summary>
            Set new zone. Zone assignment may optionally be temporary, meaning it needs to be re-evaluated on the next frame.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.ShadowDistance">
            <summary>
            Return shadow draw distance.
            Or
            Set shadow draw distance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.ShadowMask">
            <summary>
            Return shadow mask.
            Or
            Set shadow mask. Is and'ed with light's light mask and zone's shadow mask to see if the object should be rendered to a shadow map.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.SortValue">
            <summary>
            Return sorting value.
            Or
            Set sorting value.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Drawable.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Drawable.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Drawable.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.UpdateGeometryType">
            <summary>
            Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.ViewMask">
            <summary>
            Return view mask.
            Or
            Set view mask. Is and'ed with camera's view mask to see if the object should be rendered.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.WorldBoundingBox">
            <summary>
            Return world-space bounding box.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.Zone">
            <summary>
            Return current zone.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable.ZoneMask">
            <summary>
            Return zone mask.
            Or
            Set zone mask. Is and'ed with zone's zone mask to see if the object should belong to the zone.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Drawable2D">
            <summary>
            Base class for 2D visible components.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Drawable2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Drawable2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Drawable2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Drawable2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Drawable2D.Layer">
            <summary>
            Return layer.
            Or
            Set layer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable2D.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable2D.OrderInLayer">
            <summary>
            Return order in layer.
            Or
            Set order in layer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Drawable2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. Drawable must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Drawable2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Drawable2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Drawable2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Drawable2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DrawableFlags">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.DrawableFlags.Any">
            <summary></summary>
        </member>
        <member name="F:Urho.DrawableFlags.Geometry">
            <summary></summary>
        </member>
        <member name="F:Urho.DrawableFlags.Geometry2D">
            <summary></summary>
        </member>
        <member name="F:Urho.DrawableFlags.Light">
            <summary></summary>
        </member>
        <member name="F:Urho.DrawableFlags.Zone">
            <summary></summary>
        </member>
        <member name="T:Urho.DropDownList">
            <summary>
            %Menu %UI element that displays a popup list view.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.DropDownList(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of DropDownList, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.DropDownList(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of DropDownList that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of DropDownList attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.DropDownList(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.DropDownList.AddItem(Urho.UIElement)">
            <param name="item"></param>
            <summary>
            Add item to the end of the list.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DropDownList.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DropDownList.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.DropDownList.GetItem(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return item at index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DropDownList.InsertItem(System.UInt32,Urho.UIElement)">
            <param name="index"></param>
            <param name="item"></param>
            <summary>
            Insert item to a specific position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DropDownList.ListView">
            <summary>
            Return listview element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DropDownList.NumItems">
            <summary>
            Return number of items.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DropDownList.OnHidePopup">
            <summary>
            React to the popup being hidden.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DropDownList.OnSetEditable">
            <summary>
            React to editable status change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DropDownList.OnShowPopup">
            <summary>
            React to the popup being shown.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DropDownList.Placeholder">
            <summary>
            Return selected item placeholder element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DropDownList.PlaceholderText">
            <summary>
            Return place holder text.
            Or
            Set place holder text. This is the text shown when there is no selection in drop down list.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DropDownList.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DropDownList.RemoveAllItems">
            <summary>
            Remove all items.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DropDownList.RemoveItem(System.UInt32)">
            <param name="index"></param>
            <summary>
            Remove item at index.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DropDownList.RemoveItem(Urho.UIElement)">
            <param name="item"></param>
            <summary>
            Remove specific item.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DropDownList.ResizePopup">
            <summary>
            Return whether popup should be automatically resized.
            Or
            Set whether popup should be automatically resized to match the dropdown button width.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DropDownList.SelectedItem">
            <summary>
            Return selected item, or null if none selected.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DropDownList.Selection">
            <summary>
            Return selection index, or M_MAX_UNSIGNED if none selected.
            Or
            Set selection.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DropDownList.SetSelectionAttr(System.UInt32)">
            <param name="index"></param>
            <summary>
            Set selection attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DropDownList.SubscribeToItemSelected(System.Action{Urho.ItemSelectedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ItemSelected event raised by the DropDownList.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.DropDownList.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.DropDownList.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.DropDownList.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.DropDownList.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DropFileEventArgs">
            <summary>Event arguments for the Input's DropFile event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DropFileEventArgs.FileName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.dtQueryFilter">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.DynamicNavigationMesh">
            <summary>
            Constructor.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.DynamicNavigationMesh(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of DynamicNavigationMesh, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.DynamicNavigationMesh(Urho.Context)">
            <param name="param1"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.DynamicNavigationMesh(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.DynamicNavigationMesh.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.DynamicNavigationMesh.Build">
            <summary>
            Build/rebuild the entire navigation mesh.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DynamicNavigationMesh.Build(Urho.BoundingBox)">
            <param name="boundingBox"></param>
            <summary>
            Build/rebuild a portion of the navigation mesh.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DynamicNavigationMesh.DrawDebugGeometry(System.Boolean)">
            <param name="depthTest"></param>
            <summary>
            Add debug geometry to the debug renderer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DynamicNavigationMesh.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DynamicNavigationMesh.DrawObstacles">
            <summary>
            Return whether to draw Obstacles.
            Or
            Draw debug geometry for Obstacles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.DynamicNavigationMesh.MaxObstacles">
            <summary>
            Return the maximum number of obstacles allowed.
            Or
            Set the maximum number of obstacles allowed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DynamicNavigationMesh.RegisterObject(Urho.Context)">
            <param name="param1"></param>
            <summary>
            Register with engine context.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.DynamicNavigationMesh.SubscribeToNavigationObstacleAdded(System.Action{Urho.NavigationObstacleAddedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NavigationObstacleAdded event raised by the DynamicNavigationMesh.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.DynamicNavigationMesh.SubscribeToNavigationObstacleRemoved(System.Action{Urho.NavigationObstacleRemovedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NavigationObstacleRemoved event raised by the DynamicNavigationMesh.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.DynamicNavigationMesh.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.DynamicNavigationMesh.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.DynamicNavigationMesh.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.DynamicNavigationMesh.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBackIn">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBackIn(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBackIn.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBackIn.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBackInOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBackInOut(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBackInOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBackInOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBackInOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBackInOutState(Urho.EaseBackInOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBackInOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBackInState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBackInState(Urho.EaseBackIn,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBackInState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBackOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBackOut(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBackOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBackOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBackOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBackOutState(Urho.EaseBackOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBackOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBounceIn">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBounceIn(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBounceIn.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBounceIn.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBounceInOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBounceInOut(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBounceInOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBounceInOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBounceInOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBounceInOutState(Urho.EaseBounceInOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBounceInOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBounceInState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBounceInState(Urho.EaseBounceIn,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBounceInState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBounceOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBounceOut(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBounceOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBounceOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseBounceOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseBounceOutState(Urho.EaseBounceOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseBounceOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseCustom">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseCustom(Urho.FiniteTimeAction,System.Func{System.Single,System.Single})">
            <param name="action"></param>
            <param name="easeFunc"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EaseCustom.EaseFunc">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseCustom.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseCustom.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseCustomState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseCustomState(Urho.EaseCustom,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EaseCustomState.EaseFunc">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseCustomState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseElastic">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElastic(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElastic(Urho.FiniteTimeAction,System.Single)">
            <param name="action"></param>
            <param name="period"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EaseElastic.Period">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseElastic.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseElastic.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseElasticIn">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElasticIn(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElasticIn(Urho.FiniteTimeAction,System.Single)">
            <param name="action"></param>
            <param name="period"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseElasticIn.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseElasticIn.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseElasticInOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElasticInOut(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElasticInOut(Urho.FiniteTimeAction,System.Single)">
            <param name="action"></param>
            <param name="period"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseElasticInOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseElasticInOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseElasticInOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElasticInOutState(Urho.EaseElasticInOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseElasticInOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseElasticInState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElasticInState(Urho.EaseElasticIn,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseElasticInState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseElasticOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElasticOut(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElasticOut(Urho.FiniteTimeAction,System.Single)">
            <param name="action"></param>
            <param name="period"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseElasticOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseElasticOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseElasticOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElasticOutState(Urho.EaseElasticOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseElasticOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseElasticState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseElasticState(Urho.EaseElastic,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EaseElasticState.Period">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseExponentialIn">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseExponentialIn(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseExponentialIn.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseExponentialIn.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseExponentialInOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseExponentialInOut(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseExponentialInOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseExponentialInOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseExponentialInOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseExponentialInOutState(Urho.EaseExponentialInOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseExponentialInOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseExponentialInState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseExponentialInState(Urho.EaseExponentialIn,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseExponentialInState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseExponentialOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseExponentialOut(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseExponentialOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseExponentialOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseExponentialOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseExponentialOutState(Urho.EaseExponentialOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseExponentialOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseIn">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseIn(Urho.FiniteTimeAction,System.Single)">
            <param name="action"></param>
            <param name="rate"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseIn.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseIn.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseInOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseInOut(Urho.FiniteTimeAction,System.Single)">
            <param name="action"></param>
            <param name="rate"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseInOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseInOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseInOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseInOutState(Urho.EaseInOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseInOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseInState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseInState(Urho.EaseIn,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseInState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseOut(Urho.FiniteTimeAction,System.Single)">
            <param name="action"></param>
            <param name="rate"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseOutState(Urho.EaseOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseRateAction">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseRateAction(Urho.FiniteTimeAction,System.Single)">
            <param name="action"></param>
            <param name="rate"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EaseRateAction.Rate">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseRateAction.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseRateAction.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseRateActionState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseRateActionState(Urho.EaseRateAction,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EaseRateActionState.Rate">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseRateActionState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseSineIn">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseSineIn(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseSineIn.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseSineIn.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseSineInOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseSineInOut(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseSineInOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseSineInOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseSineInOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseSineInOutState(Urho.EaseSineInOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseSineInOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseSineInState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseSineInState(Urho.EaseSineIn,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseSineInState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseSineOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseSineOut(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseSineOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseSineOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EaseSineOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.EaseSineOutState(Urho.EaseSineOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.EaseSineOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ElementAddedEventArgs">
            <summary>Event arguments for the UIElement's ElementAdded event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ElementAddedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ElementAddedEventArgs.Parent">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ElementAddedEventArgs.Root">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ElementMask">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ElementMask.BlendIndices">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.BlendWeights">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.Color">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.CubeTexCoord1">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.CubeTexCoord2">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.Default">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.InstanceMatrix1">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.InstanceMatrix2">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.InstanceMatrix3">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.None">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.Normal">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.Position">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.Tangent">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.TexCoord1">
            <summary></summary>
        </member>
        <member name="F:Urho.ElementMask.TexCoord2">
            <summary></summary>
        </member>
        <member name="T:Urho.ElementRemovedEventArgs">
            <summary>Event arguments for the UIElement's ElementRemoved event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ElementRemovedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ElementRemovedEventArgs.Parent">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ElementRemovedEventArgs.Root">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EmitterType">
            <summary>
            Particle emitter shapes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.EmitterType.Box">
            <summary></summary>
        </member>
        <member name="F:Urho.EmitterType.Sphere">
            <summary></summary>
        </member>
        <member name="T:Urho.EmitterType2D">
            <summary>
            2D particle emitter types.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.EmitterType2D.Gravity">
            <summary></summary>
        </member>
        <member name="F:Urho.EmitterType2D.Radial">
            <summary></summary>
        </member>
        <member name="T:Urho.EndFrameEventArgs">
            <summary>Event arguments for the Time's EndFrame event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EndRenderingEventArgs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EndViewRenderEventArgs">
            <summary>Event arguments for the Renderer's EndViewRender event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EndViewRenderEventArgs.Camera">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EndViewRenderEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EndViewRenderEventArgs.Surface">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EndViewRenderEventArgs.Texture">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EndViewRenderEventArgs.View">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.EndViewUpdateEventArgs">
            <summary>Event arguments for the View's EndViewUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EndViewUpdateEventArgs.Camera">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EndViewUpdateEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EndViewUpdateEventArgs.Surface">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EndViewUpdateEventArgs.Texture">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.EndViewUpdateEventArgs.View">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Engine">
            <summary>
            Urho3D engine. Creates the other subsystems.
            </summary>
            <remarks>
                <para>Before a Urho3D application can enter its main loop, the Engine subsystem object must be created and initialized by calling the <see cref="M:Urho.UrhoEngine.Initialize" /> method. </para>
                <para />
                <format type="text/html">
                    <h2>Main Loop Iteration</h2>
                </format>
                <para />
                <para>The main loop iteration (also called a frame) is driven by the Engine. In contrast it is the program's (for example Urho3DPlayer) responsibility to continuously loop this iteration by calling <see cref="M:Urho.Engine.RunFrame()" />. This function calls in turn the <see cref="T:Urho.Time" /> subsystem's <see cref="M:Urho.Engine.BeginFrame()" /> and <see cref="M:Urho.Engine.EndFrame()" /> functions, and sends various update events in between. </para>
                <para>There are a number of events that are raised, these events can be monitored by calling one of the various SubscribeToXxx methods in the UrhoObject base class.</para>
                <para>The event order is:</para>
                <list type="bullet">
                    <item>
                        <term>BeginFrame: signals the beginning of the new frame. <see cref="T:Urho.Input" /> and <see cref="T:Urho.Engine.Network" /> react to this to check for operating system window messages and arrived network packets.</term>
                    </item>
                    <item>
                        <term>Update: application-wide logic update event. By default each update-enabled <see cref="T:Urho.Scene" /> reacts to this and triggers the scene update (more on this below).</term>
                    </item>
                    <item>
                        <term>PostUpdate: application-wide logic post-update event. The <see cref="T:Urho.UI" /> subsystem updates its logic here.</term>
                    </item>
                    <item>
                        <term>RenderUpdate: <see cref="T:Urho.Renderer" /> updates its viewports here to prepare for rendering, and the <see cref="T:Urho.UI" /> generates render commands necessary to render the user interface.</term>
                    </item>
                    <item>
                        <term>PostRenderUpdate: by default nothing hooks to this. This can be used to implement logic that requires the rendering views to be up-to-date, for example to do accurate raycasts. Scenes may not be modified at this point; especially scene objects may not be deleted or crashes may occur.</term>
                    </item>
                    <item>
                        <term>EndFrame: signals the end of the frame. Before this, rendering the frame and measuring the next frame's timestep will have occurred.</term>
                    </item>
                </list>
                <para>The update of each <see cref="T:Urho.Scene" /> causes further events to be sent:</para>
                <list type="bullet">
                    <item>
                        <term>SceneUpdate: variable timestep scene update. This is a good place to implement any scene logic that does not need to happen at a fixed step.</term>
                    </item>
                    <item>
                        <term>SceneSubsystemUpdate: update scene-wide subsystems. Currently only the <see cref="T:Urho.PhysicsWorld" /> component listens to this, which causes it to step the physics simulation and send the following two events for each simulation step:</term>
                    </item>
                    <item>
                        <term>PhysicsPreStep: called before the simulation iteration. Happens at a fixed rate (the physics FPS). If fixed timestep logic updates are needed, this is a good event to listen to.</term>
                    </item>
                    <item>
                        <term>PhysicsPostStep: called after the simulation iteration. Happens at the same rate as PhysicsPreStep.</term>
                    </item>
                    <item>
                        <term>SmoothingUpdate: update <see cref="T:Urho.SmoothedTransform" /> components in network client scenes.</term>
                    </item>
                    <item>
                        <term>ScenePostUpdate: variable timestep scene post-update.  <see cref="T:Urho.ParticleEmitter" /> and <see cref="T:Urho.AnimationController" /> update themselves as a response to this event.</term>
                    </item>
                </list>
                <para>Variable timestep logic updates are preferable to fixed timestep, because they are only executed once per frame. In contrast, if the rendering framerate is low, several physics simulation steps will be performed on each frame to keep up the apparent passage of time, and if this also causes a lot of logic code to be executed for each step, the program may bog down further if the CPU can not handle the load. Note that the Engine’s minimum FPS, by default 10, sets a hard cap for the timestep to prevent spiraling down to a complete halt; if exceeded, animation and physics will instead appear to slow down.</para>
                <para />
                <format type="text/html">
                    <h2>Main Loop and the Application Activation State</h2>
                </format>
                <para />
                <para>The application window's state (has input focus, minimized or not) can be queried from the <see cref="T:Urho.Input" /> subsystem. It can also effect the main loop in the following ways:</para>
                <list type="bullet">
                    <item>
                        <term>Rendering is always skipped when the window is minimized.</term>
                    </item>
                </list>
                <list type="bullet">
                    <item>
                        <term>To avoid spinning the CPU and GPU unnecessarily, it is possible to define a smaller maximum FPS when no input focus. See <see cref="P:Urho.Engine.MaxInactiveFps" />.</term>
                    </item>
                </list>
                <list type="bullet">
                    <item>
                        <term>It is also possible to automatically pause update events and audio when the window is minimized. Use <see cref="P:Urho.Engine.PauseMinimized" /> to control this behaviour. By default it is not enabled on desktop, and enabled on mobile devices (Android and iOS.) For singleplayer games this is recommended to avoid unwanted progression while away from the program. However in a multiplayer game this should not be used, as the missing scene updates would likely desync the client with the server.</term>
                    </item>
                </list>
                <list type="bullet">
                    <item>
                        <term>On mobile devices the window becoming minimized can mean that it will never become maximized again, in case the OS decides it needs to free memory and kills your program. Therefore you should listen for the InputFocus event from the <see cref="T:Urho.Input" /> subsystem and immediately save your program state as applicable if the program loses input focus or is minimized.</term>
                    </item>
                </list>
                <list type="bullet">
                    <item>
                        <term>On mobile devices it is also unsafe to access or create any graphics resources while the window is minimized (as the graphics context may be destroyed during this time); doing so can crash the program. It is recommended to leave the pause-minimized feature on to ensure you do not have to check for this in your update code.</term>
                    </item>
                </list>
                <para>Note that on iOS calling <see cref="M:Urho.Engine.Exit" /> is a no-op as there is no officially sanctioned way to manually exit your program. On Android it will cause the activity to manually exit.</para>
                <format type="text/html">
                    <h2>Application Framework</h2>
                    <div>The&amp;amp;nbsp;<a href="">T:Urho.Application</a>&amp;amp;nbsp;class provides a minimal framework to run your game with a main loop and a handful of methods that you can override to prepare and run your game.</div>
                </format>
            </remarks>
        </member>
        <member name="C:Urho.Engine(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Engine, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Engine(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Engine that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Engine attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Engine(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Engine.ApplyFrameLimit">
            <summary>
            Get the timestep for the next frame and sleep for frame limiting if necessary.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Engine.AutoExit">
            <summary>
            Return whether to exit automatically on exit request.
            Or
            Set whether to exit automatically on exit request (window close button.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Engine.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Engine.CreateConsole">
            <summary>
            Create the console and return it. May return null if engine configuration does not allow creation (headless mode.)
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.CreateDebugHud">
            <summary>
            Create the debug hud.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.DumpMemory">
            <summary>
            Dump information of all memory allocations to the log. Supported in MSVC debug mode only.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.DumpProfiler">
            <summary>
            Dump profiling information to the log.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.DumpResources(System.Boolean)">
            <param name="dumpFileName"></param>
            <summary>
            Dump information of all resources to the log.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.Exit">
            <summary>
            Close the graphics window and set the exit flag. No-op on iOS, as an iOS application can not legally exit.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.IsExiting">
            <summary>
            Return whether exit has been requested.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.IsHeadless">
            <summary>
            Return whether the engine has been created in headless mode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.IsInitialized">
            <summary>
            Return whether engine has been initialized.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Engine.MaxFps">
            <summary>
            Return the maximum frames per second.
            Or
            Set maximum frames per second. The engine will sleep if FPS is higher than this.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Engine.MaxInactiveFps">
            <summary>
            Return the maximum frames per second when the application does not have input focus.
            Or
            Set maximum frames per second when the application does not have input focus.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Engine.MinFps">
            <summary>
            Return the minimum frames per second.
            Or
            Set minimum frames per second. If FPS goes lower than this, time will appear to slow down.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Engine.NextTimeStep">
            <summary>
            Get timestep of the next frame. Updated by ApplyFrameLimit().
            Or
            Override timestep of the next frame. Should be called in between RunFrame() calls.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Engine.PauseMinimized">
            <summary>
            Return whether to pause update events and audio when minimized.
            Or
            Set whether to pause update events and audio when minimized.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.Render">
            <summary>
            Render after frame update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.RunFrame">
            <summary>
            Run one frame.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.SubscribeToPostRenderUpdate(System.Action{Urho.PostRenderUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the PostRenderUpdate event raised by the Engine.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Engine.SubscribeToPostUpdate(System.Action{Urho.PostUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the PostUpdate event raised by the Engine.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Engine.SubscribeToRenderUpdate(System.Action{Urho.RenderUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the RenderUpdate event raised by the Engine.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Engine.SubscribeToUpdate(System.Action{Urho.UpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the Update event raised by the Engine.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Engine.TimeStepSmoothing">
            <summary>
            Return how many frames to average for timestep smoothing.
            Or
            Set how many frames to average for timestep smoothing. Default is 2. 1 disables smoothing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Engine.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Engine.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Engine.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Engine.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Engine.Update">
            <summary>
            Send frame update events.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ExitRequestedEventArgs">
            <summary>Event arguments for the Input's ExitRequested event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FaceCameraMode">
            <summary>
            Billboard camera facing modes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.FaceCameraMode.LookAtXyz">
            <summary></summary>
        </member>
        <member name="F:Urho.FaceCameraMode.LookAtY">
            <summary></summary>
        </member>
        <member name="F:Urho.FaceCameraMode.None">
            <summary></summary>
        </member>
        <member name="F:Urho.FaceCameraMode.RotateXyz">
            <summary></summary>
        </member>
        <member name="F:Urho.FaceCameraMode.RotateY">
            <summary></summary>
        </member>
        <member name="T:Urho.FadeIn">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FadeIn(System.Single)">
            <param name="durataion"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FadeIn.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FadeIn.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FadeInState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FadeInState(Urho.FadeIn,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FadeInState.OriginalState">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FadeInState.Times">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FadeInState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FadeOut">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FadeOut(System.Single)">
            <param name="durtaion"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FadeOut.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FadeOut.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FadeOutState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FadeOutState(Urho.FadeOut,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FadeOutState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FadeTo">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FadeTo(System.Single,System.Byte)">
            <param name="duration"></param>
            <param name="opacity"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FadeTo.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FadeTo.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FadeTo.ToOpacity">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FadeToState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FadeToState(Urho.FadeTo,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FadeToState.FromOpacity">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FadeToState.ToOpacity">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FadeToState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.File">
            <summary>
            %File opened either through the filesystem or from within a package file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.File(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of File, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.File(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of File that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of File attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.File(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.File(Urho.Context,System.String,Urho.FileMode)">
            <param name="context">The context that this object will be attached to.</param>
            <param name="fileName"></param>
            <param name="mode"></param>
            <summary>Creates an instance of File that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of File attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.File(Urho.Context,Urho.PackageFile,System.String)">
            <param name="context">The context that this object will be attached to.</param>
            <param name="package"></param>
            <param name="fileName"></param>
            <summary>Creates an instance of File that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of File attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="P:Urho.File.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.File.Checksum">
            <summary>
            Return a checksum of the file contents using the SDBM hash algorithm.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.File.Close">
            <summary>
            Close the file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.File.FileHandle">
            <summary>
            Return the file handle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.File.Flush">
            <summary>
            Flush any buffered output to the file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.File.IsOpen">
            <summary>
            Return whether is open.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.File.IsPackaged">
            <summary>
            Return whether the file originates from a package.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.File.Mode">
            <summary>
            Return the open mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.File.Name">
            <summary>
            Return the file name.
            Or
            Change the file name. Used by the resource system.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.File.Open(System.String,Urho.FileMode)">
            <param name="fileName"></param>
            <param name="mode"></param>
            <summary>
            Open a filesystem file. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.File.Open(Urho.PackageFile,System.String)">
            <param name="package"></param>
            <param name="fileName"></param>
            <summary>
            Open from within a package file. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.File.Read(System.IntPtr,System.UInt32)">
            <param name="dest"></param>
            <param name="size"></param>
            <summary>
            Read bytes from the file. Return number of bytes actually read.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.File.Seek(System.UInt32)">
            <param name="position"></param>
            <summary>
            Set position from the beginning of the file.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.File.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.File.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.File.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.File.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.File.Write(System.Void*,System.UInt32)">
            <param name="data"></param>
            <param name="size"></param>
            <summary>
            Write bytes to the file. Return number of bytes actually written.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FileChangedEventArgs">
            <summary>Event arguments for the ResourceCache's FileChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileChangedEventArgs.FileName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileChangedEventArgs.ResourceName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FileMode">
            <summary>
            File open mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.FileMode.Read">
            <summary></summary>
        </member>
        <member name="F:Urho.FileMode.ReadWrite">
            <summary></summary>
        </member>
        <member name="F:Urho.FileMode.Write">
            <summary></summary>
        </member>
        <member name="T:Urho.FileSelectedEventArgs">
            <summary>Event arguments for the FileSelector's FileSelected event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelectedEventArgs.FileName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelectedEventArgs.Filter">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelectedEventArgs.Ok">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FileSelector">
            <summary>
            %File selector dialog.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FileSelector(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of FileSelector, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.FileSelector(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of FileSelector that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of FileSelector attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.FileSelector(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.FileSelector.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.FileSelector.CancelButton">
            <summary>
            Return cancel button.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.CloseButton">
            <summary>
            Return close button.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.DefaultStyle">
            <summary>
            Return the UI style file.
            Or
            Set fileselector UI style.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.DirectoryMode">
            <summary>
            Return directory mode flag.
            Or
            Set directory selection mode. Default false.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.FileList">
            <summary>
            Return file list.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.FileName">
            <summary>
            Return current filename.
            Or
            Set current filename.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.FileNameEdit">
            <summary>
            Return filename editor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.Filter">
            <summary>
            Return current filter.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.FilterIndex">
            <summary>
            Return current filter index.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.FilterList">
            <summary>
            Return filter dropdown.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.OKButton">
            <summary>
            Return OK button.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.Path">
            <summary>
            Return current path.
            Or
            Set current path.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.PathEdit">
            <summary>
            Return path editor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSelector.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSelector.SetButtonTexts(System.String,System.String)">
            <param name="okText"></param>
            <param name="cancelText"></param>
            <summary>
            Set button texts.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSelector.SubscribeToFileSelected(System.Action{Urho.FileSelectedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the FileSelected event raised by the FileSelector.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.FileSelector.Title">
            <summary>
            Return window title.
            Or
            Set title text.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.TitleText">
            <summary>
            Return window title text element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.FileSelector.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.FileSelector.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.FileSelector.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSelector.UpdateElements">
            <summary>
            Update elements to layout properly. Call this after manually adjusting the sub-elements.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSelector.Window">
            <summary>
            Return fileselector window.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FileSystem">
            <summary>
            Subsystem for file and directory operations and access control.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FileSystem(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of FileSystem, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.FileSystem(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of FileSystem that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of FileSystem attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.FileSystem(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.FileSystem.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.FileSystem.CheckAccess(System.String)">
            <param name="pathName"></param>
            <summary>
            Check if a path is allowed to be accessed. If no paths are registered, all are allowed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.Copy(System.String,System.String)">
            <param name="srcFileName"></param>
            <param name="destFileName"></param>
            <summary>
            Copy a file. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.CreateDir(System.String)">
            <param name="pathName"></param>
            <summary>
            Create a directory.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSystem.CurrentDir">
            <summary>
            Return the absolute current working directory.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.Delete(System.String)">
            <param name="fileName"></param>
            <summary>
            Delete a file. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.DirExists(System.String)">
            <param name="pathName"></param>
            <summary>
            Check if a directory exists.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSystem.ExecuteConsoleCommands">
            <summary>
            Return whether is executing engine console commands as OS-specific system command.
            Or
            Set whether to execute engine console commands as OS-specific system command.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.FileExists(System.String)">
            <param name="fileName"></param>
            <summary>
            Check if a file exists.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.GetAppPreferencesDir(System.String,System.String)">
            <param name="org"></param>
            <param name="app"></param>
            <summary>
            Return the application preferences directory.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.GetLastModifiedTime(System.String)">
            <param name="fileName"></param>
            <summary>
            Returns the file's last modified time as seconds since 1.1.1970, or 0 if can not be accessed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.HasRegisteredPaths">
            <summary>
            Return whether paths have been registered.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSystem.ProgramDir">
            <summary>
            Return the program's directory. If it does not contain the Urho3D default CoreData and Data directories, and the current working directory does, return the working directory instead.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.RegisterPath(System.String)">
            <param name="pathName"></param>
            <summary>
            Register a path as allowed to access. If no paths are registered, all are allowed. Registering allowed paths is considered securing the Urho3D execution environment: running programs and opening files externally through the system will fail afterward.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.Rename(System.String,System.String)">
            <param name="srcFileName"></param>
            <param name="destFileName"></param>
            <summary>
            Rename a file. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.SetCurrentDir(System.String)">
            <param name="pathName"></param>
            <summary>
            Set the current working directory.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.SetLastModifiedTime(System.String,System.UInt32)">
            <param name="fileName"></param>
            <param name="newTime"></param>
            <summary>
            Set a file's last modified time as seconds since 1.1.1970. Return true on success.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.SubscribeToAsyncExecFinished(System.Action{Urho.AsyncExecFinishedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the AsyncExecFinished event raised by the FileSystem.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.FileSystem.SystemCommand(System.String,System.Boolean)">
            <param name="commandLine"></param>
            <param name="redirectStdOutToLog"></param>
            <summary>
            Run a program using the command interpreter, block until it exits and return the exit code. Will fail if any allowed paths are defined.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.SystemCommandAsync(System.String)">
            <param name="commandLine"></param>
            <summary>
            Run a program using the command interpreter asynchronously. Return a request ID or M_MAX_UNSIGNED if failed. The exit code will be posted together with the request ID in an AsyncExecFinished event. Will fail if any allowed paths are defined.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileSystem.SystemOpen(System.String,System.String)">
            <param name="fileName"></param>
            <param name="mode"></param>
            <summary>
            Open a file in an external program, with mode such as "edit" optionally specified. Will fail if any allowed paths are defined.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSystem.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.FileSystem.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.FileSystem.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.FileSystem.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileSystem.UserDocumentsDir">
            <summary>
            Return the user documents directory.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FileWatcher">
            <summary>
            Watches a directory and its subdirectories for files being modified.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FileWatcher(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of FileWatcher, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.FileWatcher(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of FileWatcher that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of FileWatcher attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.FileWatcher(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.FileWatcher.AddChange(System.String)">
            <param name="fileName"></param>
            <summary>
            Add a file change into the changes queue.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileWatcher.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.FileWatcher.Delay">
            <summary>
            Return the delay in seconds for notifying file changes.
            Or
            Set the delay in seconds before file changes are notified. This (hopefully) avoids notifying when a file save is still in progress. Default 1 second.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileWatcher.Path">
            <summary>
            Return the path being watched, or empty if not watching.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileWatcher.StartWatching(System.String,System.Boolean)">
            <param name="pathName"></param>
            <param name="watchSubDirs"></param>
            <summary>
            Start watching a directory. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileWatcher.StopWatching">
            <summary>
            Stop watching the directory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FileWatcher.ThreadFunction">
            <summary>
            Directory watching loop.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FileWatcher.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.FileWatcher.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.FileWatcher.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.FileWatcher.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FillMode">
            <summary>
            Fill mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.FillMode.Point">
            <summary></summary>
        </member>
        <member name="F:Urho.FillMode.Solid">
            <summary></summary>
        </member>
        <member name="F:Urho.FillMode.Wireframe">
            <summary></summary>
        </member>
        <member name="T:Urho.FiniteTimeAction">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FiniteTimeAction">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FiniteTimeAction(System.Single)">
            <param name="duration"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FiniteTimeAction.Duration">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FiniteTimeAction.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FiniteTimeAction.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FiniteTimeActionState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FiniteTimeActionState(Urho.FiniteTimeAction,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FiniteTimeActionState.Duration">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FiniteTimeActionState.Elapsed">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FiniteTimeActionState.IsDone">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FiniteTimeActionState.Step(System.Single)">
            <param name="dt"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FocusChangedEventArgs">
            <summary>Event arguments for the UI's FocusChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FocusChangedEventArgs.ClickedElement">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FocusChangedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FocusedEventArgs">
            <summary>Event arguments for the UIElement's Focused event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FocusedEventArgs.ByKey">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FocusedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FocusMode">
            <summary>
            %UI element focus mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.FocusMode.Focusable">
            <summary></summary>
        </member>
        <member name="F:Urho.FocusMode.FocusableDefocusable">
            <summary></summary>
        </member>
        <member name="F:Urho.FocusMode.NotFocusable">
            <summary></summary>
        </member>
        <member name="F:Urho.FocusMode.ResetFocus">
            <summary></summary>
        </member>
        <member name="T:Urho.FocusParameters">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.FocusParameters.AutoSize">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.FocusParameters.Focus">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.FocusParameters.MinView">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.FocusParameters.NonUniform">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.FocusParameters.Quantize">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Font">
            <summary>
            %Font resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Font(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Font, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Font(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Font that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Font attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Font(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Font.AbsoluteGlyphOffset">
            <summary>
            Return absolute position adjustment for glyphs.
            Or
            Set absolute (in pixels) position adjustment for glyphs.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Font.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Font.GetFace(System.Int32)">
            <param name="pointSize"></param>
            <summary>
            Return font face. Pack and render to a texture if not rendered yet. Return null on error.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Font.GetTotalGlyphOffset(System.Int32)">
            <param name="pointSize"></param>
            <summary>
            Return the total effective offset for a point size.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Font.IsSDFFont">
            <summary>
            Is signed distance field font.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Font.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Font.ReleaseFaces">
            <summary>
            Release font faces and recreate them next time when requested. Called when font textures lost or global font properties change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Font.ScaledGlyphOffset">
            <summary>
            Return point size scaled position adjustment for glyphs.
            Or
            Set point size scaled position adjustment for glyphs.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Font.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Font.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Font.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Font.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FontFace">
            <summary>
            %Font face description.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FontFace(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of FontFace, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.FontFace(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.FontFace.GetGlyph(System.UInt32)">
            <param name="c"></param>
            <summary>
            Return pointer to the glyph structure corresponding to a character. Return null if glyph not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FontFace.GetKerning(System.UInt32,System.UInt32)">
            <param name="c"></param>
            <param name="d"></param>
            <summary>
            Return the kerning for a character and the next character.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FontFace.HasMutableGlyphs">
            <summary>
            Return if font face uses mutable glyphs.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FontFace.IsDataLost">
            <summary>
            Return true when one of the texture has a data loss.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FontFace.Load(System.Byte*,System.UInt32,System.Int32)">
            <param name="fontData"></param>
            <param name="fontDataSize"></param>
            <param name="pointSize"></param>
            <summary>
            Load font face.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FontFace.PointSize">
            <summary>
            Return point size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FontFace.RowHeight">
            <summary>
            Return row height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.FontFace.Textures">
            <summary>
            Return textures.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FontFaceBitmap">
            <summary>
            Bitmap font face description.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FontFaceBitmap(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of FontFaceBitmap, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.FontFaceBitmap(Urho.Font)">
            <param name="font"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FontFaceBitmap(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.FontFaceBitmap.Load(Urho.FontFace,System.Boolean)">
            <param name="fontFace"></param>
            <param name="usedGlyphs"></param>
            <summary>
            Load from existed font face, pack used glyphs into smallest texture size and smallest number of texture.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FontFaceBitmap.Load(System.Byte*,System.UInt32,System.Int32)">
            <param name="fontData"></param>
            <param name="fontDataSize"></param>
            <param name="pointSize"></param>
            <summary>
            Load font face.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FontFaceFreeType">
            <summary>
            Free type font face description.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FontFaceFreeType(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of FontFaceFreeType, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.FontFaceFreeType(Urho.Font)">
            <param name="font"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.FontFaceFreeType(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.FontFaceFreeType.GetGlyph(System.UInt32)">
            <param name="c"></param>
            <summary>
            Return pointer to the glyph structure corresponding to a character. Return null if glyph not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FontFaceFreeType.HasMutableGlyphs">
            <summary>
            Return if font face uses mutable glyphs.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.FontFaceFreeType.Load(System.Byte*,System.UInt32,System.Int32)">
            <param name="fontData"></param>
            <param name="fontDataSize"></param>
            <param name="pointSize"></param>
            <summary>
            Load font face.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FontGlyph">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Frustum">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.FrustumPlane">
            <summary>
            Frustum planes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.FrustumPlane.Down">
            <summary></summary>
        </member>
        <member name="F:Urho.FrustumPlane.Far">
            <summary></summary>
        </member>
        <member name="F:Urho.FrustumPlane.Left">
            <summary></summary>
        </member>
        <member name="F:Urho.FrustumPlane.Near">
            <summary></summary>
        </member>
        <member name="F:Urho.FrustumPlane.Right">
            <summary></summary>
        </member>
        <member name="F:Urho.FrustumPlane.Up">
            <summary></summary>
        </member>
        <member name="T:Urho.Geometry">
            <summary>
            Defines one or more vertex buffers, an index buffer and a draw range.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Geometry(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Geometry, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Geometry(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Geometry that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Geometry attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Geometry(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Geometry.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Geometry.BufferHash">
            <summary>
            Return buffers' combined hash value for state sorting.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Geometry.Draw(Urho.Graphics)">
            <param name="graphics"></param>
            <summary>
            Draw.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Geometry.GetHitDistance(Urho.Ray,Urho.Vector3*,Urho.Vector2*)">
            <param name="ray"></param>
            <param name="outNormal"></param>
            <param name="outUV"></param>
            <summary>
            Return ray hit distance or infinity if no hit. Requires raw data to be set. Optionally return hit normal and hit uv coordinates at intersect point.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Geometry.GetVertexBuffer(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return vertex buffer by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Geometry.GetVertexElementMask(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return vertex element mask by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Geometry.IndexBuffer">
            <summary>
            Return the index buffer.
            Or
            Set the index buffer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Geometry.IndexCount">
            <summary>
            Return number of indices.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Geometry.IndexStart">
            <summary>
            Return start index.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Geometry.IsEmpty">
            <summary>
            Return whether has empty draw range.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Geometry.IsInside(Urho.Ray)">
            <param name="ray"></param>
            <summary>
            Return whether or not the ray is inside geometry.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Geometry.LodDistance">
            <summary>
            Return LOD distance.
            Or
            Set the LOD distance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Geometry.NumVertexBuffers">
            <summary>
            Return number of vertex buffers.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Geometry.PrimitiveType">
            <summary>
            Return primitive type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Geometry.SetDrawRange(Urho.PrimitiveType,System.UInt32,System.UInt32,System.Boolean)">
            <param name="type"></param>
            <param name="indexStart"></param>
            <param name="indexCount"></param>
            <param name="getUsedVertexRange"></param>
            <summary>
            Set the draw range.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Geometry.SetDrawRange(Urho.PrimitiveType,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <param name="type"></param>
            <param name="indexStart"></param>
            <param name="indexCount"></param>
            <param name="vertexStart"></param>
            <param name="vertexCount"></param>
            <param name="checkIllegal"></param>
            <summary>
            Set the draw range.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Geometry.SetNumVertexBuffers(System.UInt32)">
            <param name="num"></param>
            <summary>
            Set number of vertex buffer.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Geometry.SetVertexBuffer(System.UInt32,Urho.VertexBuffer,System.UInt32)">
            <param name="index"></param>
            <param name="buffer"></param>
            <param name="elementMask"></param>
            <summary>
            Set a vertex buffer by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Geometry.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Geometry.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Geometry.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Geometry.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Geometry.VertexBuffers">
            <summary>
            Return all vertex buffers.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Geometry.VertexCount">
            <summary>
            Return number of used vertices.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Geometry.VertexStart">
            <summary>
            Return first used vertex.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.GeometryType">
            <summary>
            %Geometry type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.GeometryType.Billboard">
            <summary></summary>
        </member>
        <member name="F:Urho.GeometryType.Instanced">
            <summary></summary>
        </member>
        <member name="F:Urho.GeometryType.MaxGeometrytypes">
            <summary></summary>
        </member>
        <member name="F:Urho.GeometryType.Skinned">
            <summary></summary>
        </member>
        <member name="F:Urho.GeometryType.Static">
            <summary></summary>
        </member>
        <member name="F:Urho.GeometryType.StaticNoinstancing">
            <summary></summary>
        </member>
        <member name="T:Urho.GestureInputEventArgs">
            <summary>Event arguments for the Input's GestureInput event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.GestureInputEventArgs.CenterX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.GestureInputEventArgs.CenterY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.GestureInputEventArgs.Error">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.GestureInputEventArgs.GestureID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.GestureInputEventArgs.NumFingers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.GestureRecordedEventArgs">
            <summary>Event arguments for the Input's GestureRecorded event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.GestureRecordedEventArgs.GestureID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.GPUObject">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Graphics">
            <summary>
            %Graphics subsystem. Manages the application window, rendering state and GPU resources.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Graphics(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Graphics, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Graphics(Urho.Context)">
            <param name="context_"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Graphics(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Graphics.AddGPUObject(Urho.GPUObject*)">
            <param name="object"></param>
            <summary>
            Add a GPU object to keep track of. Called by GPUObject.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.AlphaFormat">
            <summary>
            Return the API-specific alpha texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.AnisotropySupport">
            <summary>
            Return whether anisotropic texture filtering is supported.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.ApiName">
            <summary>
            Return graphics API name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Graphics.BeginDumpShaders(System.String)">
            <param name="fileName"></param>
            <summary>
            Begin dumping shader variation names to an XML file for precaching.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.BeginFrame">
            <summary>
            Begin frame rendering. Return true if device available and can render.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.BlendMode">
            <summary>
            Return blending mode.
            Or
            Set blending mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.Borderless">
            <summary>
            Return whether window is borderless.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.CleanupRenderSurface(Urho.RenderSurface)">
            <param name="surface"></param>
            <summary>
            Clean up a render surface from all FBOs.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.CleanupScratchBuffers">
            <summary>
            Clean up too large scratch buffers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.CleanupShaderPrograms(Urho.ShaderVariation)">
            <param name="variation"></param>
            <summary>
            Clean up shader programs when a shader variation is released or destroyed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.Clear(System.UInt32,Urho.Color,System.Single,System.UInt32)">
            <param name="flags"></param>
            <param name="color"></param>
            <param name="depth"></param>
            <param name="stencil"></param>
            <summary>
            Clear any or all of rendertarget, depth buffer and stencil buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.ClearParameterSource(Urho.ShaderParameterGroup)">
            <param name="group"></param>
            <summary>
            Clear remembered shader parameter source group.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.ClearParameterSources">
            <summary>
            Clear remembered shader parameter sources.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.ClearTransformSources">
            <summary>
            Clear remembered transform shader parameter sources.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.Close">
            <summary>
            Close the window.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.ColorWrite">
            <summary>
            Return whether color write is enabled.
            Or
            Set color write on/off.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.CullMode">
            <summary>
            Return hardware culling mode.
            Or
            Set hardware culling mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.DefaultTextureFilterMode">
            <summary>
            Return default texture filtering mode.
            Or
            Set default texture filtering mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.DeferredSupport">
            <summary>
            Return whether deferred rendering is supported.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.DepthConstantBias">
            <summary>
            Return depth constant bias.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.DepthSlopeScaledBias">
            <summary>
            Return depth slope scaled bias.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.DepthStencil">
            <summary>
            Return depth-stencil surface.
            Or
            Set depth-stencil surface.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.DepthStencilFormat">
            <summary>
            Return the API-specific hardware depth-stencil texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.DepthTest">
            <summary>
            Return depth compare mode.
            Or
            Set depth compare.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.DepthTexture">
            <summary>
            Return readable depth-stencil texture. Not created automatically on OpenGL.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.DepthWrite">
            <summary>
            Return whether depth write is enabled.
            Or
            Set depth write on/off.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.DesktopResolution">
            <summary>
            Return the desktop resolution.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.Draw(Urho.PrimitiveType,System.UInt32,System.UInt32)">
            <param name="type"></param>
            <param name="vertexStart"></param>
            <param name="vertexCount"></param>
            <summary>
            Draw non-indexed geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.Draw(Urho.PrimitiveType,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <param name="type"></param>
            <param name="indexStart"></param>
            <param name="indexCount"></param>
            <param name="minVertex"></param>
            <param name="vertexCount"></param>
            <summary>
            Draw indexed geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.DrawInstanced(Urho.PrimitiveType,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <param name="type"></param>
            <param name="indexStart"></param>
            <param name="indexCount"></param>
            <param name="minVertex"></param>
            <param name="vertexCount"></param>
            <param name="instanceCount"></param>
            <summary>
            Draw indexed, instanced geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.DummyColorFormat">
            <summary>
            Return dummy color texture format for shadow maps. 0 if not needed, may be nonzero on OS X to work around an Intel driver issue.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.EndDumpShaders">
            <summary>
            End dumping shader variations names.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.EndFrame">
            <summary>
            End frame rendering and swap buffers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.ExternalWindow">
            <summary>
            Return OS-specific external window handle. Null if not in use.
            Or
            Set external window handle. Only effective before setting the initial screen mode. On Windows it is necessary to set up OpenGL pixel format manually for the window.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.FillMode">
            <summary>
            Return polygon fill mode.
            Or
            Set polygon fill mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.Float16Format">
            <summary>
            Return the API-specific single channel 16-bit float texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.Float32Format">
            <summary>
            Return the API-specific single channel 32-bit float texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.FlushGPU">
            <summary>
            Return whether the GPU command buffer is flushed each frame. Not yet implemented on OpenGL.
            Or
            Set whether to flush the GPU command buffer to prevent multiple frames being queued and uneven frame timesteps. Not yet implemented on OpenGL.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.ForceGL2">
            <summary>
            Return whether OpenGL 2 use is forced.
            Or
            Set forced use of OpenGL 2 even if OpenGL 3 is available. Must be called before setting the screen mode for the first time. Default false.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.FreeScratchBuffer(System.IntPtr)">
            <param name="buffer"></param>
            <summary>
            Free a CPU-side scratch buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.Fullscreen">
            <summary>
            Return whether window is fullscreen.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.GetFormat(System.String)">
            <param name="formatName"></param>
            <summary>
            Return the API-specific texture format from a textual description, for example "rgb".
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.GetFormat(Urho.CompressedFormat)">
            <param name="format"></param>
            <summary>
            Return hardware format for a compressed image format, or 0 if unsupported.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.GetOrCreateConstantBuffer(System.UInt32,System.UInt32)">
            <param name="bindingIndex"></param>
            <param name="size"></param>
            <summary>
            Reserve a constant buffer.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.GetRenderTarget(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return rendertarget by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.GetShader(Urho.ShaderType,System.String,System.String)">
            <param name="type"></param>
            <param name="name"></param>
            <param name="defines"></param>
            <summary>
            Return a shader variation by name and defines.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.GetTexture(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return texture by texture unit index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.GetTextureUnit(System.String)">
            <param name="name"></param>
            <summary>
            Return texture unit index by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.GetTextureUnitName(Urho.TextureUnit)">
            <param name="unit"></param>
            <summary>
            Return texture unit name by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.GetVertexBuffer(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return current vertex buffer by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.GL3Support">
            <summary>
            Return whether is using an OpenGL 3 context.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.HardwareShadowSupport">
            <summary>
            Return whether shadow map depth compare is done in hardware. Always true on OpenGL.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.HasShaderParameter(Urho.StringHash)">
            <param name="param"></param>
            <summary>
            Check whether a shader parameter exists on the currently set shaders.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.HasTextureUnit(Urho.TextureUnit)">
            <param name="unit"></param>
            <summary>
            Check whether the current shader program uses a texture unit.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.Height">
            <summary>
            Return window height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.HiresShadowMapFormat">
            <summary>
            Return 24-bit shadow map depth texture format, or 0 if not supported.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.Impl">
            <summary>
            Return graphics implementation, which holds the actual API-specific resources.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.IndexBuffer">
            <summary>
            Return index buffer.
            Or
            Set index buffer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.InstancingSupport">
            <summary>
            Return whether hardware instancing is supported.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.IsDeviceLost">
            <summary>
            Return whether device is lost, and can not yet render.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.IsInitialized">
            <summary>
            Return whether rendering initialized.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.LightPrepassSupport">
            <summary>
            Return whether light pre-pass rendering is supported.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.LinearDepthFormat">
            <summary>
            Return the API-specific linear depth texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.LuminanceAlphaFormat">
            <summary>
            Return the API-specific luminance alpha texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.LuminanceFormat">
            <summary>
            Return the API-specific luminance texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.MarkFBODirty">
            <summary>
            Mark the FBO needing an update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.MaxBones">
            <summary>
            Return maximum number of supported bones for skinning.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.Maximize">
            <summary>
            Maximize the Window.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.Minimize">
            <summary>
            Minimize the Window.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.MultiSample">
            <summary>
            Return multisample mode (1 = no multisampling.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.NeedParameterUpdate(Urho.ShaderParameterGroup,System.Void*)">
            <param name="group"></param>
            <param name="source"></param>
            <summary>
            Check whether a shader parameter group needs update. Does not actually check whether parameters exist in the shaders.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.NumBatches">
            <summary>
            Return number of batches drawn this frame.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.NumPrimitives">
            <summary>
            Return number of primitives drawn this frame.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.Orientations">
            <summary>
            Return allowed screen orientations.
            Or
            Set allowed screen orientations as a space-separated list of "LandscapeLeft", "LandscapeRight", "Portrait" and "PortraitUpsideDown". Affects currently only iOS platform.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.PixelShader">
            <summary>
            Return pixel shader.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.PixelUVOffset">
            <summary>
            Return UV offset required for pixel perfect rendering.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.ReadableDepthFormat">
            <summary>
            Return the API-specific readable hardware depth format, or 0 if not supported.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.ReadableDepthSupport">
            <summary>
            Return whether a readable hardware depth format is available.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.Release(System.Boolean,System.Boolean)">
            <param name="clearGPUObjects"></param>
            <param name="closeWindow"></param>
            <summary>
            Release/clear GPU objects and optionally close the window.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.RemoveGPUObject(Urho.GPUObject*)">
            <param name="object"></param>
            <summary>
            Remove a GPU object. Called by GPUObject.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.RenderTargetDimensions">
            <summary>
            Return rendertarget width and height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.ReserveScratchBuffer(System.UInt32)">
            <param name="size"></param>
            <summary>
            Reserve a CPU-side scratch buffer.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.ResetDepthStencil">
            <summary>
            Reset depth-stencil surface.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.ResetRenderTarget(System.UInt32)">
            <param name="index"></param>
            <summary>
            Reset specific rendertarget.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.ResetRenderTargets">
            <summary>
            Reset all rendertargets, depth-stencil surface and viewport.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.Resizable">
            <summary>
            Return whether window is resizable.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.ResolveToTexture(Urho.Texture2D,Urho.IntRect)">
            <param name="destination"></param>
            <param name="viewport"></param>
            <summary>
            Resolve multisampled backbuffer to a texture rendertarget. The texture's size should match the viewport size.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.Restore">
            <summary>
            Restore GPU objects and reinitialize state. Requires an open window.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.RG16Format">
            <summary>
            Return the API-specific RG 16-bit texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.RGBA16Format">
            <summary>
            Return the API-specific RGBA 16-bit texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.RGBAFloat16Format">
            <summary>
            Return the API-specific RGBA 16-bit float texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.RGBAFloat32Format">
            <summary>
            Return the API-specific RGBA 32-bit float texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.RGBAFormat">
            <summary>
            Return the API-specific RGBA texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.RGBFormat">
            <summary>
            Return the API-specific RGB texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.RGFloat16Format">
            <summary>
            Return the API-specific RG 16-bit float texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.RGFloat32Format">
            <summary>
            Return the API-specific RG 32-bit float texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.ScissorRect">
            <summary>
            Return scissor rectangle coordinates.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.ScissorTest">
            <summary>
            Return whether scissor test is enabled.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetDepthBias(System.Single,System.Single)">
            <param name="constantBias"></param>
            <param name="slopeScaledBias"></param>
            <summary>
            Set depth bias.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetDepthStencil(Urho.Texture2D)">
            <param name="texture"></param>
            <summary>
            Set depth-stencil surface.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetMode(System.Int32,System.Int32)">
            <param name="width"></param>
            <param name="height"></param>
            <summary>
            Set screen resolution only. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetMode(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <param name="width"></param>
            <param name="height"></param>
            <param name="fullscreen"></param>
            <param name="borderless"></param>
            <param name="resizable"></param>
            <param name="vsync"></param>
            <param name="tripleBuffer"></param>
            <param name="multiSample"></param>
            <summary>
            Set screen mode. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetRenderTarget(System.UInt32,Urho.RenderSurface)">
            <param name="index"></param>
            <param name="renderTarget"></param>
            <summary>
            Set rendertarget.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetRenderTarget(System.UInt32,Urho.Texture2D)">
            <param name="index"></param>
            <param name="texture"></param>
            <summary>
            Set rendertarget.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetScissorTest(System.Boolean,Urho.IntRect)">
            <param name="enable"></param>
            <param name="rect"></param>
            <summary>
            Set scissor test.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetShaderParameter(Urho.StringHash,System.Single)">
            <param name="param"></param>
            <param name="value"></param>
            <summary>
            Set shader float constant.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetShaderParameter(Urho.StringHash,Urho.Color)">
            <param name="param"></param>
            <param name="color"></param>
            <summary>
            Set shader color constant.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetShaderParameter(Urho.StringHash,Urho.Vector2)">
            <param name="param"></param>
            <param name="vector"></param>
            <summary>
            Set shader 2D vector constant.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetShaderParameter(Urho.StringHash,Urho.Vector3)">
            <param name="param"></param>
            <param name="vector"></param>
            <summary>
            Set shader 3D vector constant.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetShaderParameter(Urho.StringHash,Urho.Vector4)">
            <param name="param"></param>
            <param name="vector"></param>
            <summary>
            Set shader 4D vector constant.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetShaderParameter(Urho.StringHash,System.Single*,System.UInt32)">
            <param name="param"></param>
            <param name="data"></param>
            <param name="count"></param>
            <summary>
            Set shader float constants.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetShaders(Urho.ShaderVariation,Urho.ShaderVariation)">
            <param name="vs"></param>
            <param name="ps"></param>
            <summary>
            Set shaders.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetStencilTest(System.Boolean,Urho.CompareMode,Urho.StencilOp,Urho.StencilOp,Urho.StencilOp,System.UInt32,System.UInt32,System.UInt32)">
            <param name="enable"></param>
            <param name="mode"></param>
            <param name="pass"></param>
            <param name="fail"></param>
            <param name="zFail"></param>
            <param name="stencilRef"></param>
            <param name="compareMask"></param>
            <param name="writeMask"></param>
            <summary>
            Set stencil test.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetTexture(System.UInt32,Urho.Texture)">
            <param name="index"></param>
            <param name="texture"></param>
            <summary>
            Set texture.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetTextureForUpdate(Urho.Texture)">
            <param name="texture"></param>
            <summary>
            Bind texture unit 0 for update. Called by Texture.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetTextureParametersDirty">
            <summary>
            Dirty texture parameters of all textures (when global settings change.)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetUBO(System.UInt32)">
            <param name="object"></param>
            <summary>
            Bind a UBO, avoiding redundant operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetVBO(System.UInt32)">
            <param name="object"></param>
            <summary>
            Bind a VBO, avoiding redundant operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetVertexBuffer(Urho.VertexBuffer)">
            <param name="buffer"></param>
            <summary>
            Set vertex buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetViewport(Urho.IntRect)">
            <param name="rect"></param>
            <summary>
            Set viewport.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetWindowIcon(Urho.Image)">
            <param name="windowIcon"></param>
            <summary>
            Set window icon.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetWindowPosition(Urho.IntVector2)">
            <param name="position"></param>
            <summary>
            Set window position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.SetWindowPosition(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set window position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.ShaderProgram">
            <summary>
            Return shader program.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.ShadowMapFormat">
            <summary>
            Return shadow map depth texture format, or 0 if not supported.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.SRGB">
            <summary>
            Return whether the main window is using sRGB conversion on write.
            Or
            Set whether the main window uses sRGB conversion on write.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.SRGBSupport">
            <summary>
            Return whether sRGB conversion on texture sampling is supported.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.SRGBWriteSupport">
            <summary>
            Return whether sRGB conversion on rendertarget writing is supported.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.StencilCompareMask">
            <summary>
            Return stencil compare bitmask.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.StencilFail">
            <summary>
            Return stencil operation to do if stencil test fails.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.StencilPass">
            <summary>
            Return stencil operation to do if stencil test passes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.StencilRef">
            <summary>
            Return stencil reference value.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.StencilTest">
            <summary>
            Return whether stencil test is enabled.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.StencilTestMode">
            <summary>
            Return stencil compare mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.StencilWriteMask">
            <summary>
            Return stencil write bitmask.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.StencilZFail">
            <summary>
            Return stencil operation to do if depth compare fails.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.TextureAnisotropy">
            <summary>
            Return texture anisotropy.
            Or
            Set texture anisotropy.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.ToggleFullscreen">
            <summary>
            Toggle between full screen and windowed mode. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.TripleBuffer">
            <summary>
            Return whether triple buffering is enabled.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Graphics.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Graphics.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Graphics.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.UseClipPlane">
            <summary>
            Return whether a custom clipping plane is in use.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.VertexShader">
            <summary>
            Return vertex shader.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.Viewport">
            <summary>
            Return the viewport coordinates.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.VSync">
            <summary>
            Return whether vertical sync is on.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.Width">
            <summary>
            Return window width.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.WindowMoved">
            <summary>
            Window was moved through user interaction. Called by Input subsystem.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.WindowPosition">
            <summary>
            Return window position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Graphics.WindowResized">
            <summary>
            Window was resized through user interaction. Called by Input subsystem.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Graphics.WindowTitle">
            <summary>
            Return window title.
            Or
            Set window title.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.GraphicsImpl">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.HashIteratorBase">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Hide">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Hide">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Hide.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Hide.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.HideState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.HideState(Urho.Hide,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.HighlightMode">
            <summary>
            %ListView selection highlight mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.HighlightMode.Always">
            <summary></summary>
        </member>
        <member name="F:Urho.HighlightMode.Focus">
            <summary></summary>
        </member>
        <member name="F:Urho.HighlightMode.Never">
            <summary></summary>
        </member>
        <member name="T:Urho.HorizontalAlignment">
            <summary>
            %UI element horizontal alignment.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.HorizontalAlignment.Center">
            <summary></summary>
        </member>
        <member name="F:Urho.HorizontalAlignment.Left">
            <summary></summary>
        </member>
        <member name="F:Urho.HorizontalAlignment.Right">
            <summary></summary>
        </member>
        <member name="T:Urho.HoverBeginEventArgs">
            <summary>Event arguments for the UIElement's HoverBegin event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.HoverBeginEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.HoverBeginEventArgs.ElementX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.HoverBeginEventArgs.ElementY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.HoverBeginEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.HoverBeginEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.HoverEndEventArgs">
            <summary>Event arguments for the UIElement's HoverEnd event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.HoverEndEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.HttpRequest">
            <summary>
            An HTTP connection with response data stream.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.HttpRequest(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of HttpRequest, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.HttpRequest(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.HttpRequest.AvailableSize">
            <summary>
            Return amount of bytes in the read buffer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.HttpRequest.Error">
            <summary>
            Return error. Only non-empty in the error state.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.HttpRequest.IsOpen">
            <summary>
            Return whether connection is in the open state.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.HttpRequest.Read(System.IntPtr,System.UInt32)">
            <param name="dest"></param>
            <param name="size"></param>
            <summary>
            Read response data from the HTTP connection and return number of bytes actually read. While the connection is open, will block while trying to read the specified size. To avoid blocking, only read up to as many bytes as GetAvailableSize() returns.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.HttpRequest.Seek(System.UInt32)">
            <param name="position"></param>
            <summary>
            Set position from the beginning of the stream. Not supported.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.HttpRequest.State">
            <summary>
            Return connection state.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.HttpRequest.ThreadFunction">
            <summary>
            Process the connection in the worker thread until closed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.HttpRequest.URL">
            <summary>
            Return URL used in the request.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.HttpRequest.Verb">
            <summary>
            Return verb used in the request. Default GET if empty verb specified on construction.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.HttpRequestState">
            <summary>
            HTTP connection state
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.HttpRequestState.Closed">
            <summary></summary>
        </member>
        <member name="F:Urho.HttpRequestState.Error">
            <summary></summary>
        </member>
        <member name="F:Urho.HttpRequestState.Initializing">
            <summary></summary>
        </member>
        <member name="F:Urho.HttpRequestState.Open">
            <summary></summary>
        </member>
        <member name="T:Urho.IActionTweenDelegate">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IActionTweenDelegate.UpdateTweenAction(System.Single,System.String)">
            <param name="value"></param>
            <param name="key"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.IComponentDeserializer">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IComponentDeserializer.Deserialize``1(System.String)">
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.IComponentSerializer">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IComponentSerializer.Serialize(System.String,System.Object)">
            <param name="key"></param>
            <param name="value"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.IDeserializer">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.IDeserializer.Handle">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Image">
            <summary>
            %Image resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Image(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Image, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Image(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Image that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Image attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Image(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Image.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Image.Clear(Urho.Color)">
            <param name="color"></param>
            <summary>
            Clear the image with a color.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.ClearInt(System.UInt32)">
            <param name="uintColor"></param>
            <summary>
            Clear the image with an integer color. R component is in the 8 lowest bits.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Image.Components">
            <summary>
            Return number of color components.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Image.CompressedFormat">
            <summary>
            Return compressed format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.ConvertToRGBA">
            <summary>
            Return image converted to 4-component (RGBA) to circumvent modern rendering API's not supporting e.g. the luminance-alpha format.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Image.Data">
            <summary>
            Return pixel data.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Image.Depth">
            <summary>
            Return depth.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.FlipHorizontal">
            <summary>
            Flip image horizontally. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.FlipVertical">
            <summary>
            Flip image vertically. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.GetCompressedLevel(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return a compressed mip level.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.GetPixel(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Return a 2D pixel color.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.GetPixel(System.Int32,System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <summary>
            Return a 3D pixel color.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.GetPixelBilinear(System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Return a bilinearly sampled 2D pixel color. X and Y have the range 0-1.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.GetPixelInt(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Return a 2D pixel integer color. R component is in the 8 lowest bits.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.GetPixelInt(System.Int32,System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <summary>
            Return a 3D pixel integer color. R component is in the 8 lowest bits.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.GetPixelTrilinear(System.Single,System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <summary>
            Return a trilinearly sampled 3D pixel color. X, Y and Z have the range 0-1.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.GetSubimage(Urho.IntRect)">
            <param name="rect"></param>
            <summary>
            Return subimage from the image by the defined rect or null if failed. 3D images are not supported. You must free the subimage yourself.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Image.Height">
            <summary>
            Return height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.IsArray">
            <summary>
            Whether this texture has been detected as a volume, only relevant for DDS.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.IsCompressed">
            <summary>
            Return whether is compressed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.IsCubemap">
            <summary>
            Whether this texture is detected as a cubemap, only relevant for DDS.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.IsSRGB">
            <summary>
            Whether this texture is in sRGB, only relevant for DDS.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Image.NextLevel">
            <summary>
            Return next mip level by bilinear filtering.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Image.NextSibling">
            <summary>
            Return the next sibling image of an array or cubemap.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Image.NumCompressedLevels">
            <summary>
            Return number of compressed mip levels.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.PrecalculateLevels">
            <summary>
            Precalculate the mip levels. Used by asynchronous texture loading.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.Resize(System.Int32,System.Int32)">
            <param name="width"></param>
            <param name="height"></param>
            <summary>
            Resize image by bilinear resampling. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.SaveBMP(System.String)">
            <param name="fileName"></param>
            <summary>
            Save in BMP format. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.SaveJPG(System.String,System.Int32)">
            <param name="fileName"></param>
            <param name="quality"></param>
            <summary>
            Save in JPG format with compression quality. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.SavePNG(System.String)">
            <param name="fileName"></param>
            <summary>
            Save in PNG format. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.SaveTGA(System.String)">
            <param name="fileName"></param>
            <summary>
            Save in TGA format. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.SetData(System.Byte*)">
            <param name="pixelData"></param>
            <summary>
            Set new image data.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.SetPixel(System.Int32,System.Int32,Urho.Color)">
            <param name="x"></param>
            <param name="y"></param>
            <param name="color"></param>
            <summary>
            Set a 2D pixel.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.SetPixel(System.Int32,System.Int32,System.Int32,Urho.Color)">
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="color"></param>
            <summary>
            Set a 3D pixel.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.SetPixelInt(System.Int32,System.Int32,System.UInt32)">
            <param name="x"></param>
            <param name="y"></param>
            <param name="uintColor"></param>
            <summary>
            Set a 2D pixel with an integer color. R component is in the 8 lowest bits.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.SetPixelInt(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="uintColor"></param>
            <summary>
            Set a 3D pixel with an integer color. R component is in the 8 lowest bits.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.SetSize(System.Int32,System.Int32,System.UInt32)">
            <param name="width"></param>
            <param name="height"></param>
            <param name="components"></param>
            <summary>
            Set 2D size and number of color components. Old image data will be destroyed and new data is undefined. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Image.SetSize(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <param name="width"></param>
            <param name="height"></param>
            <param name="depth"></param>
            <param name="components"></param>
            <summary>
            Set 3D size and number of color components. Old image data will be destroyed and new data is undefined. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Image.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Image.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Image.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Image.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Image.Width">
            <summary>
            Return width.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.IndexBuffer">
            <summary>
            Hardware index buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.IndexBuffer(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of IndexBuffer, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.IndexBuffer(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.IndexBuffer(Urho.Context,System.Boolean)">
            <param name="context">The context that this object will be attached to.</param>
            <param name="forceHeadless"></param>
            <summary>Creates an instance of IndexBuffer that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of IndexBuffer attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="P:Urho.IndexBuffer.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.IndexBuffer.IndexCount">
            <summary>
            Return number of indices.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.IndexBuffer.IndexSize">
            <summary>
            Return index size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.IsDynamic">
            <summary>
            Return whether is dynamic.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.IsLocked">
            <summary>
            Return whether is currently locked.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.IsShadowed">
            <summary>
            Return whether CPU memory shadowing is enabled.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.Lock(System.UInt32,System.UInt32,System.Boolean)">
            <param name="start"></param>
            <param name="count"></param>
            <param name="discard"></param>
            <summary>
            Lock the buffer for write-only editing. Return data pointer if successful. Optionally discard data outside the range.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.OnDeviceReset">
            <summary>
            Recreate the GPU resource and restore data if applicable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.Release">
            <summary>
            Release the buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.SetData(System.Int16[])">
            <param name="vertexData"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.SetData(System.Void*)">
            <param name="data"></param>
            <summary>
            Set all data in the buffer.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.SetDataRange(System.Void*,System.UInt32,System.UInt32,System.Boolean)">
            <param name="data"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="discard"></param>
            <summary>
            Set a data range in the buffer. Optionally discard data outside the range.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.SetShadowed(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Enable shadowing in CPU memory. Shadowing is forced on if the graphics subsystem does not exist.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.SetSize(System.UInt32,System.Boolean,System.Boolean)">
            <param name="indexCount"></param>
            <param name="largeIndices"></param>
            <param name="dynamic"></param>
            <summary>
            Set buffer size and dynamic mode. Previous data will be lost.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.IndexBuffer.ShadowData">
            <summary>
            Return CPU memory shadow data.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.IndexBuffer.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.IndexBuffer.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.IndexBuffer.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.IndexBuffer.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IndexBuffer.Unlock">
            <summary>
            Unlock the buffer and apply changes to the GPU buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Input">
            <summary>
            Input subsystem. Converts operating system window messages to input state and events.
            </summary>
            <remarks>
                <para>The Input subsystem provides keyboard, mouse, joystick and touch input both via a polled interface and events. This subsystem is also used for querying whether the application window has input focus or is minimized.</para>
                <para>The subsystem is always instantiated, even in headless mode, but is active only once the application window has been created. Once active, the subsystem takes over the operating system mouse cursor. It will be hidden by default, so the <see cref="T:Urho.UI" /> should be used to render a software cursor if necessary. For editor-like applications the operating system cursor can be made visible by calling <see cref="M:Urho.Input.SetMouseVisible" />.</para>
                <para>You can subscribe to these events by using one of the SubscribeToXxx methods in UrhoObject:</para>
                <list type="bullet">
                    <item>
                        <term>MouseButtonUp: a mouse button was released.</term>
                    </item>
                    <item>
                        <term>MouseButtonDown: a mouse button was pressed.</term>
                    </item>
                    <item>
                        <term>MouseMove: the mouse moved.</term>
                    </item>
                    <item>
                        <term>MouseWheel: the mouse wheel moved.</term>
                    </item>
                    <item>
                        <term>KeyUp: a key was released.</term>
                    </item>
                    <item>
                        <term>KeyDown: a key was pressed.</term>
                    </item>
                    <item>
                        <term>TextInput: a string of translated text input in UTF8 format. May contain a single character or several.</term>
                    </item>
                    <item>
                        <term>JoystickConnected: a joystick was plugged in.</term>
                    </item>
                    <item>
                        <term>JoystickDisconnected: a joystick was disconnected.</term>
                    </item>
                    <item>
                        <term>JoystickButtonDown: a joystick button was pressed.</term>
                    </item>
                    <item>
                        <term>JoystickButtonUp: a joystick button was released.</term>
                    </item>
                    <item>
                        <term>JoystickAxisMove: a joystick axis was moved.</term>
                    </item>
                    <item>
                        <term>JoystickHatMove: a joystick POV hat was moved.</term>
                    </item>
                    <item>
                        <term>TouchBegin: a finger touched the screen.</term>
                    </item>
                    <item>
                        <term>TouchEnd: a finger was lifted from the screen.</term>
                    </item>
                    <item>
                        <term>TouchMove: a finger moved on the screen.</term>
                    </item>
                    <item>
                        <term>GestureRecorded : recording a touch gesture is complete.</term>
                    </item>
                    <item>
                        <term>GestureInput : a touch gesture was recognized.</term>
                    </item>
                    <item>
                        <term>MultiGesture : a multi-finger pinch/rotation touch gesture is underway.</term>
                    </item>
                    <item>
                        <term>DropFile : a file was drag-dropped on the application window.</term>
                    </item>
                    <item>
                        <term>InputFocus : application input focus or window minimization state changed.</term>
                    </item>
                    <item>
                        <term>MouseVisibleChanged : the visibility of the operating system mouse cursor was changed.</term>
                    </item>
                    <item>
                        <term>ExitRequested : application exit was requested (eg. with the window close button.)</term>
                    </item>
                </list>
                <para />
                <format type="text/html">
                    <h2>Keyboard and Mouse Input</h2>
                </format>
                <para />
                <para>Key events include both the symbolic keycode ("Key") that depends on the keyboard layout, the layout- and operating system-independent SDL scancode ("Scancode"), and the true operating system-specific raw keycode ("Raw").</para>
                <para>The input polling API differentiates between the initiation of a key/mouse button press, and holding the key or button down.  <see cref="M:Urho.Input.GetKeyPress" /> and <see cref="M:Urho.Input.GetMouseButtonPress" /> return true only for one frame (the initiation) while <see cref="M:Urho.Input.GetKeyDown" /> and <see cref="M:Urho.Input.GetMouseButtonDown" /> return true as long as the key or button is held down. To check whether keys are down or pressed by scancode, use <see cref="M:Urho.Input.GetScancodeDown" /> and <see cref="M:Urho.Input.GetScancodePress" />. Functions also exist for converting keycodes to scancodes or vice versa, or getting key names. See for example <see cref="M:Urho.Input.GetKeyName" /> and <see cref="M:Urho.Input.GetKeyFromScancode" />.</para>
                <para>Mouse motion since the last frame can be accessed with <see cref="M:Urho.Input.GetMouseMove" />. The cursor position within the window can be queried with <see cref="M:Urho.Input.GetMousePosition" />.</para>
                <para />
                <format type="text/html">
                    <h2>Mouse modes</h2>
                </format>
                <para>The operating system mouse cursor can be used in four modes which can be switched with <see cref="P:Urho.Input.MouseMode" />:</para>
                <list type="bullet">
                    <item>
                        <term>Absolute: is the default behaviour, allowing the toggling of operating system cursor visibility and allowing the cursor to escape the window when visible. When the operating system cursor is invisible in absolute mouse mode, the mouse is confined to the window. If the operating system and UI cursors are both invisible, interaction with the user interface will be limited (for example, drag move and drag end events will not trigger).    Setting this value to Absolute will call SetMouseGrabbed(false).</term>
                    </item>
                </list>
                <list type="bullet">
                    <item>
                        <term>Relative: sets the operating system cursor to invisible and confines the cursor to the window. The operating system cursor cannot be set to be visible in this mode via SetMouseVisible(), however changes are tracked and will be restored when another mouse mode is set. When the virtual cursor is also invisible, UI interaction will still function as normal (eg: drag events will trigger). Setting this will call SetMouseGrabbed(true).</term>
                    </item>
                </list>
                <para />
                <list type="bullet">
                    <item>
                        <term>Wrap: grabs the mouse from the operating system and confines the operating system cursor to the window, wrapping the cursor when it is near the edges. Setting this will call SetMouseGrabbed(true).</term>
                    </item>
                </list>
                <list type="bullet">
                    <item>
                        <term>Free: does not grab/confine the mouse cursor even when it is hidden. This can be used for cases where the cursor should render using the operating system outside the window, and perform custom rendering (with SetMouseVisible(false)) inside.</term>
                    </item>
                </list>
                <para />
                <format type="text/html">
                    <h2>Joystick input</h2>
                </format>
                <para>Plugged in joysticks will begin sending input events automatically. Each joystick will be assigned a joystick ID which will be used in subsequent joystick events, as well as for retrieving the joystick state. Use <see cref="M:Urho.Input.GetJoystick" /> to retrieve the joystick state by ID. In case you do not have the ID, you can also use <see cref="M:Urho.Input.GetJoystickByIndex" /> which uses a zero-based index; see <see cref="P:Urho.Input.NumJoystick" /> for the number of currently connected joysticks. The ID, as well as the joystick name, can be looked up from the joystick state.</para>
                <para>If the joystick model is recognized by SDL as a game controller the buttons and axes mappings utilize known constants such as CONTROLLER_BUTTON_A or CONTROLLER_AXIS_LEFTX without having to guess them. Use <see cref="IsController()" /> to distinguish between a game controller and an unrecognized joystick.</para>
                <para />
                <para>On platforms that support the accelerometer, it will appear as a "virtual" joystick.</para>
                <para />
                <format type="text/html">
                    <h2>Touch input</h2>
                </format>
                <para>On platforms where touch input is available, touch begin/end/move events will be sent, as well as multi-gesture events with pinch/rotation delta values when more than one finger is pressed down. The current finger touches can also be accessed via a polling API: <see cref="P:Urho.Input.NumTouches" /> and <see cref="M:Urho.Input.GetTouch." /></para>
                <para>Touch gestures can be recorded using SDL's inbuilt $1 gesture recognition system. Use <see cref="M:Urho.Input.RecordGesture" /> to start recording. The following finger movements will be recorded until the finger is lifted, at which point the recording ends and the GestureRecorded event is sent with the hash ID of the new gesture. The current in-memory gesture(s) can be saved or loaded as binary data.</para>
                <para />
                <para>Whenever a recognized gesture is entered by the user, the GestureInput event will be sent. In addition to the ID of the best matched gesture, it contains the center position and an error metric (lower = better) to help filter out false gestures.</para>
                <para>Note that all recorded (whether saved or not) and loaded gestures are held in-memory. Two additional functions are available to clear them: <see cref="M:Urho.Input.RemoveGesture" /> to selectively clear a gesture by its ID and <see cref="M:Urho.Input.RemoveAllGestures" /> to clear them all.</para>
                <para>Touch input can also emulate a virtual joystick by displaying on-screen buttons. See the function <see cref="M:Urho.Input.AddScreenJoystick" />.</para>
                <para>Touch emulation can be used to test mobile applications on a desktop machine without a touch screen. See <see cref="P:Urho.Input.TouchEmulation" />. When touch emulation is enabled, actual mouse events are no longer sent and the operating system mouse cursor is forced visible. The left mouse button acts as a moving finger, while the rest of the mouse buttons act as stationary fingers for multi-finger gestures. For example pressing down both left and right mouse buttons, then dragging the mouse with the buttons still pressed would emulate a two-finger pinch zoom-in gesture.</para>
                <para />
                <format type="text/html">
                    <h2>Platform-specific details</h2>
                </format>
                <para>On platforms that support it (such as Android) an on-screen virtual keyboard can be shown or hidden. When shown, keypresses from the virtual keyboard will be sent as text input events just as if typed from an actual keyboard. Show or hide it by calling <see cref="S" />etScreenKeyboardVisible. The <see cref="T:Urho.UI" /> subsystem can also automatically show the virtual keyboard when a line editing element is focused, and hide it when defocused. This behavior can be controlled by calling SetUseScreenKeyboard.</para>
                <para>On Windows the user must first touch the screen once before touch input is activated. Trying to record or load touch gestures will fail before that.</para>
            </remarks>
        </member>
        <member name="C:Urho.Input(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Input, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Input(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Input that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Input attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Input(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Input.AddScreenJoystick(Urho.XmlFile,Urho.XmlFile)">
            <param name="layoutFile"></param>
            <param name="styleFile"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Input.GetJoystick(System.Int32)">
            <param name="id"></param>
            <summary>
            Return joystick state by ID, or null if does not exist.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetJoystickByIndex(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return joystick state by index, or null if does not exist. 0 = first connected joystick.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetKeyDown(Urho.Key)">
            <param name="key"></param>
            <summary>
            Check if a key is held down.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetKeyFromName(System.String)">
            <param name="name"></param>
            <summary>
            Return keycode from key name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetKeyFromScancode(System.Int32)">
            <param name="scancode"></param>
            <summary>
            Return keycode from scancode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetKeyName(Urho.Key)">
            <param name="key"></param>
            <summary>
            Return name of key from keycode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetKeyPress(Urho.Key)">
            <param name="key"></param>
            <summary>
            Check if a key has been pressed on this frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetMouseButtonDown(Urho.MouseButton)">
            <param name="button"></param>
            <summary>
            Check if a mouse button is held down.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetMouseButtonPress(Urho.MouseButton)">
            <param name="button"></param>
            <summary>
            Check if a mouse button has been pressed on this frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetQualifierDown(System.Int32)">
            <param name="qualifier"></param>
            <summary>
            Check if a qualifier key is held down.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetQualifierPress(System.Int32)">
            <param name="qualifier"></param>
            <summary>
            Check if a qualifier key has been pressed on this frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetScancodeDown(System.Int32)">
            <param name="scancode"></param>
            <summary>
            Check if a key is held down by scancode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetScancodeFromKey(Urho.Key)">
            <param name="key"></param>
            <summary>
            Return scancode from keycode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetScancodeFromName(System.String)">
            <param name="name"></param>
            <summary>
            Return scancode from key name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetScancodeName(System.Int32)">
            <param name="scancode"></param>
            <summary>
            Return name of key from scancode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetScancodePress(System.Int32)">
            <param name="scancode"></param>
            <summary>
            Check if a key has been pressed on this frame by scancode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.GetTouch(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return active finger touch by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.HasFocus">
            <summary>
            Return whether application window has input focus.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.IsMinimized">
            <summary>
            Return whether application window is minimized.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.IsMouseGrabbed">
            <summary>
            Return whether the mouse is currently being grabbed by an operation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.IsMouseVisible">
            <summary>
            Return whether the operating system mouse cursor is visible.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.IsScreenJoystickVisible(System.Int32)">
            <param name="id"></param>
            <summary>
            Return whether a virtual joystick is visible.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.IsScreenKeyboardVisible">
            <summary>
            Return whether on-screen keyboard is being shown.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.MouseMode">
            <summary>
            Return the mouse mode.
            Or
            Set the mouse mode. </summary>
            <value>
                <para />
            </value>
            <remarks>
                <para>See the <see cref="T:Urho.MouseMode" /> enumeration for detais on the meaning of the MouseMode.</para>
            </remarks>
        </member>
        <member name="P:Urho.Input.MouseMove">
            <summary>
            Return mouse movement since last frame.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.MouseMoveWheel">
            <summary>
            Return mouse wheel movement since last frame.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.MouseMoveX">
            <summary>
            Return horizontal mouse movement since last frame.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.MouseMoveY">
            <summary>
            Return vertical mouse movement since last frame.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.MousePosition">
            <summary>
            Return mouse position within window. Should only be used with a visible mouse cursor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.NumJoysticks">
            <summary>
            Return number of connected joysticks.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.NumTouches">
            <summary>
            Return number of active finger touches.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.Qualifiers">
            <summary>
            Return the currently held down qualifiers.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.RecordGesture">
            <summary>
            Begin recording a touch gesture. Return true if successful. The E_GESTURERECORDED event (which contains the ID for the new gesture) will be sent when recording finishes.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.RemoveAllGestures">
            <summary>
            Remove all in-memory gestures.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.RemoveGesture(System.UInt32)">
            <param name="gestureID"></param>
            <summary>
            Remove an in-memory gesture by ID. Return true if was found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.RemoveScreenJoystick(System.Int32)">
            <param name="id"></param>
            <summary>
            Remove screen joystick by instance ID.
            Return true if successful.
            This method should only be called in main thread.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.ResetMouseVisible">
            <summary>
            Reset last mouse visibility that was not suppressed in SetMouseVisible.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.ScreenKeyboardSupport">
            <summary>
            Return whether on-screen keyboard is supported.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.SetMouseGrabbed(System.Boolean)">
            <param name="grab"></param>
            <summary>
            Set whether the mouse is currently being grabbed by an operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.SetMouseVisible(System.Boolean,System.Boolean)">
            <param name="enable"></param>
            <param name="suppressEvent"></param>
            <summary>
            Set whether the operating system mouse cursor is visible. When not visible (default), is kept centered to prevent leaving the window. Mouse visibility event can be suppressed-- this also recalls any unsuppressed SetMouseVisible which can be returned by ResetMouseVisible().
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.SetScreenJoystickVisible(System.Int32,System.Boolean)">
            <param name="id"></param>
            <param name="enable"></param>
            <summary>
            Set whether the virtual joystick is visible.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.SetScreenKeyboardVisible(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Show or hide on-screen keyboard on platforms that support it. When shown, keypresses from it are delivered as key events.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.SubscribeToDropFile(System.Action{Urho.DropFileEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the DropFile event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToExitRequested(System.Action{Urho.ExitRequestedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ExitRequested event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToGestureInput(System.Action{Urho.GestureInputEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the GestureInput event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToGestureRecorded(System.Action{Urho.GestureRecordedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the GestureRecorded event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToInputFocus(System.Action{Urho.InputFocusEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the InputFocus event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToJoystickAxisMove(System.Action{Urho.JoystickAxisMoveEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the JoystickAxisMove event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToJoystickButtonDown(System.Action{Urho.JoystickButtonDownEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the JoystickButtonDown event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToJoystickButtonUp(System.Action{Urho.JoystickButtonUpEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the JoystickButtonUp event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToJoystickConnected(System.Action{Urho.JoystickConnectedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the JoystickConnected event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToJoystickDisconnected(System.Action{Urho.JoystickDisconnectedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the JoystickDisconnected event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToJoystickHatMove(System.Action{Urho.JoystickHatMoveEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the JoystickHatMove event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToKeyDown(System.Action{Urho.KeyDownEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the KeyDown event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToKeyUp(System.Action{Urho.KeyUpEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the KeyUp event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToMouseButtonDown(System.Action{Urho.MouseButtonDownEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the MouseButtonDown event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToMouseButtonUp(System.Action{Urho.MouseButtonUpEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the MouseButtonUp event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToMouseModeChanged(System.Action{Urho.MouseModeChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the MouseModeChanged event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToMouseMove(System.Action{Urho.MouseMoveEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the MouseMove event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToMouseVisibleChanged(System.Action{Urho.MouseVisibleChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the MouseVisibleChanged event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToMouseWheel(System.Action{Urho.MouseWheelEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the MouseWheel event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToMultiGesture(System.Action{Urho.MultiGestureEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the MultiGesture event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToTextInput(System.Action{Urho.TextInputEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the TextInput event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToTouchBegin(System.Action{Urho.TouchBeginEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the TouchBegin event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToTouchEnd(System.Action{Urho.TouchEndEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the TouchEnd event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Input.SubscribeToTouchMove(System.Action{Urho.TouchMoveEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the TouchMove event raised by the Input.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Input.ToggleFullscreen">
            <summary>
            Return whether fullscreen toggle is enabled.
            Or
            Set whether ALT-ENTER fullscreen toggle is enabled.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.TouchEmulation">
            <summary>
            Return whether touch emulation is enabled.
            Or
            Set touch emulation by mouse. Only available on desktop platforms. When enabled, actual mouse events are no longer sent and the mouse cursor is forced visible.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.TryGetJoystickState(System.UInt32,Urho.JoystickState@)">
            <param name="idx"></param>
            <param name="state"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Input.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Input.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Input.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Input.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Input.Update">
            <summary>
            Poll for window messages. Called by HandleBeginFrame().
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.InputFocusEventArgs">
            <summary>Event arguments for the Input's InputFocus event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.InputFocusEventArgs.Focus">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.InputFocusEventArgs.Minimized">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.InterceptNetworkUpdateEventArgs">
            <summary>Event arguments for the Serializable's InterceptNetworkUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.InterceptNetworkUpdateEventArgs.Index">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.InterceptNetworkUpdateEventArgs.Name">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.InterceptNetworkUpdateEventArgs.Serializable">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.InterceptNetworkUpdateEventArgs.TimeStamp">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.InterceptNetworkUpdateEventArgs.Value">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.InterpMethod">
            <summary>
            Interpolation method.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.InterpMethod.Linear">
            <summary></summary>
        </member>
        <member name="F:Urho.InterpMethod.Spline">
            <summary></summary>
        </member>
        <member name="T:Urho.InterpolationMode">
            <summary>
            Bezier interpolation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.InterpolationMode.BezierCurve">
            <summary></summary>
        </member>
        <member name="F:Urho.InterpolationMode.CatmullRomCurve">
            <summary></summary>
        </member>
        <member name="F:Urho.InterpolationMode.CatmullRomFullCurve">
            <summary></summary>
        </member>
        <member name="F:Urho.InterpolationMode.LinearCurve">
            <summary></summary>
        </member>
        <member name="T:Urho.Intersection">
            <summary>
            Intersection test result.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Intersection.Inside">
            <summary></summary>
        </member>
        <member name="F:Urho.Intersection.Intersects">
            <summary></summary>
        </member>
        <member name="F:Urho.Intersection.Outside">
            <summary></summary>
        </member>
        <member name="T:Urho.IntRect">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.IntRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.IntRect.Bottom">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.IntRect.Left">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.IntRect.Right">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.IntRect.Top">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.IntVector2">
            <summary>Represents a 2D vector using two single-precision inting-point numbers.</summary>
            <remarks>
            The IntVector2 structure is suitable for interoperation with unmanaged code requiring two consecutive ints.
            </remarks>
        </member>
        <member name="C:Urho.IntVector2(Urho.IntVector2)">
            <param name="v">The IntVector2 to copy components from.</param>
            <summary>
            Constructs a new IntVector2 from the given IntVector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.IntVector2(Urho.Vector2)">
            <param name="v">The IntVector2 to copy components from.</param>
            <summary>
            Constructs a new IntVector2 from the given Vector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.IntVector2(System.Int32,System.Int32)">
            <param name="x">The x coordinate of the net IntVector2.</param>
            <param name="y">The y coordinate of the net IntVector2.</param>
            <summary>
            Constructs a new IntVector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Add(Urho.IntVector2)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Add(Urho.IntVector2@)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Add(Urho.IntVector2,Urho.IntVector2)">
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <summary>
            Adds two vectors.
            </summary>
            <returns>Result of operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Add(Urho.IntVector2@,Urho.IntVector2@,Urho.IntVector2@)">
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
            <summary>
            Adds two vectors.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.BaryCentric(Urho.IntVector2,Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32)">
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.BaryCentric(Urho.IntVector2@,Urho.IntVector2@,Urho.IntVector2@,System.Int32,System.Int32,Urho.IntVector2@)">
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Clamp(Urho.IntVector2,Urho.IntVector2,Urho.IntVector2)">
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <returns>The clamped vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Clamp(Urho.IntVector2@,Urho.IntVector2@,Urho.IntVector2@,Urho.IntVector2@)">
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.ComponentMax(Urho.IntVector2,Urho.IntVector2)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <returns>The component-wise maximum</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.ComponentMax(Urho.IntVector2@,Urho.IntVector2@,Urho.IntVector2@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.ComponentMin(Urho.IntVector2,Urho.IntVector2)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <returns>The component-wise minimum</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.ComponentMin(Urho.IntVector2@,Urho.IntVector2@,Urho.IntVector2@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Div(System.Int32)">
            <param name="f">Scalar operand.</param>
            <summary>Divide this instance by a scalar.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Divide(Urho.IntVector2,System.Int32)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Divides a vector by a scalar.
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Divide(Urho.IntVector2,Urho.IntVector2)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Divide(Urho.IntVector2@,System.Int32,Urho.IntVector2@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Divides a vector by a scalar.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Divide(Urho.IntVector2@,Urho.IntVector2@,Urho.IntVector2@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Dot(Urho.IntVector2,Urho.IntVector2)">
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <returns>The dot product of the two inputs</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Dot(Urho.IntVector2@,Urho.IntVector2@,System.Int32@)">
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Equals(System.Object)">
            <param name="obj">The object to compare to.</param>
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>True if the instances are equal; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Equals(Urho.IntVector2)">
            <param name="other">A vector to compare with this vector.</param>
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.IntVector2.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <value></value>
            <remarks></remarks>
            <see cref="P:Urho.IntVector2.LengthFast" />
            <altmember cref="P:Urho.IntVector2.LengthSquared" />
        </member>
        <member name="P:Urho.IntVector2.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <value></value>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:Urho.IntVector2.Length" />
            <altmember cref="P:Urho.IntVector2.LengthSquared" />
        </member>
        <member name="P:Urho.IntVector2.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <value></value>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:Urho.IntVector2.Length" />
            <altmember cref="P:Urho.IntVector2.LengthFast" />
        </member>
        <member name="M:Urho.IntVector2.Lerp(Urho.IntVector2,Urho.IntVector2,System.Int32)">
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Lerp(Urho.IntVector2@,Urho.IntVector2@,System.Int32,Urho.IntVector2@)">
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Max(Urho.IntVector2,Urho.IntVector2)">
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <returns>The minimum Vector3</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Min(Urho.IntVector2,Urho.IntVector2)">
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <returns>The minimum Vector3</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Mult(System.Int32)">
            <param name="f">Scalar operand.</param>
            <summary>Multiply this instance by a scalar.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Multiply(Urho.IntVector2,System.Int32)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Multiply(Urho.IntVector2,Urho.IntVector2)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Multiply(Urho.IntVector2@,System.Int32,Urho.IntVector2@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Multiply(Urho.IntVector2@,Urho.IntVector2@,Urho.IntVector2@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Normalize">
            <summary>
            Scales the IntVector2 to unit length.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Normalize(Urho.IntVector2)">
            <param name="vec">The input vector</param>
            <summary>
            Scale a vector to unit length
            </summary>
            <returns>The normalized vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Normalize(Urho.IntVector2@,Urho.IntVector2@)">
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
            <summary>
            Scale a vector to unit length
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.NormalizeFast">
            <summary>
            Scales the IntVector2 to approximately unit length.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.NormalizeFast(Urho.IntVector2)">
            <param name="vec">The input vector</param>
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <returns>The normalized vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.NormalizeFast(Urho.IntVector2@,Urho.IntVector2@)">
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.IntVector2.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.op_Addition(Urho.IntVector2,Urho.IntVector2)">
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <summary>
            Adds the specified instances.
            </summary>
            <returns>Result of addition.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.op_Division(Urho.IntVector2,System.Int32)">
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <summary>
            Divides the specified instance by a scalar.
            </summary>
            <returns>Result of the division.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.op_Equality(Urho.IntVector2,Urho.IntVector2)">
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <summary>
            Compares the specified instances for equality.
            </summary>
            <returns>True if both instances are equal; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.op_Inequality(Urho.IntVector2,Urho.IntVector2)">
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <summary>
            Compares the specified instances for inequality.
            </summary>
            <returns>True if both instances are not equal; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.op_Multiply(System.Int32,Urho.IntVector2)">
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <returns>Result of multiplication.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.op_Multiply(Urho.IntVector2,System.Int32)">
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <returns>Result of multiplication.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.op_Subtraction(Urho.IntVector2,Urho.IntVector2)">
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <summary>
            Subtracts the specified instances.
            </summary>
            <returns>Result of subtraction.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.op_UnaryNegation(Urho.IntVector2)">
            <param name="vec">Operand.</param>
            <summary>
            Negates the specified instance.
            </summary>
            <returns>Result of negation.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.IntVector2.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.IntVector2.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Scale(Urho.IntVector2)">
            <param name="scale">The scaling of the individual components.</param>
            <summary>Scales this instance by the given parameter.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Scale(Urho.IntVector2@)">
            <param name="scale">The scaling of the individual components.</param>
            <summary>Scales this instance by the given parameter.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Scale(System.Int32,System.Int32)">
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <summary>
            Scales the current IntVector2 by the given amounts.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.IntVector2.SizeInBytes">
            <summary>
            Defines the size of the IntVector2 struct in bytes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Sub(Urho.IntVector2)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Sub(Urho.IntVector2@)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Subtract(Urho.IntVector2,Urho.IntVector2)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <returns>Result of subtraction</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.Subtract(Urho.IntVector2@,Urho.IntVector2@,Urho.IntVector2@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.IntVector2.ToString">
            <summary>
            Returns a System.String that represents the current IntVector2.
            </summary>
            <returns />
            <remarks></remarks>
        </member>
        <member name="F:Urho.IntVector2.UnitX">
            <summary>
            Defines a unit-length IntVector2 that points towards the X-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.IntVector2.UnitY">
            <summary>
            Defines a unit-length IntVector2 that points towards the Y-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.IntVector2.X">
            <summary>
            The X component of the IntVector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.IntVector2.Y">
            <summary>
            The Y component of the IntVector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.IntVector2.Zero">
            <summary>
            Defines a zero-length IntVector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ISerializer">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ISerializer.Handle">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ItemClickedEventArgs">
            <summary>Event arguments for the ListView's ItemClicked event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemClickedEventArgs.Button">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemClickedEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemClickedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemClickedEventArgs.Item">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemClickedEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemClickedEventArgs.Selection">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ItemDeselectedEventArgs">
            <summary>Event arguments for the ListView's ItemDeselected event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemDeselectedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemDeselectedEventArgs.Selection">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ItemDoubleClickedEventArgs">
            <summary>Event arguments for the ListView's ItemDoubleClicked event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemDoubleClickedEventArgs.Button">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemDoubleClickedEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemDoubleClickedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemDoubleClickedEventArgs.Item">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemDoubleClickedEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemDoubleClickedEventArgs.Selection">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ItemSelectedEventArgs">
            <summary>Event arguments for the DropDownList's ItemSelected event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemSelectedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ItemSelectedEventArgs.Selection">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Iterator">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JoystickAxisMoveEventArgs">
            <summary>Event arguments for the Input's JoystickAxisMove event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickAxisMoveEventArgs.Button">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickAxisMoveEventArgs.JoystickID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickAxisMoveEventArgs.Position">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JoystickButtonDownEventArgs">
            <summary>Event arguments for the Input's JoystickButtonDown event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickButtonDownEventArgs.Button">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickButtonDownEventArgs.JoystickID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JoystickButtonUpEventArgs">
            <summary>Event arguments for the Input's JoystickButtonUp event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickButtonUpEventArgs.Button">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickButtonUpEventArgs.JoystickID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JoystickConnectedEventArgs">
            <summary>Event arguments for the Input's JoystickConnected event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickConnectedEventArgs.JoystickID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JoystickDisconnectedEventArgs">
            <summary>Event arguments for the Input's JoystickDisconnected event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickDisconnectedEventArgs.JoystickID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JoystickHatMoveEventArgs">
            <summary>Event arguments for the Input's JoystickHatMove event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickHatMoveEventArgs.Button">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickHatMoveEventArgs.JoystickID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickHatMoveEventArgs.Position">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JoystickState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JoystickState.Axes">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JoystickState.ButtonPress">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JoystickState.Buttons">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JoystickState.ControllerPtr">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.JoystickState.GetAxisPosition(System.Int32)">
            <param name="position"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.JoystickState.GetButtonDown(System.Int32)">
            <param name="position"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.JoystickState.GetButtonPress(System.Int32)">
            <param name="position"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.JoystickState.GetHatPosition(System.Int32)">
            <param name="position"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JoystickState.Hats">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JoystickState.JoystickIdPtr">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JoystickState.JoystickPtr">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JoystickState.Name">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JoystickState.ScreenJoystick">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JoystickState.ScreenJoystickPtr">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JsonFile">
            <summary>
            JSON document resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.JsonFile(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of JsonFile, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.JsonFile(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of JsonFile that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of JsonFile attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.JsonFile(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.JsonFile.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.JsonFile.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JsonFile.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.JsonFile.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.JsonFile.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.JsonFile.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JsonFile">
            <summary>
            JSON document resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.JsonFile(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of JsonFile, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.JsonFile(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of JsonFile that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of JsonFile attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.JsonFile(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.JsonFile.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.JsonFile.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JsonFile.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.JsonFile.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.JsonFile.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.JsonFile.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JsonNumberType">
            <summary>
            JSON number type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JsonNumberType.FloatDouble">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonNumberType.Int">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonNumberType.Nan">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonNumberType.Uint">
            <summary></summary>
        </member>
        <member name="T:Urho.JsonNumberType">
            <summary>
            JSON number type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JsonNumberType.FloatDouble">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonNumberType.Int">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonNumberType.Nan">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonNumberType.Uint">
            <summary></summary>
        </member>
        <member name="T:Urho.JsonValueType">
            <summary>
            JSON value type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JsonValueType.Array">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonValueType.Bool">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonValueType.Null">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonValueType.Number">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonValueType.Object">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonValueType.String">
            <summary></summary>
        </member>
        <member name="T:Urho.JsonValueType">
            <summary>
            JSON value type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JsonValueType.Array">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonValueType.Bool">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonValueType.Null">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonValueType.Number">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonValueType.Object">
            <summary></summary>
        </member>
        <member name="F:Urho.JsonValueType.String">
            <summary></summary>
        </member>
        <member name="T:Urho.JumpBy">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.JumpBy(System.Single,Urho.Vector3,System.Single,System.UInt32)">
            <param name="duration"></param>
            <param name="position"></param>
            <param name="height"></param>
            <param name="jumps"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JumpBy.Height">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JumpBy.Jumps">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.JumpBy.Position">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.JumpBy.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.JumpBy.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JumpByState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.JumpByState(Urho.JumpBy,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JumpByState.Delta">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JumpByState.Height">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JumpByState.Jumps">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JumpByState.P">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.JumpByState.StartPosition">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.JumpByState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JumpTo">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.JumpTo(System.Single,Urho.Vector3,System.Single,System.UInt32)">
            <param name="duration"></param>
            <param name="position"></param>
            <param name="height"></param>
            <param name="jumps"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.JumpTo.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.JumpToState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.JumpToState(Urho.JumpBy,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Key">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Key.A">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Alt">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Application">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.B">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Backspace">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.C">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Capslock">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Ctrl">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.D">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Delete">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Down">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.E">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.End">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Esc">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F1">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F10">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F11">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F12">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F13">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F14">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F15">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F16">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F17">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F18">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F19">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F2">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F20">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F21">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F22">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F23">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F24">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F3">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F4">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F5">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F6">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F7">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F8">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.F9">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.G">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Gui">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.H">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Home">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.I">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Insert">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.J">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.K">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_0">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_1">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_2">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_3">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_4">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_5">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_6">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_7">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_8">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_9">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_Divide">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Kp_ENTER">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_Minus">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_Multiply">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_Period">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.KP_Plus">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.L">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Left">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.LeftAlt">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.LeftCtrl">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.LeftGui">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.LeftShift">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.M">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.N">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.N0">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.N1">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.N2">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.N3">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.N4">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.N5">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.N6">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.N7">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.N8">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.N9">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.NumlockClear">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.O">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.P">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.PageDown">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.PageUp">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Pause">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.PrintScreen">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Q">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.R">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Return">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Return2">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Right">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.RightAlt">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.RightCtrl">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.RightGui">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.RightShift">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.S">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.ScrollLock">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Select">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Shift">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Space">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.T">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Tab">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.U">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Up">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.V">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.W">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.X">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Y">
            <summary></summary>
        </member>
        <member name="F:Urho.Key.Z">
            <summary></summary>
        </member>
        <member name="T:Urho.KeyDownEventArgs">
            <summary>Event arguments for the Input's KeyDown event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.KeyDownEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.KeyDownEventArgs.Key">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.KeyDownEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.KeyDownEventArgs.Raw">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.KeyDownEventArgs.Repeat">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.KeyDownEventArgs.Scancode">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.KeyUpEventArgs">
            <summary>Event arguments for the Input's KeyUp event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.KeyUpEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.KeyUpEventArgs.Key">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.KeyUpEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.KeyUpEventArgs.Raw">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.KeyUpEventArgs.Scancode">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.LayoutMode">
            <summary>
            Layout operation mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.LayoutMode.Free">
            <summary></summary>
        </member>
        <member name="F:Urho.LayoutMode.Horizontal">
            <summary></summary>
        </member>
        <member name="F:Urho.LayoutMode.Vertical">
            <summary></summary>
        </member>
        <member name="T:Urho.LayoutUpdatedEventArgs">
            <summary>Event arguments for the UIElement's LayoutUpdated event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LayoutUpdatedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Light">
            <summary>
            %Light component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Light(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Light, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Light(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Light that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Light attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Light(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Light.AspectRatio">
            <summary>
            Return spotlight aspect ratio.
            Or
            Set spotlight aspect ratio.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Light.Brightness">
            <summary>
            Return brightness multiplier.
            Or
            Set light brightness multiplier. Both the color and specular intensity are multiplied with this to get final values for rendering.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.Color">
            <summary>
            Return color.
            Or
            Set color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Light.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.EffectiveColor">
            <summary>
            Return effective color, multiplied by brightness. Do not multiply the alpha so that can compare against the default black color to detect a light with no effect.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.EffectiveSpecularIntensity">
            <summary>
            Return effective specular intensity, multiplied by absolute value of brightness.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.FadeDistance">
            <summary>
            Return fade start distance.
            Or
            Set fade out start distance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.Fov">
            <summary>
            Return spotlight field of view.
            Or
            Set spotlight field of view.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.Frustum">
            <summary>
            Return spotlight frustum.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Light.GetIntensityDivisor(System.Single)">
            <param name="attenuation"></param>
            <summary>
            Return a divisor value based on intensity for calculating the sort value.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Light.IsNegative">
            <summary>
            Return whether light has negative (darkening) color.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.LightQueue">
            <summary>
            Return light queue. Called by View.
            Or
            Set light queue used for this light. Called by View.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.LightType">
            <summary>
            Return light type.
            Or
            Set light type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.NumShadowSplits">
            <summary>
            Return number of shadow map cascade splits for a directional light, considering also graphics API limitations.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.PerVertex">
            <summary>
            Return vertex lighting mode.
            Or
            Set vertex lighting mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.RampTexture">
            <summary>
            Return range attenuation texture.
            Or
            Set range attenuation texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.RampTextureAttr">
            <summary>
            Return ramp texture attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.Range">
            <summary>
            Return range.
            Or
            Set range.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Light.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. Drawable must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Light.SetIntensitySortValue(System.Single)">
            <param name="distance"></param>
            <summary>
            Set sort value based on intensity and view distance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Light.SetIntensitySortValue(Urho.BoundingBox)">
            <param name="box"></param>
            <summary>
            Set sort value based on overall intensity over a bounding box.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.ShadowBias">
            <summary>
            Return shadow depth bias parameters.
            Or
            Set shadow depth bias parameters.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.ShadowCascade">
            <summary>
            Return directional light cascaded shadow parameters.
            Or
            Set directional light cascaded shadow parameters.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.ShadowFadeDistance">
            <summary>
            Return shadow fade start distance.
            Or
            Set shadow fade out start distance. Only has effect if shadow distance is also non-zero.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.ShadowIntensity">
            <summary>
            Return shadow intensity.
            Or
            Set shadow intensity between 0.0 - 1.0. 0.0 (the default) gives fully dark shadows.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.ShadowNearFarRatio">
            <summary>
            Return shadow camera near/far clip distance ratio.
            Or
            Set shadow camera near/far clip distance ratio.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.ShadowResolution">
            <summary>
            Return shadow resolution.
            Or
            Set shadow resolution between 0.25 - 1.0. Determines the shadow map to use.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.ShapeTexture">
            <summary>
            Return spotlight attenuation texture.
            Or
            Set spotlight attenuation texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.ShapeTextureAttr">
            <summary>
            Return shape texture attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.SpecularIntensity">
            <summary>
            Return specular intensity.
            Or
            Set specular intensity. Zero disables specular calculations.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Light.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Light.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Light.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Light.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.LightBatchQueue">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.LightPSVariation">
            <summary>
            Light pixel shader variations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.LightPSVariation.MaxLightPsVariations">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.None">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Point">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Pointmask">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Pointmaskshadow">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Pointmaskshadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Pointmaskspec">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Pointshadow">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Pointshadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Pointspec">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Shadow">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Shadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Spec">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Spot">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Spotshadow">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Spotshadowspec">
            <summary></summary>
        </member>
        <member name="F:Urho.LightPSVariation.Spotspec">
            <summary></summary>
        </member>
        <member name="T:Urho.LightType">
            <summary>
            %Light types.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.LightType.Directional">
            <summary></summary>
        </member>
        <member name="F:Urho.LightType.Point">
            <summary></summary>
        </member>
        <member name="F:Urho.LightType.Spot">
            <summary></summary>
        </member>
        <member name="T:Urho.LightVSVariation">
            <summary>
            Light vertex shader variations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.LightVSVariation.Dir">
            <summary></summary>
        </member>
        <member name="F:Urho.LightVSVariation.MaxLightVsVariations">
            <summary></summary>
        </member>
        <member name="F:Urho.LightVSVariation.Point">
            <summary></summary>
        </member>
        <member name="F:Urho.LightVSVariation.Pointshadow">
            <summary></summary>
        </member>
        <member name="F:Urho.LightVSVariation.Shadow">
            <summary></summary>
        </member>
        <member name="F:Urho.LightVSVariation.Spot">
            <summary></summary>
        </member>
        <member name="F:Urho.LightVSVariation.Spotshadow">
            <summary></summary>
        </member>
        <member name="T:Urho.LineEdit">
            <summary>
            Single-line text editor %UI element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.LineEdit(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of LineEdit, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.LineEdit(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of LineEdit that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of LineEdit attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.LineEdit(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.LineEdit.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LineEdit.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.LineEdit.Cursor">
            <summary>
            Return cursor element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LineEdit.CursorBlinkRate">
            <summary>
            Return cursor blink rate.
            Or
            Set cursor blink rate. 0 disables blinking.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LineEdit.CursorPosition">
            <summary>
            Return cursor position.
            Or
            Set cursor position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LineEdit.EchoCharacter">
            <summary>
            Return echo character.
            Or
            Set echo character for password entry and such. 0 (default) shows the actual text.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.IsCursorMovable">
            <summary>
            Return whether can move cursor with arrows or mouse.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.IsTextCopyable">
            <summary>
            Return whether copy-paste operations are allowed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.IsTextSelectable">
            <summary>
            Return whether selections are allowed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LineEdit.MaxLength">
            <summary>
            Return maximum text length.
            Or
            Set maximum text length. 0 for unlimited.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.OnClickBegin(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="button"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse click begin.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.OnDoubleClick(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="button"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse doubleclick.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.OnDragBegin(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag begin.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.OnDragDropFinish(Urho.UIElement)">
            <param name="source"></param>
            <summary>
            React to drag and drop finish. Return true to signal that the drop was accepted.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.OnDragDropTest(Urho.UIElement)">
            <param name="source"></param>
            <summary>
            React to drag and drop test. Return true to signal that the drop is acceptable.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.OnDragMove(Urho.IntVector2,Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="deltaPos"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag motion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.OnKey(System.Int32,System.Int32,System.Int32)">
            <param name="key"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <summary>
            React to a key press.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.OnTextInput(System.String,System.Int32,System.Int32)">
            <param name="text"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <summary>
            React to text input event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.SetCursorMovable(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether can move cursor with arrows or mouse, default true.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.SetTextCopyable(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether copy-paste operations are allowed, default true.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.SetTextSelectable(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether selections are allowed, default true.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.SubscribeToCharEntry(System.Action{Urho.CharEntryEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the CharEntry event raised by the LineEdit.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.LineEdit.SubscribeToTextChanged(System.Action{Urho.TextChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the TextChanged event raised by the LineEdit.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.LineEdit.SubscribeToTextFinished(System.Action{Urho.TextFinishedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the TextFinished event raised by the LineEdit.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.LineEdit.SubscribeToUnhandledKey(System.Action{Urho.UnhandledKeyEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the UnhandledKey event raised by the LineEdit.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.LineEdit.Text">
            <summary>
            Return text.
            Or
            Set text.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LineEdit.TextElement">
            <summary>
            Return text element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LineEdit.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.LineEdit.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.LineEdit.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.LineEdit.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LineEdit.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Perform UI element update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ListBasedUpdateSynchronizationContext">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ListBasedUpdateSynchronizationContext(System.Collections.Generic.IList{System.Action})">
            <param name="list"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListBasedUpdateSynchronizationContext.CreateCopy">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListBasedUpdateSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <param name="d"></param>
            <param name="state"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListBasedUpdateSynchronizationContext.PumpActions">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListBasedUpdateSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <param name="d"></param>
            <param name="state"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ListView">
            <summary>
            Scrollable list %UI element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ListView(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ListView, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ListView(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ListView that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ListView attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ListView(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.ListView.AddItem(Urho.UIElement)">
            <param name="item"></param>
            <summary>
            Add item to the end of the list.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.AddSelection(System.UInt32)">
            <param name="index"></param>
            <summary>
            Add item to the selection, multiselect mode only.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ListView.BaseIndent">
            <summary>
            Return base indent.
            Or
            Set base indent, i.e. the indent level of the ultimate parent item.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ListView.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.ListView.ChangeSelection(System.Int32,System.Boolean)">
            <param name="delta"></param>
            <param name="additive"></param>
            <summary>
            Move selection by a delta and clamp at list ends. If additive (multiselect only), will add to the existing selection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.ClearSelection">
            <summary>
            Clear selection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ListView.ClearSelectionOnDefocus">
            <summary>
            Return whether selection is cleared on defocus.
            Or
            Enable clearing of selection on defocus.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.CopySelectedItemsToClipboard">
            <summary>
            Copy selected items to system clipboard. Currently only applicable to Text items.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.EnsureItemVisibility(System.UInt32)">
            <param name="index"></param>
            <summary>
            Ensure full visibility of the item.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.EnsureItemVisibility(Urho.UIElement)">
            <param name="item"></param>
            <summary>
            Ensure full visibility of the item.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.Expand(System.UInt32,System.Boolean,System.Boolean)">
            <param name="index"></param>
            <param name="enable"></param>
            <param name="recursive"></param>
            <summary>
            Expand item at index. Only has effect in hierarchy mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.FindItem(Urho.UIElement)">
            <param name="item"></param>
            <summary>
            Return index of item, or M_MAX_UNSIGNED If not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.GetItem(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return item at index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ListView.HierarchyMode">
            <summary>
            Return whether hierarchy mode enabled.
            Or
            Enable hierarchy mode. Allows items to have parent-child relationship at different indent level and the ability to expand/collapse child items.
            All items in the list will be lost during mode change.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ListView.HighlightMode">
            <summary>
            Return highlight mode.
            Or
            Set selected items' highlight mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.InsertItem(System.UInt32,Urho.UIElement,Urho.UIElement)">
            <param name="index"></param>
            <param name="item"></param>
            <param name="parentItem"></param>
            <summary>
            Insert item at a specific index. In hierarchy mode, the optional parameter will be used to determine the child's indent level in respect to its parent.
            If index is greater than the total items then the new item is inserted at the end of the list.
            In hierarchy mode, if index is greater than the index of last children of the specified parent item then the new item is inserted next to the last children.
            And if the index is lesser than the index of the parent item itself then the new item is inserted before the first child item.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.IsExpanded(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return whether an item at index has its children expanded (in hierachy mode only).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.IsSelected(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return whether an item at index is seleccted.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ListView.Multiselect">
            <summary>
            Return whether multiselect enabled.
            Or
            Enable multiselect.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ListView.NumItems">
            <summary>
            Return number of items.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.OnKey(System.Int32,System.Int32,System.Int32)">
            <param name="key"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <summary>
            React to a key press.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.OnResize">
            <summary>
            React to resize.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.RemoveAllItems">
            <summary>
            Remove all items.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.RemoveItem(System.UInt32)">
            <param name="index"></param>
            <summary>
            Remove item at index. In hierarchy mode will also remove any children.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.RemoveItem(Urho.UIElement,System.UInt32)">
            <param name="item"></param>
            <param name="index"></param>
            <summary>
            Remove specific item, starting search at the specified index if provided. In hierarchy mode will also remove any children.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.RemoveSelection(System.UInt32)">
            <param name="index"></param>
            <summary>
            Remove item from the selection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ListView.SelectedItem">
            <summary>
            Return first selected item, or null if none selected.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ListView.Selection">
            <summary>
            Return first selected index, or M_MAX_UNSIGNED if none selected.
            Or
            Set selection.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ListView.SelectOnClickEnd">
            <summary>
            Return whether reacts to click end instead of click start for item selection.
            Or
            Enable reacting to click end instead of click start for item selection. Default false.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.SubscribeToItemClicked(System.Action{Urho.ItemClickedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ItemClicked event raised by the ListView.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.ListView.SubscribeToItemDeselected(System.Action{Urho.ItemDeselectedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ItemDeselected event raised by the ListView.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.ListView.SubscribeToItemDoubleClicked(System.Action{Urho.ItemDoubleClickedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ItemDoubleClicked event raised by the ListView.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.ListView.SubscribeToItemSelected(System.Action{Urho.ItemSelectedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ItemSelected event raised by the ListView.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.ListView.SubscribeToSelectionChanged(System.Action{Urho.SelectionChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the SelectionChanged event raised by the ListView.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.ListView.SubscribeToUnhandledKey(System.Action{Urho.UnhandledKeyEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the UnhandledKey event raised by the ListView.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.ListView.ToggleExpand(System.UInt32,System.Boolean)">
            <param name="index"></param>
            <param name="recursive"></param>
            <summary>
            Toggle item's expanded flag at index. Only has effect in hierarchy mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ListView.ToggleSelection(System.UInt32)">
            <param name="index"></param>
            <summary>
            Toggle selection of an item.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ListView.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ListView.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ListView.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ListView.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.LoadFailedEventArgs">
            <summary>Event arguments for the ResourceCache's LoadFailed event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LoadFailedEventArgs.ResourceName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.LoadMode">
            <summary>
            Asynchronous scene loading mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.LoadMode.ResourcesOnly">
            <summary></summary>
        </member>
        <member name="F:Urho.LoadMode.Scene">
            <summary></summary>
        </member>
        <member name="F:Urho.LoadMode.SceneAndResources">
            <summary></summary>
        </member>
        <member name="T:Urho.LockState">
            <summary>
            Vertex/index buffer lock state.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.LockState.Hardware">
            <summary></summary>
        </member>
        <member name="F:Urho.LockState.None">
            <summary></summary>
        </member>
        <member name="F:Urho.LockState.Scratch">
            <summary></summary>
        </member>
        <member name="F:Urho.LockState.Shadow">
            <summary></summary>
        </member>
        <member name="T:Urho.Log">
            <summary>
            Logging subsystem.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Log(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Log, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Log(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Log that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Log attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Log(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Log.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Log.Close">
            <summary>
            Close the log file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Log.IsQuiet">
            <summary>
            Return whether log is in quiet mode (only errors printed to standard error stream).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Log.LastMessage">
            <summary>
            Return last log message.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Log.Level">
            <summary>
            Return logging level.
            Or
            Set logging level.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Log.LogLevel">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Log.Open(System.String)">
            <param name="fileName"></param>
            <summary>
            Open the log file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Log.SetQuiet(System.Boolean)">
            <param name="quiet"></param>
            <summary>
            Set quiet mode ie. only print error entries to standard error stream (which is normally redirected to console also). Output to log file is not affected by this mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Log.SubscribeToLogMessage(System.Action{Urho.LogMessageEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the LogMessage event raised by the Log.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Log.TimeStamp">
            <summary>
            Return whether log messages are timestamped.
            Or
            Set whether to timestamp log messages.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Log.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Log.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Log.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Log.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Log.Write(Urho.LogLevel,System.String)">
            <param name="level"></param>
            <param name="message"></param>
            <summary>
            Write to the log. If logging level is higher than the level of the message, the message is ignored.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Log.WriteRaw(System.String,System.Boolean)">
            <param name="message"></param>
            <param name="error"></param>
            <summary>
            Write raw output to the log.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.LogicComponent">
            <summary>
            Helper base class for user-defined game logic components that hooks up to update events and forwards them to virtual functions similar to ScriptInstance class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.LogicComponent(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of LogicComponent, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.LogicComponent(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of LogicComponent that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of LogicComponent attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.LogicComponent(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.LogicComponent.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.LogicComponent.DelayedStart">
            <summary>
            Called before the first update. At this point all other components of the node should exist. Will also be called if update events are not wanted; in that case the event is immediately unsubscribed afterward.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LogicComponent.FixedPostUpdate(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Called on physics post-update, fixed timestep.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LogicComponent.FixedUpdate(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Called on physics update, fixed timestep.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LogicComponent.IsDelayedStartCalled">
            <summary>
            Return whether the DelayedStart() function has been called.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LogicComponent.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change. Changes update event subscription.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LogicComponent.PostUpdate(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Called on scene post-update, variable timestep.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LogicComponent.Start">
            <summary>
            Called when the component is added to a scene node. Other components may not yet exist.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LogicComponent.Stop">
            <summary>
            Called when the component is detached from a scene node, usually on destruction. Note that you will no longer have access to the node and scene at that point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LogicComponent.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.LogicComponent.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.LogicComponent.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.LogicComponent.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.LogicComponent.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Called on scene update, variable timestep.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LogicComponent.UpdateEventMask">
            <summary>
            Return what update events are subscribed to.
            Or
            Set what update events should be subscribed to. Use this for optimization: by default all are in use. Note that this is not an attribute and is not saved or network-serialized, therefore it should always be called eg. in the subclass constructor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.LogLevel">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.LogLevel.Debug">
            <summary></summary>
        </member>
        <member name="F:Urho.LogLevel.Error">
            <summary></summary>
        </member>
        <member name="F:Urho.LogLevel.Info">
            <summary></summary>
        </member>
        <member name="F:Urho.LogLevel.None">
            <summary></summary>
        </member>
        <member name="F:Urho.LogLevel.Raw">
            <summary></summary>
        </member>
        <member name="F:Urho.LogLevel.Warning">
            <summary></summary>
        </member>
        <member name="T:Urho.LogMessageEventArgs">
            <summary>Event arguments for the Log's LogMessage event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LogMessageEventArgs.Level">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.LogMessageEventArgs.Message">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.LoopMode2D">
            <summary>
            Loop mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.LoopMode2D.Default">
            <summary></summary>
        </member>
        <member name="F:Urho.LoopMode2D.ForceClamped">
            <summary></summary>
        </member>
        <member name="F:Urho.LoopMode2D.ForceLooped">
            <summary></summary>
        </member>
        <member name="T:Urho.Material">
            <summary>
            Describes how to render 3D geometries.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Material(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Material, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Material(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Material that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Material attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Material(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Material.AuxViewFrameNumber">
            <summary>
            Return last auxiliary view rendered frame number.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Material.Clone(System.String)">
            <param name="cloneName"></param>
            <summary>
            Clone the material.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.CullMode">
            <summary>
            Return normal culling mode.
            Or
            Set culling mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.DepthBias">
            <summary>
            Return depth bias.
            Or
            Set depth bias.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.FillMode">
            <summary>
            Return polygon fill mode.
            Or
            Set polygon fill mode. Interacts with the camera's fill mode setting so that the "least filled" mode will be used.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.GetPass(System.UInt32,System.String)">
            <param name="index"></param>
            <param name="passName"></param>
            <summary>
            Return pass by technique index and pass name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.GetShaderParameterAnimation(System.String)">
            <param name="name"></param>
            <summary>
            Return shader parameter animation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.GetShaderParameterAnimationSpeed(System.String)">
            <param name="name"></param>
            <summary>
            Return shader parameter animation speed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.GetShaderParameterAnimationWrapMode(System.String)">
            <param name="name"></param>
            <summary>
            Return shader parameter animation wrap mode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.GetTechnique(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return technique by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.GetTexture(Urho.TextureUnit)">
            <param name="unit"></param>
            <summary>
            Return texture by unit.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.GetTextureUnitName(Urho.TextureUnit)">
            <param name="unit"></param>
            <summary>
            Return name for texture unit.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.Load(Urho.XmlElement)">
            <param name="source"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.MarkForAuxView(System.UInt32)">
            <param name="frameNumber"></param>
            <summary>
            Mark material for auxiliary view rendering.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.NumTechniques">
            <summary>
            Return number of techniques.
            Or
            Set number of techniques.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.Occlusion">
            <summary>
            Return whether should render occlusion.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.ParseShaderParameterValue(System.String)">
            <param name="value"></param>
            <summary>
            Parse a shader parameter value from a string. Retunrs either a bool, a float, or a 2 to 4-component vector.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.ReleaseShaders">
            <summary>
            Reset all shader pointers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.RemoveShaderParameter(System.String)">
            <param name="name"></param>
            <summary>
            Remove shader parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.RenderOrder">
            <summary>
            Return render order.
            Or
            Set 8-bit render order within pass. Default 128. Lower values will render earlier and higher values later, taking precedence over e.g. state and distance sorting.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.Save(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.Scene">
            <summary>
            Return the scene associated with the material for shader parameter animation updates.
            Or
            Associate the material with a scene to ensure that shader parameter animation happens in sync with scene update, respecting the scene time scale. If no scene is set, the global update events will be used.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameter(System.String,System.Int32)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set shader parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameter(System.String,System.Single)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set shader parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameter(System.String,System.String)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set shader parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameter(System.String,Urho.Color)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set shader parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameter(System.String,Urho.IntRect)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set shader parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameter(System.String,Urho.IntVector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set shader parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameter(System.String,Urho.Quaternion)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set shader parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameter(System.String,Urho.Vector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set shader parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameter(System.String,Urho.Vector3)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set shader parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameter(System.String,Urho.Vector4)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set shader parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameterAnimation(System.String,Urho.ValueAnimation,Urho.WrapMode,System.Single)">
            <param name="name"></param>
            <param name="animation"></param>
            <param name="wrapMode"></param>
            <param name="speed"></param>
            <summary>
            Set shader parameter animation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameterAnimationSpeed(System.String,System.Single)">
            <param name="name"></param>
            <param name="speed"></param>
            <summary>
            Set shader parameter animation speed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetShaderParameterAnimationWrapMode(System.String,Urho.WrapMode)">
            <param name="name"></param>
            <param name="wrapMode"></param>
            <summary>
            Set shader parameter animation wrap mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetTechnique(System.UInt32,Urho.Technique,System.UInt32,System.Single)">
            <param name="index"></param>
            <param name="tech"></param>
            <param name="qualityLevel"></param>
            <param name="lodDistance"></param>
            <summary>
            Set technique.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetTexture(Urho.TextureUnit,Urho.Texture)">
            <param name="unit"></param>
            <param name="texture"></param>
            <summary>
            Set texture.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetUVTransform(Urho.Vector2,System.Single,System.Single)">
            <param name="offset"></param>
            <param name="rotation"></param>
            <param name="repeat"></param>
            <summary>
            Set texture coordinate transform.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SetUVTransform(Urho.Vector2,System.Single,Urho.Vector2)">
            <param name="offset"></param>
            <param name="rotation"></param>
            <param name="repeat"></param>
            <summary>
            Set texture coordinate transform.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.ShaderParameterHash">
            <summary>
            Return shader parameter hash value. Used as an optimization to avoid setting shader parameters unnecessarily.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.ShadowCullMode">
            <summary>
            Return culling mode for shadows.
            Or
            Set culling mode for shadows.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Material.SortTechniques">
            <summary>
            Ensure that material techniques are listed in correct order.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.Specular">
            <summary>
            Return whether should render specular.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Material.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Material.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Material.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Material.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MathHelper">
            <summary>
            Contains common mathematical functions and constants.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.BinomialCoefficient(System.Int32,System.Int32)">
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <summary>
            Calculates the binomial coefficient <paramref name="n" /> above <paramref name="k" />.
            </summary>
            <returns>n! / (k! * (n - k)!)</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <summary>
            Clamp a float to a range.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.DegreesToRadians(System.Double)">
            <param name="degrees">An angle in degrees</param>
            <summary>
            Convert degrees to radians
            </summary>
            <returns>The angle expressed in radians</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.DegreesToRadians(System.Single)">
            <param name="degrees">An angle in degrees</param>
            <summary>
            Convert degrees to radians
            </summary>
            <returns>The angle expressed in radians</returns>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MathHelper.DTORF">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MathHelper.E">
            <summary>
            Defines the value of E as a <see cref="T:System.Single" />.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.Factorial(System.Int32)">
            <param name="n">The number.</param>
            <summary>Calculates the factorial of a given natural number.
            </summary>
            <returns>n!</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.InverseSqrtFast(System.Double)">
            <param name="x">A number.</param>
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:Urho.MathHelper.InverseSqrtFast(System.Single)">
            <param name="x">A number.</param>
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:Urho.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <param name="lhs"></param>
            <param name="rhs"></param>
            <param name="t"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MathHelper.Log10E">
            <summary>
            Defines the base-10 logarithm of E.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MathHelper.Log2E">
            <summary>
            Defines the base-2 logarithm of E.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.NextPowerOfTwo(System.Double)">
            <param name="n">The specified number.</param>
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <returns>The next power of two.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.NextPowerOfTwo(System.Int32)">
            <param name="n">The specified number.</param>
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <returns>The next power of two.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.NextPowerOfTwo(System.Int64)">
            <param name="n">The specified number.</param>
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <returns>The next power of two.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.NextPowerOfTwo(System.Single)">
            <param name="n">The specified number.</param>
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <returns>The next power of two.</returns>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MathHelper.Pi">
            <summary>
            Defines the value of Pi as a <see cref="T:System.Single" />.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MathHelper.PiOver2">
            <summary>
            Defines the value of Pi divided by two as a <see cref="T:System.Single" />.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MathHelper.PiOver3">
            <summary>
            Defines the value of Pi divided by three as a <see cref="T:System.Single" />.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MathHelper.PiOver4">
            <summary>
            Definesthe value of  Pi divided by four as a <see cref="T:System.Single" />.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MathHelper.PiOver6">
            <summary>
            Defines the value of Pi divided by six as a <see cref="T:System.Single" />.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.RadiansToDegrees(System.Double)">
            <param name="radians">An angle in radians</param>
            <summary>
            Convert radians to degrees
            </summary>
            <returns>The angle expressed in degrees</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.RadiansToDegrees(System.Single)">
            <param name="radians">An angle in radians</param>
            <summary>
            Convert radians to degrees
            </summary>
            <returns>The angle expressed in degrees</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.Swap(System.Double@,System.Double@)">
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <summary>
            Swaps two double values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MathHelper.Swap(System.Single@,System.Single@)">
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <summary>
            Swaps two float values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MathHelper.ThreePiOver2">
            <summary>
            Defines the value of Pi multiplied by 3 and divided by two as a <see cref="T:System.Single" />.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MathHelper.TwoPi">
            <summary>
            Defines the value of Pi multiplied by two as a <see cref="T:System.Single" />.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Matrix3">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Matrix3(System.Single[])">
            <param name="floatArray">The array of floats for the components of the matrix.</param>
            <summary>Constructs left matrix from the given array of float-precision floating-point numbers.</summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Matrix3(Urho.Matrix3@)">
            <param name="matrix"></param>
            <summary>Constructs left matrix with the same components as the given matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Matrix3(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="r0c0">The value for row 0 column 0.</param>
            <param name="r0c1">The value for row 0 column 1.</param>
            <param name="r0c2">The value for row 0 column 2.</param>
            <param name="r1c0">The value for row 1 column 0.</param>
            <param name="r1c1">The value for row 1 column 1.</param>
            <param name="r1c2">The value for row 1 column 2.</param>
            <param name="r2c0">The value for row 2 column 0.</param>
            <param name="r2c1">The value for row 2 column 1.</param>
            <param name="r2c2">The value for row 2 column 2.</param>
            <summary>Constructs left matrix with the given values.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Add(Urho.Matrix3@)">
            <param name="matrix">The matrix to add.</param>
            <summary>Add left matrix to this matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Add(Urho.Matrix3@,Urho.Matrix3@)">
            <param name="matrix">The matrix to add.</param>
            <param name="result">The resulting matrix of the addition.</param>
            <summary>Add left matrix to this matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Add(Urho.Matrix3@,Urho.Matrix3@,Urho.Matrix3@)">
            <param name="left"></param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the addition.</param>
            <summary>Add left matrix to left matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix3.Determinant">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Equals(Urho.Matrix3)">
            <param name="matrix">The OpenTK.Matrix3 structure to compare with.</param>
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Equals(Urho.Matrix3@)">
            <param name="matrix">The OpenTK.Matrix3 structure to compare to.</param>
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Equals(Urho.Matrix3@,Urho.Matrix3@)">
            <param name="left">The left-hand operand.</param>
            <param name="right">The right-hand operand.</param>
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.EqualsApprox(Urho.Matrix3@,System.Single)">
            <param name="matrix">The OpenTK.Matrix3 structure to compare with.</param>
            <param name="tolerance">The limit below which the matrices are considered equal.</param>
            <summary>Indicates whether the current matrix is approximately equal to another matrix.</summary>
            <returns>true if the current matrix is approximately equal to the matrix parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.EqualsApprox(Urho.Matrix3@,Urho.Matrix3@,System.Single)">
            <param name="left">The left-hand operand.</param>
            <param name="right">The right-hand operand.</param>
            <param name="tolerance">The limit below which the matrices are considered equal.</param>
            <summary>Indicates whether the current matrix is approximately equal to another matrix.</summary>
            <returns>true if the current matrix is approximately equal to the matrix parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3.Identity">
            <summary>The identity matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix3.Item(System.Int32)">
            <param name="index">The index into the components of the matrix.</param>
            <summary>Gets the component at the index into the matrix.</summary>
            <value>The component at the given index into the matrix.</value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix3.Item(System.Int32,System.Int32)">
            <param name="row">The row of the matrix.</param>
            <param name="column">The column of the matrix.</param>
            <summary>Gets the component at the given row and column in the matrix.</summary>
            <value>The component at the given row and column in the matrix.</value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Multiply(System.Single)">
            <param name="scalar"></param>
            <summary>Multiply matrix times this matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Multiply(Urho.Matrix3@)">
            <param name="matrix">The matrix to multiply.</param>
            <summary>Multiply left martix times this matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Multiply(System.Single,Urho.Matrix3@)">
            <param name="scalar"></param>
            <param name="result">The resulting matrix of the multiplication.</param>
            <summary>Multiply matrix times this matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Multiply(Urho.Matrix3@,Urho.Matrix3@)">
            <param name="matrix">The matrix to multiply.</param>
            <param name="result">The resulting matrix of the multiplication.</param>
            <summary>Multiply matrix times this matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Multiply(Urho.Matrix3@,System.Single,Urho.Matrix3@)">
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="scalar"></param>
            <param name="result">The resulting matrix of the multiplication.</param>
            <summary>Multiply left matrix times left matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Multiply(Urho.Matrix3@,Urho.Matrix3@,Urho.Matrix3@)">
            <param name="left"></param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the multiplication.</param>
            <summary>Multiply left matrix times left matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.op_Explicit(Urho.Matrix3)~System.IntPtr">
            <param name="matrix">The matrix to convert.</param>
            <summary>Converts the matrix into an IntPtr.</summary>
            <returns>An IntPtr for the matrix.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.op_Explicit(Urho.Matrix3)~System.Single*">
            <param name="matrix">The matrix to convert.</param>
            <summary>Converts the matrix into left float*.</summary>
            <returns>A float* for the matrix.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.op_Explicit(Urho.Matrix3)~System.Single[]">
            <param name="matrix">The matrix to convert.</param>
            <summary>Converts the matrix into an array of floats.</summary>
            <returns>An array of floats for the matrix.</returns>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3.R0C0">
            <summary>Row 0, Column 0</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3.R0C1">
            <summary>Row 0, Column 1</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3.R0C2">
            <summary>Row 0, Column 2</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3.R1C0">
            <summary>Row 1, Column 0</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3.R1C1">
            <summary>Row 1, Column 1</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3.R1C2">
            <summary>Row 1, Column 2</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3.R2C0">
            <summary>Row 2, Column 0</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3.R2C1">
            <summary>Row 2, Column 1</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3.R2C2">
            <summary>Row 2, Column 2</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Rotate(System.Single)">
            <param name="angle"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Rotate(System.Single,Urho.Matrix3@)">
            <param name="angle"></param>
            <param name="result"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Rotate(Urho.Matrix3@,System.Single,Urho.Matrix3@)">
            <param name="matrix"></param>
            <param name="angle"></param>
            <param name="result"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.RotateMatrix(System.Single,Urho.Matrix3@)">
            <param name="angle"></param>
            <param name="result"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Subtract(Urho.Matrix3@)">
            <param name="matrix">The matrix to subtract.</param>
            <summary>Subtract left matrix from this matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Subtract(Urho.Matrix3@,Urho.Matrix3@)">
            <param name="matrix">The matrix to subtract.</param>
            <param name="result">The resulting matrix of the subtraction.</param>
            <summary>Subtract left matrix from this matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Subtract(Urho.Matrix3@,Urho.Matrix3@,Urho.Matrix3@)">
            <param name="left"></param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the subtraction.</param>
            <summary>Subtract left matrix from left matrix.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.ToQuaternion">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A System.String containing left fully qualified type name.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Transform(Urho.Vector3@)">
            <param name="vector"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Transform(Urho.Matrix3@,Urho.Vector3@)">
            <param name="matrix"></param>
            <param name="vector"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Transform(Urho.Vector3@,Urho.Vector3@)">
            <param name="vector"></param>
            <param name="result"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Transform(Urho.Matrix3@,Urho.Vector3@,Urho.Vector3@)">
            <param name="matrix"></param>
            <param name="vector"></param>
            <param name="result"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Transpose">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Transpose(Urho.Matrix3@)">
            <param name="result"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix3.Transpose(Urho.Matrix3@,Urho.Matrix3@)">
            <param name="matrix"></param>
            <param name="result"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3.Zero">
            <summary>A matrix of all zeros.</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Matrix3x4">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m00">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m01">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m02">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m03">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m10">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m11">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m12">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m13">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m20">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m21">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m22">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix3x4.m23">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Matrix4">
            <summary>
            Represents a 4x4 Matrix
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Matrix4(Urho.Vector4,Urho.Vector4,Urho.Vector4,Urho.Vector4)">
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
            <summary>
            Constructs a new instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Matrix4(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="m00">First item of the first row of the matrix.</param>
            <param name="m01">Second item of the first row of the matrix.</param>
            <param name="m02">Third item of the first row of the matrix.</param>
            <param name="m03">Fourth item of the first row of the matrix.</param>
            <param name="m10">First item of the second row of the matrix.</param>
            <param name="m11">Second item of the second row of the matrix.</param>
            <param name="m12">Third item of the second row of the matrix.</param>
            <param name="m13">Fourth item of the second row of the matrix.</param>
            <param name="m20">First item of the third row of the matrix.</param>
            <param name="m21">Second item of the third row of the matrix.</param>
            <param name="m22">Third item of the third row of the matrix.</param>
            <param name="m23">First item of the third row of the matrix.</param>
            <param name="m30">Fourth item of the fourth row of the matrix.</param>
            <param name="m31">Second item of the fourth row of the matrix.</param>
            <param name="m32">Third item of the fourth row of the matrix.</param>
            <param name="m33">Fourth item of the fourth row of the matrix.</param>
            <summary>
            Constructs a new instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.Column0">
            <summary>
            The first column of this matrix
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.Column1">
            <summary>
            The second column of this matrix
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.Column2">
            <summary>
            The third column of this matrix
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.Column3">
            <summary>
            The fourth column of this matrix
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateFromAxisAngle(Urho.Vector3,System.Single)">
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <returns>A matrix instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateFromAxisAngle(Urho.Vector3,System.Single,Urho.Matrix4@)">
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <param name="result">A matrix instance.</param>
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <returns></returns>
            <remarks></remarks>
            <rereturns>The resulting Matrix4 instance.</rereturns>
        </member>
        <member name="M:Urho.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,Urho.Matrix4@)">
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Urho.Matrix4@)">
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <remarks></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet"><item>fovy is zero, less than zero or larger than Math.PI</item><item>aspect is negative or zero</item><item>zNear is negative or zero</item><item>zFar is negative or zero</item><item>zNear is larger than zFar</item></list></exception>
        </member>
        <member name="M:Urho.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,Urho.Matrix4@)">
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <remarks></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet"><item>fovy is zero, less than zero or larger than Math.PI</item><item>aspect is negative or zero</item><item>zNear is negative or zero</item><item>zFar is negative or zero</item><item>zNear is larger than zFar</item></list></exception>
        </member>
        <member name="M:Urho.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <remarks></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet"><item>zNear is negative or zero</item><item>zFar is negative or zero</item><item>zNear is larger than zFar</item></list></exception>
        </member>
        <member name="M:Urho.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Urho.Matrix4@)">
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <remarks></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet"><item>zNear is negative or zero</item><item>zFar is negative or zero</item><item>zNear is larger than zFar</item></list></exception>
        </member>
        <member name="M:Urho.Matrix4.CreateRotationX(System.Single)">
            <param name="angle">The counter-clockwise angle in radians.</param>
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateRotationX(System.Single,Urho.Matrix4@)">
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateRotationY(System.Single)">
            <param name="angle">The counter-clockwise angle in radians.</param>
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateRotationY(System.Single,Urho.Matrix4@)">
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateRotationZ(System.Single)">
            <param name="angle">The counter-clockwise angle in radians.</param>
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateRotationZ(System.Single,Urho.Matrix4@)">
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateTranslation(Urho.Vector3)">
            <param name="vector">The translation vector.</param>
            <summary>
            Creates a translation matrix.
            </summary>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateTranslation(Urho.Vector3@,Urho.Matrix4@)">
            <param name="vector">The translation vector.</param>
            <param name="result">The resulting Matrix4 instance.</param>
            <summary>
            Creates a translation matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateTranslation(System.Single,System.Single,System.Single)">
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <summary>
            Creates a translation matrix.
            </summary>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.CreateTranslation(System.Single,System.Single,System.Single,Urho.Matrix4@)">
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <param name="result">The resulting Matrix4 instance.</param>
            <summary>
            Creates a translation matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Equals(System.Object)">
            <param name="obj">The object to compare tresult.</param>
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>True if the instances are equal; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Equals(Urho.Matrix4)">
            <param name="other">An matrix to compare with this matrix.</param>
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <summary>
            Build a projection matrix
            </summary>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix4.Identity">
            <summary>
            The identity matrix
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Invert">
            <summary>
            Converts this instance into its inverse.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Invert(Urho.Matrix4)">
            <param name="mat">The matrix to invert</param>
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
            <remarks></remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4 is singular.</exception>
        </member>
        <member name="M:Urho.Matrix4.LookAt(Urho.Vector3,Urho.Vector3,Urho.Vector3)">
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <summary>
            Build a world space to camera space matrix
            </summary>
            <returns>A Matrix4 that transforms world space to camera space</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.LookAt(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="eyeX">Eye (camera) position in world space</param>
            <param name="eyeY">Eye (camera) position in world space</param>
            <param name="eyeZ">Eye (camera) position in world space</param>
            <param name="targetX">Target position in world space</param>
            <param name="targetY">Target position in world space</param>
            <param name="targetZ">Target position in world space</param>
            <param name="upX">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upY">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upZ">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <summary>
            Build a world space to camera space matrix
            </summary>
            <returns>A Matrix4 that transforms world space to camera space</returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M42">
            <summary>
            Gets or sets the value at row 4, column 2 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Matrix4.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Mult(Urho.Matrix4,Urho.Matrix4)">
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <summary>
            Multiplies two instances.
            </summary>
            <returns>A new instance that is the result of the multiplication</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Mult(Urho.Matrix4@,Urho.Matrix4@,Urho.Matrix4@)">
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <param name="result">A new instance that is the result of the multiplication</param>
            <summary>
            Multiplies two instances.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.op_Equality(Urho.Matrix4,Urho.Matrix4)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Compares two instances for equality.
            </summary>
            <returns>True, if left equals right; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.op_Inequality(Urho.Matrix4,Urho.Matrix4)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Compares two instances for inequality.
            </summary>
            <returns>True, if left does not equal right; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.op_Multiply(Urho.Matrix4,Urho.Matrix4)">
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <summary>
            Matrix multiplication
            </summary>
            <returns>A new Matrix44 which holds the result of the multiplication</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <summary>
            Build a projection matrix
            </summary>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Rotate(Urho.Quaternion)">
            <param name="q">the quaternion</param>
            <summary>
            Build a rotation matrix from a quaternion
            </summary>
            <returns>A rotation matrix</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Rotate(Urho.Vector3,System.Single)">
            <param name="axis">the axis to rotate about</param>
            <param name="angle">angle in radians to rotate counter-clockwise (looking in the direction of the given axis)</param>
            <summary>
            Build a rotation matrix to rotate about the given axis
            </summary>
            <returns>A rotation matrix</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.RotateX(System.Single)">
            <param name="angle">angle in radians to rotate counter-clockwise around the x-axis</param>
            <summary>
            Build a rotation matrix that rotates about the x-axis
            </summary>
            <returns>A rotation matrix</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.RotateY(System.Single)">
            <param name="angle">angle in radians to rotate counter-clockwise around the y-axis</param>
            <summary>
            Build a rotation matrix that rotates about the y-axis
            </summary>
            <returns>A rotation matrix</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.RotateZ(System.Single)">
            <param name="angle">angle in radians to rotate counter-clockwise around the z-axis</param>
            <summary>
            Build a rotation matrix that rotates about the z-axis
            </summary>
            <returns>A rotation matrix</returns>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix4.Row0">
            <summary>
            Top row of the matrix
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix4.Row1">
            <summary>
            2nd row of the matrix
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix4.Row2">
            <summary>
            3rd row of the matrix
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Matrix4.Row3">
            <summary>
            Bottom row of the matrix
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Scale(System.Single)">
            <param name="scale">Single scale factor for x,y and z axes</param>
            <summary>
            Build a scaling matrix
            </summary>
            <returns>A scaling matrix</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Scale(Urho.Vector3)">
            <param name="scale">Scale factors for x,y and z axes</param>
            <summary>
            Build a scaling matrix
            </summary>
            <returns>A scaling matrix</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Scale(System.Single,System.Single,System.Single)">
            <param name="x">Scale factor for x-axis</param>
            <param name="y">Scale factor for y-axis</param>
            <param name="z">Scale factor for z-axis</param>
            <summary>
            Build a scaling matrix
            </summary>
            <returns>A scaling matrix</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.ToString">
            <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
            <returns />
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Translation(Urho.Vector3)">
            <param name="trans">The translation vector.</param>
            <summary>
            Builds a translation matrix.
            </summary>
            <returns>A new Matrix4 instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Translation(System.Single,System.Single,System.Single)">
            <param name="x">X translation</param>
            <param name="y">Y translation</param>
            <param name="z">Z translation</param>
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <returns>A Translation matrix</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Transpose">
            <summary>
            Converts this instance into its transpose.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Transpose(Urho.Matrix4)">
            <param name="mat">The matrix to transpose</param>
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <returns>The transpose of the given matrix</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Matrix4.Transpose(Urho.Matrix4@,Urho.Matrix4@)">
            <param name="mat">The matrix to transpose</param>
            <param name="result">The result of the calculation</param>
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Menu">
            <summary>
            %Menu %UI element that optionally shows a popup.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Menu(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Menu, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Menu(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Menu that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Menu attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Menu(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Menu.AcceleratorKey">
            <summary>
            Return accelerator key code, 0 if disabled.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Menu.AcceleratorQualifiers">
            <summary>
            Return accelerator qualifiers.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Menu.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Menu.IsPopupShown">
            <summary>
            Return whether popup is open.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Menu.LoadXml(Urho.XmlElement,Urho.XmlFile,System.Boolean)">
            <param name="source"></param>
            <param name="styleFile"></param>
            <param name="setInstanceDefault"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Menu.OnHidePopup">
            <summary>
            React to the popup being hidden.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Menu.OnHover(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse hover.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Menu.OnShowPopup">
            <summary>
            React to the popup being shown.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Menu.Popup">
            <summary>
            Return popup element.
            Or
            Set popup element to show on selection.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Menu.PopupOffset">
            <summary>
            Return popup element offset.
            Or
            Set popup element offset.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Menu.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Menu.SaveXml(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Menu.SetAccelerator(System.Int32,System.Int32)">
            <param name="key"></param>
            <param name="qualifiers"></param>
            <summary>
            Set accelerator key (set zero key code to disable.)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Menu.SetPopupOffset(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set popup element offset.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Menu.ShowPopup(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Force the popup to show or hide.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Menu.SubscribeToMenuSelected(System.Action{Urho.MenuSelectedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the MenuSelected event raised by the Menu.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Menu.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Menu.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Menu.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Menu.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Menu.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Perform UI element update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MenuSelectedEventArgs">
            <summary>Event arguments for the Menu's MenuSelected event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MenuSelectedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MessageACKEventArgs">
            <summary>Event arguments for the MessageBox's MessageACK event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MessageACKEventArgs.Ok">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MessageBox">
            <summary>
            Message box dialog.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.MessageBox(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of MessageBox, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.MessageBox(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.MessageBox(Urho.Context,System.String,System.String,Urho.XmlFile,Urho.XmlFile)">
            <param name="context">The context that this object will be attached to.</param>
            <param name="messageString"></param>
            <param name="titleString"></param>
            <param name="layoutFile"></param>
            <param name="styleFile"></param>
            <summary>Creates an instance of MessageBox that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of MessageBox attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="P:Urho.MessageBox.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.MessageBox.Message">
            <summary>
            Return message text. Return empty string if there is no message text element.
            Or
            Set message text. No-ops if there is no message text element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MessageBox.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MessageBox.SubscribeToMessageACK(System.Action{Urho.MessageACKEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the MessageACK event raised by the MessageBox.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.MessageBox.Title">
            <summary>
            Return title text. Return empty string if there is no title text element.
            Or
            Set title text. No-ops if there is no title text element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MessageBox.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.MessageBox.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.MessageBox.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.MessageBox.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MessageBox.Window">
            <summary>
            Return dialog window.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ModalChangedEventArgs">
            <summary>Event arguments for the Window's ModalChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ModalChangedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ModalChangedEventArgs.Modal">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Model">
            <summary>
            3D model resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Model(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Model, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Model(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Model that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Model attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Model(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Model.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Model.BoundingBox">
            <summary>
            Return bounding box.
            Or
            Set local-space bounding box.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.Clone">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.Clone(System.String)">
            <param name="cloneName"></param>
            <summary>
            Clone the model. The geometry data is deep-copied and can be modified in the clone without affecting the original.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.GetGeometry(System.UInt32,System.UInt32)">
            <param name="index"></param>
            <param name="lodLevel"></param>
            <summary>
            Return geometry by index and LOD level. The LOD level is clamped if out of range.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.GetGeometryCenter(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return geometry center by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.GetMorph(System.String)">
            <param name="name"></param>
            <summary>
            Return vertex morph by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.GetMorph(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return vertex morph by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.GetMorph(Urho.StringHash)">
            <param name="nameHash"></param>
            <summary>
            Return vertex morph by name hash.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.GetMorphRangeCount(System.UInt32)">
            <param name="bufferIndex"></param>
            <summary>
            Return vertex buffer morph range vertex count.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.GetMorphRangeStart(System.UInt32)">
            <param name="bufferIndex"></param>
            <summary>
            Return vertex buffer morph range start.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.GetNumGeometryLodLevels(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return number of LOD levels in geometry.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Model.IndexBuffers">
            <summary>
            Return index buffers.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Model.NumGeometries">
            <summary>
            Return number of geometries.
            Or
            Set number of geometries.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Model.NumMorphs">
            <summary>
            Return number of vertex morphs.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.SetGeometry(System.UInt32,System.UInt32,Urho.Geometry)">
            <param name="index"></param>
            <param name="lodLevel"></param>
            <param name="geometry"></param>
            <summary>
            Set geometry.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.SetGeometryCenter(System.UInt32,Urho.Vector3)">
            <param name="index"></param>
            <param name="center"></param>
            <summary>
            Set geometry center.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Model.SetNumGeometryLodLevels(System.UInt32,System.UInt32)">
            <param name="index"></param>
            <param name="num"></param>
            <summary>
            Set number of LOD levels in a geometry.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Model.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Model.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Model.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Model.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Model.VertexBuffers">
            <summary>
            Return vertex buffers.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ModelMorph">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MonoDebugHud">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.MonoDebugHud(Urho.Application)">
            <param name="application"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MonoDebugHud.AdditionalText">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MonoDebugHud.Hide">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MonoDebugHud.Show">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MonoPInvokeCallbackAttribute">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.MonoPInvokeCallbackAttribute(System.Type)">
            <param name="type"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MonoPInvokeCallbackAttribute.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="T:Urho.MouseButton">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MouseButton.Left">
            <summary></summary>
        </member>
        <member name="F:Urho.MouseButton.Middle">
            <summary></summary>
        </member>
        <member name="F:Urho.MouseButton.Right">
            <summary></summary>
        </member>
        <member name="F:Urho.MouseButton.X1">
            <summary></summary>
        </member>
        <member name="F:Urho.MouseButton.X2">
            <summary></summary>
        </member>
        <member name="T:Urho.MouseButtonDownEventArgs">
            <summary>Event arguments for the Input's MouseButtonDown event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseButtonDownEventArgs.Button">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseButtonDownEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseButtonDownEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MouseButtonUpEventArgs">
            <summary>Event arguments for the Input's MouseButtonUp event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseButtonUpEventArgs.Button">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseButtonUpEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseButtonUpEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MouseMode">
            <summary>Input Mouse Modes.
            </summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:Urho.MouseMode.Absolute">
            <summary>The default behaviour, allowing the toggling of operating system cursor visibility and allowing the cursor to escape the window when visible. When the operating system cursor is invisible in absolute mouse mode, the mouse is confined to the window. If the operating system and UI cursors are both invisible, interaction with the user interface will be limited (for example, drag move and drag end events will not trigger).    Setting this value to Absolute will call SetMouseGrabbed(false).</summary>
        </member>
        <member name="F:Urho.MouseMode.Relative">
            <summary>sets the operating system cursor to invisible and confines the cursor to the window. The operating system cursor cannot be set to be visible in this mode via SetMouseVisible(), however changes are tracked and will be restored when another mouse mode is set. When the virtual cursor is also invisible, UI interaction will still function as normal (eg: drag events will trigger). Setting this will call SetMouseGrabbed(true).</summary>
        </member>
        <member name="F:Urho.MouseMode.Wrap">
            <summary>Grabs the mouse from the operating system and confines the operating system cursor to the window, wrapping the cursor when it is near the edges. Setting this will call SetMouseGrabbed(true).</summary>
        </member>
        <member name="T:Urho.MouseModeChangedEventArgs">
            <summary>Event arguments for the Input's MouseModeChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseModeChangedEventArgs.Mode">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MouseMoveEventArgs">
            <summary>Event arguments for the Input's MouseMove event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseMoveEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseMoveEventArgs.DX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseMoveEventArgs.DY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseMoveEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseMoveEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseMoveEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MouseVisibleChangedEventArgs">
            <summary>Event arguments for the Input's MouseVisibleChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseVisibleChangedEventArgs.Visible">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MouseWheelEventArgs">
            <summary>Event arguments for the Input's MouseWheel event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseWheelEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseWheelEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MouseWheelEventArgs.Wheel">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MoveBy">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.MoveBy(System.Single,Urho.Vector3)">
            <param name="duration"></param>
            <param name="position"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MoveBy.PositionDelta">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MoveBy.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MoveBy.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MoveByState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.MoveByState(Urho.MoveBy,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MoveByState.EndPosition">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MoveByState.PositionDelta">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MoveByState.PreviousPosition">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MoveByState.StartPosition">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MoveByState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MoveTo">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.MoveTo(System.Single,Urho.Vector3)">
            <param name="duration"></param>
            <param name="position"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.MoveTo.EndPosition">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MoveTo.PositionEnd">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MoveTo.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MoveToState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.MoveToState(Urho.MoveTo,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.MoveToState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.MultiGestureEventArgs">
            <summary>Event arguments for the Input's MultiGesture event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MultiGestureEventArgs.CenterX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MultiGestureEventArgs.CenterY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MultiGestureEventArgs.DDist">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MultiGestureEventArgs.DTheta">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.MultiGestureEventArgs.NumFingers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NameChangedEventArgs">
            <summary>Event arguments for the UIElement's NameChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NameChangedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NavArea">
            <summary>
            Construct.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.NavArea(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of NavArea, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.NavArea(Urho.Context)">
            <param name="param1"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.NavArea(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.NavArea.AreaID">
            <summary>
            Get the area id for this volume.
            Or
            Set the area id for this volume.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavArea.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.NavArea.BoundingBox">
            <summary>
            Get the bounding box of this navigation area, in local space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavArea.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Render debug geometry for the bounds.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavArea.RegisterObject(Urho.Context)">
            <param name="param1"></param>
            <summary>
            Register object factory and attributes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavArea.SetBoundingBox(Urho.BoundingBox)">
            <param name="bnds"></param>
            <summary>
            Set the bounding box of this area, in local space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavArea.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.NavArea.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.NavArea.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.NavArea.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavArea.WorldBoundingBox">
            <summary>
            Get the bounds of this navigation area in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Navigable">
            <summary>
            Component which tags geometry for inclusion in the navigation mesh. Optionally auto-includes geometry from child nodes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Navigable(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Navigable, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Navigable(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Navigable that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Navigable attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Navigable(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Navigable.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Navigable.IsRecursive">
            <summary>
            Return whether geometry is automatically collected from child nodes.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Navigable.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Navigable.SetRecursive(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether geometry is automatically collected from child nodes. Default true.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Navigable.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Navigable.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Navigable.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Navigable.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NavigationAreaRebuiltEventArgs">
            <summary>Event arguments for the NavigationMesh's NavigationAreaRebuilt event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationAreaRebuiltEventArgs.BoundsMax">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationAreaRebuiltEventArgs.BoundsMin">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationAreaRebuiltEventArgs.Mesh">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationAreaRebuiltEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NavigationMesh">
            <summary>
            Navigation mesh component. Collects the navigation geometry from child nodes with the Navigable component and responds to path queries.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.NavigationMesh(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of NavigationMesh, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.NavigationMesh(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of NavigationMesh that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of NavigationMesh attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.NavigationMesh(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.NavigationMesh.AgentHeight">
            <summary>
            Return navigation agent height.
            Or
            Set navigation agent height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.AgentMaxClimb">
            <summary>
            Return navigation agent max vertical climb.
            Or
            Set navigation agent max vertical climb.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.AgentMaxSlope">
            <summary>
            Return navigation agent max slope.
            Or
            Set navigation agent max slope.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.AgentRadius">
            <summary>
            Return navigation agent radius.
            Or
            Set navigation agent radius.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.NavigationMesh.BoundingBox">
            <summary>
            Return local space bounding box of the navigation mesh.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.Build">
            <summary>
            Rebuild the navigation mesh. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.Build(Urho.BoundingBox)">
            <param name="boundingBox"></param>
            <summary>
            Rebuild part of the navigation mesh contained by the world-space bounding box. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.CellHeight">
            <summary>
            Return cell height.
            Or
            Set cell height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.CellSize">
            <summary>
            Return cell size.
            Or
            Set cell size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.DetailSampleDistance">
            <summary>
            Return detail sampling distance.
            Or
            Set detail sampling distance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.DetailSampleMaxError">
            <summary>
            Return detail sampling maximum error.
            Or
            Set detail sampling maximum error.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.DrawDebugGeometry(System.Boolean)">
            <param name="depthTest"></param>
            <summary>
            Add debug geometry to the debug renderer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.DrawNavAreas">
            <summary>
            Return whether to draw NavArea components.
            Or
            Draw debug geometry for NavArea components.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.DrawOffMeshConnections">
            <summary>
            Return whether to draw OffMeshConnection components.
            Or
            Draw debug geometry for OffMeshConnection components.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.EdgeMaxError">
            <summary>
            Return edge max error.
            Or
            Set edge max error.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.EdgeMaxLength">
            <summary>
            Return edge max length.
            Or
            Set edge max length.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.FindNearestPoint(Urho.Vector3,Urho.Vector3)">
            <param name="hitPos"></param>
            <param name="vector3"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.FindNearestPoint(Urho.Vector3,Urho.Vector3,Urho.dtQueryFilter*,System.UInt32*)">
            <param name="point"></param>
            <param name="extents"></param>
            <param name="filter"></param>
            <param name="nearestRef"></param>
            <summary>
            Find the nearest point on the navigation mesh to a given point. Extents specifies how far out from the specified point to check along each axis.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.FindPath(Urho.Vector3,Urho.Vector3)">
            <param name="start"></param>
            <param name="end"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.GetAreaCost(System.UInt32)">
            <param name="areaID"></param>
            <summary>
            Get the current cost of an area
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.GetDistanceToWall(Urho.Vector3,System.Single,Urho.Vector3,Urho.dtQueryFilter*,Urho.Vector3*,Urho.Vector3*)">
            <param name="point"></param>
            <param name="radius"></param>
            <param name="extents"></param>
            <param name="filter"></param>
            <param name="hitPos"></param>
            <param name="hitNormal"></param>
            <summary>
            Return distance to wall from a point. Maximum search radius must be specified.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.GetRandomPoint(Urho.dtQueryFilter*,System.UInt32*)">
            <param name="filter"></param>
            <param name="randomRef"></param>
            <summary>
            Return a random point on the navigation mesh.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.GetRandomPointInCircle(Urho.Vector3,System.Single,Urho.Vector3,Urho.dtQueryFilter*,System.UInt32*)">
            <param name="center"></param>
            <param name="radius"></param>
            <param name="extents"></param>
            <param name="filter"></param>
            <param name="randomRef"></param>
            <summary>
            Return a random point on the navigation mesh within a circle. The circle radius is only a guideline and in practice the returned point may be further away.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.IsInitialized">
            <summary>
            Return whether has been initialized with valid navigation data.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.MeshName">
            <summary>
            Return the given name of this navigation mesh.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.MoveAlongSurface(Urho.Vector3,Urho.Vector3,Urho.Vector3,System.Int32,Urho.dtQueryFilter*)">
            <param name="start"></param>
            <param name="end"></param>
            <param name="extents"></param>
            <param name="maxVisited"></param>
            <param name="filter"></param>
            <summary>
            Try to move along the surface from one point to another.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.NumTiles">
            <summary>
            Return number of tiles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.Padding">
            <summary>
            Return navigation mesh bounding box padding.
            Or
            Set padding of the navigation mesh bounding box. Having enough padding allows to add geometry on the extremities of the navigation mesh when doing partial rebuilds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.PartitionType">
            <summary>
            Return Partition Type.
            Or
            Set the partition type used for polygon generation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.Raycast(Urho.Vector3,Urho.Vector3,Urho.Vector3,Urho.dtQueryFilter*,Urho.Vector3*)">
            <param name="start"></param>
            <param name="end"></param>
            <param name="extents"></param>
            <param name="filter"></param>
            <param name="hitNormal"></param>
            <summary>
            Perform a walkability raycast on the navigation mesh between start and end and return the point where a wall was hit, or the end point if no walls.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.RegionMergeSize">
            <summary>
            Return region merge size.
            Or
            Set region merge size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.RegionMinSize">
            <summary>
            Return region minimum size.
            Or
            Set region minimum size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.SetAreaCost(System.UInt32,System.Single)">
            <param name="areaID"></param>
            <param name="cost"></param>
            <summary>
            Set the cost of an area.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.SetMeshName(System.String)">
            <param name="newName"></param>
            <summary>
            Set the name of this navigation mesh.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NavigationMesh.SubscribeToNavigationAreaRebuilt(System.Action{Urho.NavigationAreaRebuiltEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NavigationAreaRebuilt event raised by the NavigationMesh.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.NavigationMesh.SubscribeToNavigationMeshRebuilt(System.Action{Urho.NavigationMeshRebuiltEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NavigationMeshRebuilt event raised by the NavigationMesh.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.NavigationMesh.TileSize">
            <summary>
            Return tile size.
            Or
            Set tile size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.NavigationMesh.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.NavigationMesh.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.NavigationMesh.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMesh.WorldBoundingBox">
            <summary>
            Return world space bounding box of the navigation mesh.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NavigationMeshRebuiltEventArgs">
            <summary>Event arguments for the NavigationMesh's NavigationMeshRebuilt event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMeshRebuiltEventArgs.Mesh">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationMeshRebuiltEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NavigationObstacleAddedEventArgs">
            <summary>Event arguments for the DynamicNavigationMesh's NavigationObstacleAdded event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationObstacleAddedEventArgs.Height">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationObstacleAddedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationObstacleAddedEventArgs.Obstacle">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationObstacleAddedEventArgs.Position">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationObstacleAddedEventArgs.Radius">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NavigationObstacleRemovedEventArgs">
            <summary>Event arguments for the DynamicNavigationMesh's NavigationObstacleRemoved event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationObstacleRemovedEventArgs.Height">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationObstacleRemovedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationObstacleRemovedEventArgs.Obstacle">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationObstacleRemovedEventArgs.Position">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NavigationObstacleRemovedEventArgs.Radius">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NavigationPushiness">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.NavigationPushiness.High">
            <summary></summary>
        </member>
        <member name="F:Urho.NavigationPushiness.Low">
            <summary></summary>
        </member>
        <member name="F:Urho.NavigationPushiness.Medium">
            <summary></summary>
        </member>
        <member name="T:Urho.NavigationQuality">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.NavigationQuality.High">
            <summary></summary>
        </member>
        <member name="F:Urho.NavigationQuality.Low">
            <summary></summary>
        </member>
        <member name="F:Urho.NavigationQuality.Medium">
            <summary></summary>
        </member>
        <member name="T:Urho.NavmeshPartitionType">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.NavmeshPartitionType.Monotone">
            <summary></summary>
        </member>
        <member name="F:Urho.NavmeshPartitionType.Watershed">
            <summary></summary>
        </member>
        <member name="T:Urho.Network">
            <summary>
            %Network subsystem. Manages client-server communications using the UDP protocol.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Network(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Network, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Network(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Network that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Network attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Network(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Network.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Network.BroadcastMessage(System.Int32,System.Boolean,System.Boolean,System.Byte*,System.UInt32,System.UInt32)">
            <param name="msgID"></param>
            <param name="reliable"></param>
            <param name="inOrder"></param>
            <param name="data"></param>
            <param name="numBytes"></param>
            <param name="contentID"></param>
            <summary>
            Broadcast a message with content ID to all client connections.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.CheckRemoteEvent(Urho.StringHash)">
            <param name="eventType"></param>
            <summary>
            Return whether a remote event is allowed to be received.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.Connect(System.String,System.Int16,Urho.Scene)">
            <param name="address"></param>
            <param name="port"></param>
            <param name="scene"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.Disconnect(System.Int32)">
            <param name="waitMSec"></param>
            <summary>
            Disconnect the connection to the server. If wait time is non-zero, will block while waiting for disconnect to finish.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.IsServerRunning">
            <summary>
            Return whether the server is running.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Network.PackageCacheDir">
            <summary>
            Return the package download cache directory.
            Or
            Set the package download cache directory.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.PostUpdate(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Send outgoing messages after frame logic. Called by HandleRenderUpdate.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.RegisterRemoteEvent(Urho.StringHash)">
            <param name="eventType"></param>
            <summary>
            Register a remote event as allowed to be received. There is also a fixed blacklist of events that can not be allowed in any case, such as ConsoleCommand.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.SendPackageToClients(Urho.Scene,Urho.PackageFile)">
            <param name="scene"></param>
            <param name="package"></param>
            <summary>
            Trigger all client connections in the specified scene to download a package file from the server. Can be used to download additional resource packages when clients are already joined in the scene. The package must have been added as a requirement to the scene, or else the eventual download will fail.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Network.ServerConnection">
            <summary>
            Return the connection to the server. Null if not connected.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Network.SimulatedLatency">
            <summary>
            Return simulated latency in milliseconds.
            Or
            Set simulated latency in milliseconds. This adds a fixed delay before sending each packet.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Network.SimulatedPacketLoss">
            <summary>
            Return simulated packet loss probability.
            Or
            Set simulated packet loss probability between 0.0 - 1.0.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.StartServer(System.UInt16)">
            <param name="port"></param>
            <summary>
            Start a server on a port using UDP protocol. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.StopServer">
            <summary>
            Stop the server.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.SubscribeToConnectFailed(System.Action{Urho.ConnectFailedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ConnectFailed event raised by the Network.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Network.SubscribeToNetworkUpdate(System.Action{Urho.NetworkUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NetworkUpdate event raised by the Network.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Network.SubscribeToNetworkUpdateSent(System.Action{Urho.NetworkUpdateSentEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NetworkUpdateSent event raised by the Network.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Network.SubscribeToServerConnected(System.Action{Urho.ServerConnectedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ServerConnected event raised by the Network.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Network.SubscribeToServerDisconnected(System.Action{Urho.ServerDisconnectedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ServerDisconnected event raised by the Network.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Network.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Network.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Network.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Network.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.UnregisterAllRemoteEvents">
            <summary>
            Unregister all remote events.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.UnregisterRemoteEvent(Urho.StringHash)">
            <param name="eventType"></param>
            <summary>
            Unregister a remote event as allowed to received.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Network.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Process incoming messages from connections. Called by HandleBeginFrame.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Network.UpdateFps">
            <summary>
            Return network update FPS.
            Or
            Set network update FPS.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NetworkMessageEventArgs">
            <summary>Event arguments for the Connection's NetworkMessage event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NetworkMessageEventArgs.Connection">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NetworkMessageEventArgs.Data">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NetworkMessageEventArgs.MessageID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NetworkPriority">
            <summary>
            %Network interest management settings component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.NetworkPriority(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of NetworkPriority, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.NetworkPriority(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of NetworkPriority that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of NetworkPriority attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.NetworkPriority(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.NetworkPriority.AlwaysUpdateOwner">
            <summary>
            Return whether updates to owner should be sent always at full rate.
            Or
            Set whether updates to owner should be sent always at full rate. Default true.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NetworkPriority.BasePriority">
            <summary>
            Return base priority.
            Or
            Set base priority. Default 100 (send updates at full frequency.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NetworkPriority.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.NetworkPriority.DistanceFactor">
            <summary>
            Return priority reduction distance factor.
            Or
            Set priority reduction distance factor. Default 0 (no effect.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NetworkPriority.MinPriority">
            <summary>
            Return minimum priority.
            Or
            Set minimum priority. Default 0 (no updates when far away enough.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.NetworkPriority.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NetworkPriority.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.NetworkPriority.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.NetworkPriority.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.NetworkPriority.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NetworkSceneLoadFailedEventArgs">
            <summary>Event arguments for the Connection's NetworkSceneLoadFailed event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NetworkSceneLoadFailedEventArgs.Connection">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NetworkState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NetworkUpdateEventArgs">
            <summary>Event arguments for the Network's NetworkUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NetworkUpdateSentEventArgs">
            <summary>Event arguments for the Network's NetworkUpdateSent event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Node">
            <summary />
            <remarks />
        </member>
        <member name="C:Urho.Node(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Node, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Node(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Node that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Node attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Node(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Node.AddChild(Urho.Node)">
            <param name="node"></param>
            <summary>Adds the specified node as a child of this node.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.AddChild(Urho.Node,System.UInt32)">
            <param name="node"></param>
            <param name="index"></param>
            <summary>
            Add a child scene node at a specific index. If index is not explicitly specified or is greater than current children size, append the new child at the end.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.AddComponent(Urho.Component,System.UInt32)">
            <param name="component"></param>
            <param name="id"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.AddComponent(Urho.Component,System.UInt32,Urho.CreateMode)">
            <param name="component"></param>
            <param name="id"></param>
            <param name="mode"></param>
            <summary>
            Add a pre-created component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.AddListener(Urho.Component)">
            <param name="component"></param>
            <summary>
            Add listener component that is notified of node being dirtied. Can either be in the same node or another.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.AddReplicationState(Urho.NodeReplicationState*)">
            <param name="state"></param>
            <summary>
            Add a replication state that is tracking this node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately recursively to child nodes and components.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Node.BaseTypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Children">
            <summary>
            Return immediate child scene nodes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.CleanupConnection(Urho.Connection)">
            <param name="connection"></param>
            <summary>
            Clean up all references to a network connection that is about to be removed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.Clone(Urho.CreateMode)">
            <param name="mode"></param>
            <summary>
            Clone scene node, components and child nodes. Return the clone.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.CloneComponent(Urho.Component,System.UInt32)">
            <param name="component"></param>
            <param name="id"></param>
            <summary>
            Clone a component from another node using its create mode. Return the clone if successful or null on failure.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.CloneComponent(Urho.Component,Urho.CreateMode,System.UInt32)">
            <param name="component"></param>
            <param name="mode"></param>
            <param name="id"></param>
            <summary>
            Clone a component from another node and specify the create mode. Return the clone if successful or null on failure.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Components">
            <summary>
            Return all components.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.CreateChild(System.UInt32,Urho.CreateMode)">
            <param name="id"></param>
            <param name="mode"></param>
            <summary>
            Create a child node with specific ID.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.CreateChild(System.String,System.UInt32,Urho.CreateMode)">
            <param name="name"></param>
            <param name="id"></param>
            <param name="mode"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.CreateChild(System.String,Urho.CreateMode,System.UInt32)">
            <param name="name"></param>
            <param name="mode"></param>
            <param name="id"></param>
            <summary>
            Create a child scene node (with specified ID if provided).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.CreateComponent(Urho.StringHash,Urho.CreateMode,System.UInt32)">
            <param name="type">UrhoType to create.</param>
            <param name="mode">Creation mode for the component, or Replicated if not specified.</param>
            <param name="id">ID to assign to the component, or null if not specified.</param>
            <summary>
            Create a component to this node (with specified ID if provided).
            </summary>
            <returns>Returns the created component.  The result will already be attached to the node.</returns>
            <remarks>
                <para />
                <example>
                    <code lang="C#"><![CDATA[var planeObject = planeNode.CreateComponent (StaticModel.TypeStatic, CreateMode.Replicated, 0) as StaticModel;
planeObject.Model = cache.GetModel ("Models/Plane.mdl");
planeObject.SetMaterial(cache.GetMaterial("Materials/StoneTiled.xml"));
]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Urho.Node.CreateComponent``1(Urho.CreateMode,System.UInt32)">
            <typeparam name="T"></typeparam>
            <param name="mode">Creation mode for the component, or Replicated if not specified.</param>
            <param name="id">ID to assign to the component, or null if not specified.</param>
            <summary>Creates a component with the Node’s context and attaches it to the node.</summary>
            <returns>Returns the created component.  The result will already be attached to the node.</returns>
            <remarks>
                <para />
                <para />
                <example>
                    <code lang="C#"><![CDATA[var planeObject = planeNode.CreateComponent<StaticModel> ();
planeObject.Model = cache.GetModel ("Models/Plane.mdl");
planeObject.SetMaterial(cache.GetMaterial("Materials/StoneTiled.xml"));
]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:Urho.Node.CreateComponent``1(Urho.StringHash,Urho.CreateMode,System.UInt32)">
            <typeparam name="T"></typeparam>
            <param name="type">UrhoType to create, </param>
            <param name="mode">
                <para>Creation mode for the component, or Replicated if not specified.</para>
                <para />
            </param>
            <param name="id">ID to assign to the component, or null if not specified.</param>
            <summary>Creates a component with the Node’s context and attaches it to the node using an UrhoType description.</summary>
            <returns>Returns the created component.  The result will already be attached to the node.</returns>
            <remarks>
                <para />
                <example>
                    <code lang="C#"><![CDATA[var planeObject = planeNode.CreateComponent<StaticModel> (StaticModel.TypeStatic);
planeObject.Model = cache.GetModel ("Models/Plane.mdl");
planeObject.SetMaterial(cache.GetMaterial("Materials/StoneTiled.xml"));
]]></code>
                </example>.</remarks>
        </member>
        <member name="P:Urho.Node.Direction">
            <summary>
            Return forward direction in parent space. Positive Z axis equals identity rotation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.GetChild(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return child scene node by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.GetChild(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="recursive"></param>
            <summary>
            Return child scene node by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.GetChild(Urho.StringHash,System.Boolean)">
            <param name="nameHash"></param>
            <param name="recursive"></param>
            <summary>
            Return child scene node by name hash.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.GetChildrenWithComponent``1(System.Boolean)">
            <typeparam name="T"></typeparam>
            <param name="recursive"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.GetComponent(Urho.StringHash,System.Boolean)">
            <param name="type"></param>
            <param name="recursive"></param>
            <summary>
            Return component by type. If there are several, returns the first.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.GetComponent``1(System.Boolean)">
            <typeparam name="T"></typeparam>
            <param name="recursive"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.GetNumChildren(System.Boolean)">
            <param name="recursive"></param>
            <summary>
            Return number of child scene nodes.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.GetOrCreateComponent(Urho.StringHash,Urho.CreateMode,System.UInt32)">
            <param name="type"></param>
            <param name="mode"></param>
            <param name="id"></param>
            <summary>
            Create a component to this node if it does not exist already.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.HasComponent(Urho.StringHash)">
            <param name="type"></param>
            <summary>
            Return whether has a specific component.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.ID">
            <summary>
            Return ID.
            Or
            Set ID. Called by Scene.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.IsDirty">
            <summary>
            Return whether transform has changed and world transform needs recalculation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.IsEnabled">
            <summary>
            Return whether is enabled. Disables nodes effectively disable all their components.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.IsEnabledSelf">
            <summary>
            Returns the node's last own enabled state. May be different than the value returned by IsEnabled when SetDeepEnabled has been used.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.LoadXml(Urho.XmlElement,System.Boolean)">
            <param name="source"></param>
            <param name="setInstanceDefault"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.LocalToWorld(Urho.Vector3)">
            <param name="position"></param>
            <summary>
            Convert a local space position to world space.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.LocalToWorld(Urho.Vector4)">
            <param name="vector"></param>
            <summary>
            Convert a local space position or rotation to world space.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.LocalToWorld2D(Urho.Vector2)">
            <param name="vector"></param>
            <summary>
            Convert a local space position or rotation to world space (for Urho2D).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.LookAt(Urho.Vector3,Urho.Vector3,Urho.TransformSpace)">
            <param name="target"></param>
            <param name="up"></param>
            <param name="space"></param>
            <summary>
            Look at a target position in the chosen transform space. Note that the up vector is always specified in world space. Return true if successful, or false if resulted in an illegal rotation, in which case the current rotation remains.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.MarkDirty">
            <summary>
            Mark node and child nodes to need world transform recalculation. Notify listener components.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.MarkNetworkUpdate">
            <summary>
            Mark for attribute check on the next network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.MarkReplicationDirty">
            <summary>
            Mark node dirty in scene replication states.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Name">
            <summary>
            Return name.
            Or
            Set name of the scene node. Names are not required to be unique.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.NameHash">
            <summary>
            Return name hash.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.NetPositionAttr">
            <summary>
            Return network position attribute.
            Or
            Set network position attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.NumComponents">
            <summary>
            Return number of components.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.NumNetworkComponents">
            <summary>
            Return number of non-local components.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.NumPersistentChildren">
            <summary>
            Calculate number of non-temporary child nodes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.NumPersistentComponents">
            <summary>
            Calculate number of non-temporary components.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Owner">
            <summary>
            Return owner connection in networking.
            Or
            Set owner connection for networking.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Parent">
            <summary>
            Return parent scene node.
            Or
            Set parent scene node. Retains the world transform.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.PauseAllActions">
            <summary>Pauses all actions that have been started with <see cref="T:Urho.Node.RunActionsAsync" />.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.Pitch(System.Single,Urho.TransformSpace)">
            <param name="angle"></param>
            <param name="space"></param>
            <summary>
            Rotate around the X axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Position">
            <summary>
            Return position in parent space.
            Or
            Set position in parent space. If the scene node is on the root level (is child of the scene itself), this is same as world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Position2D">
            <summary>
            Return position in parent space (for Urho2D).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.PrepareNetworkUpdate">
            <summary>
            Prepare network update by comparing attributes and marking replication states dirty as necessary.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.Remove">
            <summary>
            Remove from the parent node. If no other shared pointer references exist, causes immediate deletion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RemoveAllActions">
            <summary>Removes all actions that have been started with <see cref="T:Urho.Node.RunActionsAsync" />.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RemoveAllChildren">
            <summary>
            Remove all child scene nodes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RemoveAllComponents">
            <summary>
            Remove all components from this node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RemoveChild(Urho.Node)">
            <param name="node"></param>
            <summary>
            Remove a child scene node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RemoveChildren(System.Boolean,System.Boolean,System.Boolean)">
            <param name="removeReplicated"></param>
            <param name="removeLocal"></param>
            <param name="recursive"></param>
            <summary>
            Remove child scene nodes that match criteria.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RemoveComponent(Urho.Component)">
            <param name="component"></param>
            <summary>
            Remove a component from this node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RemoveComponent(Urho.StringHash)">
            <param name="type"></param>
            <summary>
            Remove the first component of specific type from this node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RemoveComponent``1">
            <typeparam name="T"></typeparam>
            <summary>Removes the component of the specified type.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RemoveComponents(Urho.StringHash)">
            <param name="type"></param>
            <summary>
            Remove all components of specific type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RemoveComponents(System.Boolean,System.Boolean)">
            <param name="removeReplicated"></param>
            <param name="removeLocal"></param>
            <summary>
            Remove components that match criteria.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RemoveListener(Urho.Component)">
            <param name="component"></param>
            <summary>
            Remove listener component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.ResetDeepEnabled">
            <summary>
            Reset enabled state to the node's remembered state prior to calling SetDeepEnabled.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.ResetScene">
            <summary>
            Reset scene, ID and owner. Called by Scene.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.ResumeAllActions">
            <summary>Resumes all actions that have been started with <see cref="T:Urho.Node.RunActionsAsync" />.</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Right">
            <summary>
            Return right direction in parent space. Positive X axis equals identity rotation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.Roll(System.Single,Urho.TransformSpace)">
            <param name="angle"></param>
            <param name="space"></param>
            <summary>
            Rotate around the Z axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.Rotate(Urho.Quaternion,Urho.TransformSpace)">
            <param name="delta"></param>
            <param name="space"></param>
            <summary>
            Rotate the scene node in the chosen transform space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.Rotate2D(System.Single,Urho.TransformSpace)">
            <param name="delta"></param>
            <param name="space"></param>
            <summary>
            Rotate the scene node in the chosen transform space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RotateAround(Urho.Vector3,Urho.Quaternion,Urho.TransformSpace)">
            <param name="point"></param>
            <param name="delta"></param>
            <param name="space"></param>
            <summary>
            Rotate around a point in the chosen transform space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RotateAround2D(Urho.Vector2,System.Single,Urho.TransformSpace)">
            <param name="point"></param>
            <param name="delta"></param>
            <param name="space"></param>
            <summary>
            Rotate around a point in the chosen transform space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Rotation">
            <summary>
            Return rotation in parent space.
            Or
            Set rotation in parent space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Rotation2D">
            <summary>
            Return rotation in parent space (for Urho2D).
            Or
            Set rotation in parent space (for Urho2D).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.RunActionsAsync(Urho.FiniteTimeAction[])">
            <param name="actions">An array of FiniteTimeAction objects.</param>
            <summary>
            Runs a sequence of Actions so that it can be awaited.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SaveDefaultAttributes">
            <summary>
            Return whether should save default-valued attributes into XML. Always save node transforms for readability, even if identity.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SaveXml(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Scale">
            <summary>
            Return scale in parent space.
            Or
            Set scale in parent space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Scale2D">
            <summary>
            Return scale in parent space (for Urho2D).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.ScaleNode(System.Single)">
            <param name="scale"></param>
            <summary>
            Modify scale in parent space uniformly.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.ScaleNode(Urho.Vector3)">
            <param name="scale"></param>
            <summary>
            Modify scale in parent space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.ScaleNode2D(Urho.Vector2)">
            <param name="scale"></param>
            <summary>
            Modify scale in parent space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Scene">
            <summary>
            Return scene.
            Or
            Set scene. Called by Scene.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetDeepEnabled(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set enabled state on self and child nodes. Nodes' own enabled state is remembered (IsEnabledSelf) and can be restored.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetDirection(Urho.Vector3)">
            <param name="direction"></param>
            <summary>
            Set forward direction in parent space. Positive Z axis equals identity rotation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetEnabled(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set enabled/disabled state without recursion. Components in a disabled node become effectively disabled regardless of their own enable/disable state.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetEnabledRecursive(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set enabled state on self and child nodes. Unlike SetDeepEnabled this does not remember the nodes' own enabled state, but overwrites it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetPosition2D(Urho.Vector2)">
            <param name="position"></param>
            <summary>
            Set position in parent space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetPosition2D(System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set position in parent space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetPositionSilent(Urho.Vector3)">
            <param name="position"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetRotationSilent(Urho.Quaternion)">
            <param name="rotation"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetScale(System.Single)">
            <param name="scale"></param>
            <summary>
            Set uniform scale in parent space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetScale2D(Urho.Vector2)">
            <param name="scale"></param>
            <summary>
            Set scale in parent space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetScale2D(System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set scale in parent space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetScaleSilent(Urho.Vector3)">
            <param name="scale"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetTransform(Urho.Vector3,Urho.Quaternion)">
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set both position and rotation in parent space as an atomic operation. This is faster than setting position and rotation separately.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetTransform(Urho.Vector3,Urho.Quaternion,System.Single)">
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="scale"></param>
            <summary>
            Set both position, rotation and uniform scale in parent space as an atomic operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetTransform(Urho.Vector3,Urho.Quaternion,Urho.Vector3)">
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="scale"></param>
            <summary>
            Set both position, rotation and scale in parent space as an atomic operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetTransform2D(Urho.Vector2,System.Single)">
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set both position and rotation in parent space as an atomic operation (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetTransform2D(Urho.Vector2,System.Single,System.Single)">
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="scale"></param>
            <summary>
            Set both position, rotation and uniform scale in parent space as an atomic operation (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetTransform2D(Urho.Vector2,System.Single,Urho.Vector2)">
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="scale"></param>
            <summary>
            Set both position, rotation and scale in parent space as an atomic operation (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetTransformSilent(Urho.Vector3,Urho.Quaternion,Urho.Vector3)">
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="scale"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetVar(Urho.StringHash,System.Int32)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetVar(Urho.StringHash,System.Single)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetVar(Urho.StringHash,System.String)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetVar(Urho.StringHash,Urho.Color)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetVar(Urho.StringHash,Urho.IntRect)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetVar(Urho.StringHash,Urho.IntVector2)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetVar(Urho.StringHash,Urho.Quaternion)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetVar(Urho.StringHash,Urho.Vector2)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetVar(Urho.StringHash,Urho.Vector3)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetVar(Urho.StringHash,Urho.Vector4)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldDirection(Urho.Vector3)">
            <param name="direction"></param>
            <summary>
            Set forward direction in world space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldPosition(Urho.Vector3)">
            <param name="position"></param>
            <summary>
            Set position in world space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldPosition2D(Urho.Vector2)">
            <param name="position"></param>
            <summary>
            Set position in world space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldPosition2D(System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set position in world space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldRotation(Urho.Quaternion)">
            <param name="rotation"></param>
            <summary>
            Set rotation in world space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldScale(System.Single)">
            <param name="scale"></param>
            <summary>
            Set uniform scale in world space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldScale(Urho.Vector3)">
            <param name="scale"></param>
            <summary>
            Set scale in world space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldScale2D(Urho.Vector2)">
            <param name="scale"></param>
            <summary>
            Set scale in world space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldScale2D(System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set scale in world space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldTransform(Urho.Vector3,Urho.Quaternion)">
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set both position and rotation in world space as an atomic operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldTransform(Urho.Vector3,Urho.Quaternion,System.Single)">
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="scale"></param>
            <summary>
            Set both position, rotation and uniform scale in world space as an atomic operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldTransform(Urho.Vector3,Urho.Quaternion,Urho.Vector3)">
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="scale"></param>
            <summary>
            Set both position, rotation and scale in world space as an atomic opration.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldTransform2D(Urho.Vector2,System.Single)">
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set both position and rotation in world space as an atomic operation (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldTransform2D(Urho.Vector2,System.Single,System.Single)">
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="scale"></param>
            <summary>
            Set both position, rotation and uniform scale in world space as an atomic operation (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SetWorldTransform2D(Urho.Vector2,System.Single,Urho.Vector2)">
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="scale"></param>
            <summary>
            Set both position, rotation and scale in world space as an atomic opration (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.SubscribeToAnimationTrigger(System.Action{Urho.AnimationTriggerEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the AnimationTrigger event raised by the Node.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Node.SubscribeToBoneHierarchyCreated(System.Action{Urho.BoneHierarchyCreatedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the BoneHierarchyCreated event raised by the Node.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Node.SubscribeToNodeCollision(System.Action{Urho.NodeCollisionEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NodeCollision event raised by the Node.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Node.SubscribeToNodeCollisionEnd(System.Action{Urho.NodeCollisionEndEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NodeCollisionEnd event raised by the Node.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Node.SubscribeToNodeCollisionStart(System.Action{Urho.NodeCollisionStartEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NodeCollisionStart event raised by the Node.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Node.Transform">
            <summary>
            Return parent space transform matrix.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.Translate(Urho.Vector3,Urho.TransformSpace)">
            <param name="delta"></param>
            <param name="space"></param>
            <summary>
            Move the scene node in the chosen transform space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.Translate2D(Urho.Vector2,Urho.TransformSpace)">
            <param name="delta"></param>
            <param name="space"></param>
            <summary>
            Move the scene node in the chosen transform space (for Urho2D).
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Node.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Node.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Node.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.Up">
            <summary>
            Return up direction in parent space. Positive Y axis equals identity rotation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.WorldDirection">
            <summary>
            Return direction in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.WorldPosition">
            <summary>
            Return position in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.WorldPosition2D">
            <summary>
            Return position in world space (for Urho2D).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.WorldRight">
            <summary>
            Return node's right vector in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.WorldRotation">
            <summary>
            Return rotation in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.WorldRotation2D">
            <summary>
            Return rotation in world space (for Urho2D).
            Or
            Set rotation in world space (for Urho2D).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.WorldScale">
            <summary>
            Return scale in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.WorldScale2D">
            <summary>
            Return scale in world space (for Urho2D).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.WorldToLocal(Urho.Vector3)">
            <param name="position"></param>
            <summary>
            Convert a world space position to local space.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.WorldToLocal(Urho.Vector4)">
            <param name="vector"></param>
            <summary>
            Convert a world space position or rotation to local space.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.WorldToLocal2D(Urho.Vector2)">
            <param name="vector"></param>
            <summary>
            Convert a world space position or rotation to local space (for Urho2D).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Node.WorldUp">
            <summary>
            Return node's up vector in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Node.Yaw(System.Single,Urho.TransformSpace)">
            <param name="angle"></param>
            <param name="space"></param>
            <summary>
            Rotate around the Y axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NodeAddedEventArgs">
            <summary>Event arguments for the Scene's NodeAdded event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeAddedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeAddedEventArgs.Parent">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeAddedEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NodeCollisionEndEventArgs">
            <summary>Event arguments for the Node's NodeCollisionEnd event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionEndEventArgs.Body">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionEndEventArgs.OtherBody">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionEndEventArgs.OtherNode">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionEndEventArgs.Trigger">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NodeCollisionEventArgs">
            <summary>Event arguments for the Node's NodeCollision event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionEventArgs.Body">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionEventArgs.Contacts">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionEventArgs.OtherBody">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionEventArgs.OtherNode">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionEventArgs.Trigger">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NodeCollisionStartEventArgs">
            <summary>Event arguments for the Node's NodeCollisionStart event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionStartEventArgs.Body">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionStartEventArgs.Contacts">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionStartEventArgs.OtherBody">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionStartEventArgs.OtherNode">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeCollisionStartEventArgs.Trigger">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NodeEnabledChangedEventArgs">
            <summary>Event arguments for the Scene's NodeEnabledChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeEnabledChangedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeEnabledChangedEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NodeNameChangedEventArgs">
            <summary>Event arguments for the Scene's NodeNameChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeNameChangedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeNameChangedEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NodeRemovedEventArgs">
            <summary>Event arguments for the Scene's NodeRemoved event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeRemovedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeRemovedEventArgs.Parent">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.NodeRemovedEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.NodeReplicationState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ObjectAnimation">
            <summary>
            Object animation class, an object animation include one or more attribute animations and theirs wrap mode and speed for an Animatable object.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ObjectAnimation(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ObjectAnimation, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ObjectAnimation(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ObjectAnimation that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ObjectAnimation attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ObjectAnimation(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.ObjectAnimation.AddAttributeAnimation(System.String,Urho.ValueAnimation,Urho.WrapMode,System.Single)">
            <param name="name"></param>
            <param name="attributeAnimation"></param>
            <param name="wrapMode"></param>
            <param name="speed"></param>
            <summary>
            Add attribute animation, attribute name can in following format: "attribute" or "#0/#1/attribute" or ""#0/#1/
            #1/attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ObjectAnimation.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.ObjectAnimation.GetAttributeAnimation(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute animation by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ObjectAnimation.GetAttributeAnimationInfo(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute animation info by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ObjectAnimation.GetAttributeAnimationSpeed(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute animation speed by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ObjectAnimation.GetAttributeAnimationWrapMode(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute animation wrap mode by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ObjectAnimation.LoadXml(Urho.XmlElement)">
            <param name="source"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ObjectAnimation.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ObjectAnimation.RemoveAttributeAnimation(System.String)">
            <param name="name"></param>
            <summary>
            Remove attribute animation, attribute name can in following format: "attribute" or "#0/#1/attribute" or ""#0/#1/
            #1/attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ObjectAnimation.RemoveAttributeAnimation(Urho.ValueAnimation)">
            <param name="attributeAnimation"></param>
            <summary>
            Remove attribute animation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ObjectAnimation.SaveXml(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ObjectAnimation.SubscribeToAttributeAnimationAdded(System.Action{Urho.AttributeAnimationAddedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the AttributeAnimationAdded event raised by the ObjectAnimation.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.ObjectAnimation.SubscribeToAttributeAnimationRemoved(System.Action{Urho.AttributeAnimationRemovedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the AttributeAnimationRemoved event raised by the ObjectAnimation.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.ObjectAnimation.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ObjectAnimation.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ObjectAnimation.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ObjectAnimation.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ObjectCallbackSignature">
            <param name="data"></param>
            <param name="stringhash"></param>
            <param name="variantMap"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ObjectFactory">
            <summary>
            Base class for object factories.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ObjectFactory(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ObjectFactory, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ObjectFactory(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ObjectFactory.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ObjectFactory.Context">
            <summary>
            Return execution context.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ObjectFactory.CreateObject">
            <summary>
            Create an object. Implemented in templated subclasses.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ObjectFactory.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ObjectFactory.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="T:Urho.ObserverPositionSendMode">
            <summary>
            Send modes for observer position/rotation. Activated by the client setting either position or rotation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ObserverPositionSendMode.None">
            <summary></summary>
        </member>
        <member name="F:Urho.ObserverPositionSendMode.Position">
            <summary></summary>
        </member>
        <member name="F:Urho.ObserverPositionSendMode.PositionRotation">
            <summary></summary>
        </member>
        <member name="T:Urho.Obstacle">
            <summary>
            Obstacle for dynamic navigation mesh.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Obstacle(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Obstacle, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Obstacle(Urho.Context)">
            <param name="param1"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Obstacle(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Obstacle.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Obstacle.DrawDebugGeometry(System.Boolean)">
            <param name="depthTest"></param>
            <summary>
            Simplified rendering of debug information for script usage.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Obstacle.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="param1"></param>
            <param name="depthTest"></param>
            <summary>
            Render debug information.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Obstacle.Height">
            <summary>
            Get the height of this obstacle.
            Or
            Set the height of this obstacle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Obstacle.ObstacleID">
            <summary>
            Get the internal obstacle ID.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Obstacle.OnSetEnabled">
            <summary>
            Update the owning mesh when enabled status has changed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Obstacle.Radius">
            <summary>
            Get the blocking radius of this obstacle.
            Or
            Set the blocking radius of this obstacle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Obstacle.RegisterObject(Urho.Context)">
            <param name="param1"></param>
            <summary>
            Register Obstacle with engine context.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Obstacle.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Obstacle.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Obstacle.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Obstacle.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.OcclusionBuffer">
            <summary>
            Software renderer for occlusion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.OcclusionBuffer(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of OcclusionBuffer, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.OcclusionBuffer(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of OcclusionBuffer that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of OcclusionBuffer attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.OcclusionBuffer(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.OcclusionBuffer.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.OcclusionBuffer.Buffer">
            <summary>
            Return highest level depth values.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.OcclusionBuffer.BuildDepthHierarchy">
            <summary>
            Build reduced size mip levels.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.OcclusionBuffer.Clear">
            <summary>
            Clear the buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OcclusionBuffer.CullMode">
            <summary>
            Return culling mode.
            Or
            Set culling mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OcclusionBuffer.Height">
            <summary>
            Return buffer height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.OcclusionBuffer.IsVisible(Urho.BoundingBox)">
            <param name="worldSpaceBox"></param>
            <summary>
            Test a bounding box for visibility. For best performance, build depth hierarchy first.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OcclusionBuffer.MaxTriangles">
            <summary>
            Return maximum number of triangles.
            Or
            Set maximum triangles to render.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OcclusionBuffer.NumTriangles">
            <summary>
            Return number of rendered triangles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.OcclusionBuffer.Reset">
            <summary>
            Reset number of triangles.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.OcclusionBuffer.ResetUseTimer">
            <summary>
            Reset last used timer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.OcclusionBuffer.SetSize(System.Int32,System.Int32)">
            <param name="width"></param>
            <param name="height"></param>
            <summary>
            Set occlusion buffer size.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.OcclusionBuffer.SetView(Urho.Camera)">
            <param name="camera"></param>
            <summary>
            Set camera view to render from.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OcclusionBuffer.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.OcclusionBuffer.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.OcclusionBuffer.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.OcclusionBuffer.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OcclusionBuffer.UseTimer">
            <summary>
            Return time since last use in milliseconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OcclusionBuffer.Width">
            <summary>
            Return buffer width.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Octant">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Octree">
            <summary>
            %Octree component. Should be added only to the root scene node
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Octree(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Octree, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Octree(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Octree that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Octree attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Octree(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Octree.AddManualDrawable(Urho.Drawable)">
            <param name="drawable"></param>
            <summary>
            Add a drawable manually.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Octree.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Octree.CancelUpdate(Urho.Drawable)">
            <param name="drawable"></param>
            <summary>
            Cancel drawable object's update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Octree.DrawDebugGeometry(System.Boolean)">
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Octree.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Octree.NumLevels">
            <summary>
            Return subdivision levels.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Octree.QueueUpdate(Urho.Drawable)">
            <param name="drawable"></param>
            <summary>
            Mark drawable object as requiring an update and a reinsertion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Octree.RaycastSingle(Urho.Ray,Urho.RayQueryLevel,System.Single,Urho.DrawableFlags,System.UInt32)">
            <param name="ray"></param>
            <param name="level"></param>
            <param name="maxDistance"></param>
            <param name="drawableFlags"></param>
            <param name="viewMask"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Octree.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Octree.RemoveManualDrawable(Urho.Drawable)">
            <param name="drawable"></param>
            <summary>
            Remove a manually added drawable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Octree.SetSize(Urho.BoundingBox,System.UInt32)">
            <param name="box"></param>
            <param name="numLevels"></param>
            <summary>
            Set size and maximum subdivision levels. If octree is not empty, drawable objects will be temporarily moved to the root.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Octree.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Octree.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Octree.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Octree.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.OffMeshConnection">
            <summary>
            A link between otherwise unconnected regions of the navigation mesh.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.OffMeshConnection(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of OffMeshConnection, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.OffMeshConnection(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of OffMeshConnection that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of OffMeshConnection attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.OffMeshConnection(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.OffMeshConnection.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OffMeshConnection.AreaID">
            <summary>
            Return the user assigned area ID
            Or
            Sets the assigned area Id for the connection
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OffMeshConnection.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.OffMeshConnection.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OffMeshConnection.EndPoint">
            <summary>
            Return endpoint node.
            Or
            Set endpoint node.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.OffMeshConnection.IsBidirectional">
            <summary>
            Return whether is bidirectional.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OffMeshConnection.Mask">
            <summary>
            Return the user assigned mask
            Or
            Set a user assigned mask
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OffMeshConnection.Radius">
            <summary>
            Return radius.
            Or
            Set radius.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.OffMeshConnection.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.OffMeshConnection.SetBidirectional(System.Boolean)">
            <param name="enabled"></param>
            <summary>
            Set bidirectional flag. Default true.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.OffMeshConnection.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.OffMeshConnection.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.OffMeshConnection.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.OffMeshConnection.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.OggVorbisSoundStream">
            <summary>
            Ogg Vorbis sound stream.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.OggVorbisSoundStream(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of OggVorbisSoundStream, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.OggVorbisSoundStream(Urho.Sound)">
            <param name="sound"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.OggVorbisSoundStream(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.OggVorbisSoundStream.GetData(System.SByte*,System.UInt32)">
            <param name="dest"></param>
            <param name="numBytes"></param>
            <summary>
            Produce sound data into destination. Return number of bytes produced. Called by SoundSource from the mixing thread.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Orientation">
            <summary>
            %UI element orientation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Orientation.Horizontal">
            <summary></summary>
        </member>
        <member name="F:Urho.Orientation.Vertical">
            <summary></summary>
        </member>
        <member name="T:Urho.Orientation2D">
            <summary>
            Orientation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Orientation2D.Isometric">
            <summary></summary>
        </member>
        <member name="F:Urho.Orientation2D.Orthogonal">
            <summary></summary>
        </member>
        <member name="F:Urho.Orientation2D.Staggered">
            <summary></summary>
        </member>
        <member name="T:Urho.PackageEntry">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PackageFile">
            <summary>
            Stores files of a directory tree sequentially for convenient access.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.PackageFile(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of PackageFile, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.PackageFile(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of PackageFile that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of PackageFile attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.PackageFile(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.PackageFile(Urho.Context,System.String,System.UInt32)">
            <param name="context">The context that this object will be attached to.</param>
            <param name="fileName"></param>
            <param name="startOffset"></param>
            <summary>Creates an instance of PackageFile that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of PackageFile attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="P:Urho.PackageFile.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.PackageFile.Checksum">
            <summary>
            Return checksum of the package file contents.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PackageFile.Exists(System.String)">
            <param name="fileName"></param>
            <summary>
            Check if a file exists within the package file. This will be case-insensitive on Windows and case-sensitive on other platforms.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PackageFile.GetEntry(System.String)">
            <param name="fileName"></param>
            <summary>
            Return the file entry corresponding to the name, or null if not found. This will be case-insensitive on Windows and case-sensitive on other platforms.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PackageFile.IsCompressed">
            <summary>
            Return whether the files are compressed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PackageFile.Name">
            <summary>
            Return the package file name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PackageFile.NameHash">
            <summary>
            Return hash of the package file name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PackageFile.NumFiles">
            <summary>
            Return number of files.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PackageFile.Open(System.String,System.UInt32)">
            <param name="fileName"></param>
            <param name="startOffset"></param>
            <summary>
            Open the package file. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PackageFile.TotalSize">
            <summary>
            Return total size of the package file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PackageFile.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.PackageFile.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.PackageFile.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.PackageFile.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Parallel">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Parallel(Urho.FiniteTimeAction[])">
            <param name="actions"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Parallel.Actions">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Parallel.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Parallel.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ParallelState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ParallelState(Urho.Parallel,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParallelState.Actions">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParallelState.ActionStates">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParallelState.Stop">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParallelState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ParticleEffect">
            <summary>
            %Particle effect definition.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ParticleEffect(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ParticleEffect, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ParticleEffect(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ParticleEffect that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ParticleEffect attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ParticleEffect(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ParticleEffect.ActiveTime">
            <summary>
            Return emission active period length (0 = infinite.)
            Or
            Set emission active period length (0 = infinite.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.AddColorTime(Urho.Color,System.Single)">
            <param name="color"></param>
            <param name="time"></param>
            <summary>
            Add a color frame sorted in the correct position based on time.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.AnimationLodBias">
            <summary>
            Return animation Lod bias.
            Or
            Set animation LOD bias.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ParticleEffect.ConstantForce">
            <summary>
            Return constant force acting on particles.
            Or
            Set constant force acting on particles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.DampingForce">
            <summary>
            Return particle velocity damping force.
            Or
            Set particle velocity damping force.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.EmitterSize">
            <summary>
            Return emitter size.
            Or
            Set emitter size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.EmitterType">
            <summary>
            Return emitter type.
            Or
            Set emitter type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.GetColorFrame(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return a color animation frame, or null if outside range.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.GetTextureFrame(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return a texture animation frame, or null if outside range.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.InactiveTime">
            <summary>
            Return emission inactive period length (0 = infinite.)
            Or
            Set emission inactive period length (0 = infinite.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.IsRelative">
            <summary>
            Return whether billboards are relative to the scene node.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.IsScaled">
            <summary>
            Return whether scene node scale affects billboards' size.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.IsSorted">
            <summary>
            Return whether billboards are sorted.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.Load(Urho.XmlElement)">
            <param name="source"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.Material">
            <summary>
            Return material.
            Or
            Set material.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MaxDirection">
            <summary>
            Return positive direction limit.
            Or
            Set positive direction limit.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MaxEmissionRate">
            <summary>
            Return maximum emission rate.
            Or
            Set maximum emission rate.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MaxParticleSize">
            <summary>
            Return particle maximum size.
            Or
            Set particle maximum size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MaxRotation">
            <summary>
            Return particle maximum rotation.
            Or
            Set particle maximum rotation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MaxRotationSpeed">
            <summary>
            Return particle maximum rotation speed.
            Or
            Set particle maximum rotation speed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MaxTimeToLive">
            <summary>
            Return particle maximum time to live.
            Or
            Set particle maximum time to live.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MaxVelocity">
            <summary>
            Return particle maximum velocity.
            Or
            Set particle maximum velocity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MinDirection">
            <summary>
            Return negative direction limit.
            Or
            Set negative direction limit.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MinEmissionRate">
            <summary>
            Return minimum emission rate.
            Or
            Set minimum emission rate.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MinParticleSize">
            <summary>
            Return particle minimum size.
            Or
            Set particle minimum size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MinRotation">
            <summary>
            Return particle minimum rotation.
            Or
            Set particle minimum rotation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MinRotationSpeed">
            <summary>
            Return particle minimum rotation speed.
            Or
            Set particle minimum rotation speed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MinTimeToLive">
            <summary>
            Return particle minimum time to live.
            Or
            Set particle minimum time to live.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.MinVelocity">
            <summary>
            Return particle minimum velocity.
            Or
            Set particle minimum velocity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.NumColorFrames">
            <summary>
            Return number of color animation frames.
            Or
            Set number of color frames.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.NumParticles">
            <summary>
            Return maximum number of particles.
            Or
            Set maximum number of particles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.NumTextureFrames">
            <summary>
            Return number of texture animation frames.
            Or
            Set number of texture frames.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.RandomDirection">
            <summary>
            Return random direction.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.RandomRotation">
            <summary>
            Return random rotation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.RandomRotationSpeed">
            <summary>
            Return random rotationspeed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.RandomSize">
            <summary>
            Return random size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.RandomTimeToLive">
            <summary>
            Return random timetolive.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.RandomVelocity">
            <summary>
            Return random velocity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.RemoveColorFrame(System.UInt32)">
            <param name="index"></param>
            <summary>
            Remove color frame at index
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.RemoveTextureFrame(System.UInt32)">
            <param name="index"></param>
            <summary>
            Remove texture frame at index
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.Save(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.SetRelative(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether billboards are relative to the scene node. Default true.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.SetScaled(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set scaled.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.SetSorted(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set sorted.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.SizeAdd">
            <summary>
            Return particle size additive modifier.
            Or
            Set particle size additive modifier.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.SizeMul">
            <summary>
            Return particle size multiplicative modifier.
            Or
            Set particle size multiplicative modifier.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.SortColorFrames">
            <summary>
            Sort the list of color frames based on time.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect.SortTextureFrames">
            <summary>
            Sort the list of texture frames based on time.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ParticleEffect.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ParticleEffect.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ParticleEffect.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect.UpdateInvisible">
            <summary>
            Return whether to update when particles are not visible.
            Or
            Set whether to update when particles are not visible.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ParticleEffect2D">
            <summary>
            2D particle effect resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ParticleEffect2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ParticleEffect2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ParticleEffect2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ParticleEffect2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ParticleEffect2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ParticleEffect2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.Angle">
            <summary>
            Return angle.
            Or
            Set angle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.AngleVariance">
            <summary>
            Return angle variance.
            Or
            Set angle variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.BlendMode">
            <summary>
            Return blend mode.
            Or
            Set blend mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.Duration">
            <summary>
            Return duration.
            Or
            Set duration.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.EmitterType">
            <summary>
            Return emitter type.
            Or
            Set emitter type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect2D.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.FinishColor">
            <summary>
            Return finish color.
            Or
            Set finish color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.FinishColorVariance">
            <summary>
            Return finish color variance.
            Or
            Set finish color variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.FinishParticleSize">
            <summary>
            Return finish particle size.
            Or
            Set finish particle size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.FinishParticleSizeVariance">
            <summary>
            Return finish particle size variance.
            Or
            Set finish particle size variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.Gravity">
            <summary>
            Return gravity.
            Or
            Set gravity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.MaxParticles">
            <summary>
            Return max particles.
            Or
            Set max particles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.MaxRadius">
            <summary>
            Return max radius.
            Or
            Set max radius.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.MaxRadiusVariance">
            <summary>
            Return max radius variance.
            Or
            Set max radius variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.MinRadius">
            <summary>
            Return min radius.
            Or
            Set min radius.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.MinRadiusVariance">
            <summary>
            Return min radius variance.
            Or
            Set min radius variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.ParticleLifeSpan">
            <summary>
            Return particle lifespan.
            Or
            Set particle lifespan.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.ParticleLifespanVariance">
            <summary>
            Return particle lifespan variance.
            Or
            Set particle lifespan variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.RadialAcceleration">
            <summary>
            Return radial acceleration.
            Or
            Set radial acceleration.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.RadialAccelVariance">
            <summary>
            Return radial acceleration variance.
            Or
            Set radial acceleration variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEffect2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. Drawable2D must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.RotatePerSecond">
            <summary>
            Return rotate per second.
            Or
            Set rotate per second.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.RotatePerSecondVariance">
            <summary>
            Return rotate per second variance.
            Or
            Set rotate per second variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.RotationEnd">
            <summary>
            Return rotation end.
            Or
            Set rotation end.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.RotationEndVariance">
            <summary>
            Return rotation end variance.
            Or
            Set rotation end variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.RotationStart">
            <summary>
            Return rotation start.
            Or
            Set rotation start.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.RotationStartVariance">
            <summary>
            Return rotation start variance.
            Or
            Set rotation start variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.SourcePositionVariance">
            <summary>
            Return source position variance.
            Or
            Set source position variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.Speed">
            <summary>
            Return speed.
            Or
            Set speed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.SpeedVariance">
            <summary>
            Return speed variance.
            Or
            Set speed variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.Sprite">
            <summary>
            Return sprite.
            Or
            Set sprite.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.StartColor">
            <summary>
            Return start color.
            Or
            Set start color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.StartColorVariance">
            <summary>
            Return start color variance.
            Or
            Set start color variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.StartParticleSize">
            <summary>
            Return start particle size.
            Or
            Set start particle size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.StartParticleSizeVariance">
            <summary>
            Return start particle size variance.
            Or
            Set start particle size variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.TangentialAcceleration">
            <summary>
            Return tangential acceleration.
            Or
            Set tangential acceleration.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.TangentialAccelVariance">
            <summary>
            Return tangential acceleration variance.
            Or
            Set tangential acceleration variance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ParticleEffect2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ParticleEffect2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ParticleEffect2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ParticleEmitter">
            <summary>
            %Particle emitter component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ParticleEmitter(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ParticleEmitter, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ParticleEmitter(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ParticleEmitter that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ParticleEmitter attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ParticleEmitter(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.ParticleEmitter.ApplyEffect">
            <summary>
            Apply not continuously updated values such as the material, the number of particles and sorting mode from the particle effect. Call this if you change the effect programmatically.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEmitter.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ParticleEmitter.Effect">
            <summary>
            Return particle effect.
            Or
            Set particle effect.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEmitter.EffectAttr">
            <summary>
            Set particles effect attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEmitter.IsEmitting">
            <summary>
            Return whether is currently emitting.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEmitter.NumParticles">
            <summary>
            Return maximum number of particles.
            Or
            Set maximum number of particles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEmitter.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEmitter.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEmitter.RemoveAllParticles">
            <summary>
            Remove all current particles.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEmitter.Reset">
            <summary>
            Reset the particle emitter completely. Removes current particles, sets emitting state on, and resets the emission timer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEmitter.ResetEmissionTimer">
            <summary>
            Reset the emission period timer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEmitter.SerializeParticles">
            <summary>
            Return whether particles are to be serialized.
            Or
            Set whether particles should be serialized. Default true, set false to reduce scene file size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEmitter.SetEmitting(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether should be emitting. If the state was changed, also resets the emission period timer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEmitter.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ParticleEmitter.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ParticleEmitter.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ParticleEmitter.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ParticleEmitter2D">
            <summary>
            2D particle emitter component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ParticleEmitter2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ParticleEmitter2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ParticleEmitter2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ParticleEmitter2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ParticleEmitter2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ParticleEmitter2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ParticleEmitter2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ParticleEmitter2D.BlendMode">
            <summary>
            Return blend mode.
            Or
            Set blend mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEmitter2D.Effect">
            <summary>
            Return particle effect.
            Or
            Set particle effect.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEmitter2D.MaxParticles">
            <summary>
            Return max particles.
            Or
            Set max particles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEmitter2D.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEmitter2D.ParticleEffectAttr">
            <summary>
            Return particle model attr.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ParticleEmitter2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. drawable2d must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEmitter2D.Sprite">
            <summary>
            Return sprite.
            Or
            Set sprite.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEmitter2D.SpriteAttr">
            <summary>
            Return sprite attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ParticleEmitter2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ParticleEmitter2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ParticleEmitter2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ParticleEmitter2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Pass">
            <summary>
            %Material rendering pass, which defines shaders and render state.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Pass(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Pass, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Pass(System.String)">
            <param name="passName"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Pass(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Pass.AlphaMask">
            <summary>
            Return alpha masking hint.
            Or
            Set alpha masking hint. Completely opaque draw calls will be performed before alpha masked.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Pass.BlendMode">
            <summary>
            Return blend mode.
            Or
            Set blend mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Pass.DepthTestMode">
            <summary>
            Return depth compare mode.
            Or
            Set depth compare mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Pass.DepthWrite">
            <summary>
            Return depth write mode.
            Or
            Set depth write on/off.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Pass.Index">
            <summary>
            Return pass index. This is used for optimal render-time pass queries that avoid map lookups.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Pass.IsDesktop">
            <summary>
            Return whether requires desktop level hardware.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Pass.LightingMode">
            <summary>
            Return pass lighting mode.
            Or
            Set pass lighting mode, affects what shader variations will be attempted to be loaded.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Pass.MarkShadersLoaded(System.UInt32)">
            <param name="frameNumber"></param>
            <summary>
            Mark shaders loaded this frame.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Pass.Name">
            <summary>
            Return pass name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Pass.PixelShader">
            <summary>
            Return pixel shader name.
            Or
            Set pixel shader name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Pass.PixelShaderDefines">
            <summary>
            Return pixel shader defines.
            Or
            Set pixel shader defines.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Pass.ReleaseShaders">
            <summary>
            Reset shader pointers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Pass.SetIsDesktop(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether requires desktop level hardware.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Pass.ShadersLoadedFrameNumber">
            <summary>
            Return last shaders loaded frame number.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Pass.VertexShader">
            <summary>
            Return vertex shader name.
            Or
            Set vertex shader name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Pass.VertexShaderDefines">
            <summary>
            Return vertex shader defines.
            Or
            Set vertex shader defines.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PassLightingMode">
            <summary>
            Lighting mode of a pass.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.PassLightingMode.Perpixel">
            <summary></summary>
        </member>
        <member name="F:Urho.PassLightingMode.Pervertex">
            <summary></summary>
        </member>
        <member name="F:Urho.PassLightingMode.Unlit">
            <summary></summary>
        </member>
        <member name="T:Urho.PhysicsBeginContact2DEventArgs">
            <summary>Event arguments for the PhysicsWorld2D's PhysicsBeginContact2D event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsBeginContact2DEventArgs.BodyA">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsBeginContact2DEventArgs.BodyB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsBeginContact2DEventArgs.NodeA">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsBeginContact2DEventArgs.NodeB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsBeginContact2DEventArgs.World">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PhysicsCollisionEndEventArgs">
            <summary>Event arguments for the PhysicsWorld's PhysicsCollisionEnd event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEndEventArgs.BodyA">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEndEventArgs.BodyB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEndEventArgs.NodeA">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEndEventArgs.NodeB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEndEventArgs.Trigger">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEndEventArgs.World">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PhysicsCollisionEventArgs">
            <summary>Event arguments for the PhysicsWorld's PhysicsCollision event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEventArgs.BodyA">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEventArgs.BodyB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEventArgs.Contacts">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEventArgs.NodeA">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEventArgs.NodeB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEventArgs.Trigger">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionEventArgs.World">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PhysicsCollisionStartEventArgs">
            <summary>Event arguments for the PhysicsWorld's PhysicsCollisionStart event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionStartEventArgs.BodyA">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionStartEventArgs.BodyB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionStartEventArgs.Contacts">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionStartEventArgs.NodeA">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionStartEventArgs.NodeB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionStartEventArgs.Trigger">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsCollisionStartEventArgs.World">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PhysicsEndContact2DEventArgs">
            <summary>Event arguments for the PhysicsWorld2D's PhysicsEndContact2D event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsEndContact2DEventArgs.BodyA">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsEndContact2DEventArgs.BodyB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsEndContact2DEventArgs.NodeA">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsEndContact2DEventArgs.NodeB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsEndContact2DEventArgs.World">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PhysicsPostStep2DEventArgs">
            <summary>Event arguments for the PhysicsWorld2D's PhysicsPostStep2D event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsPostStep2DEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsPostStep2DEventArgs.World">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PhysicsPostStepEventArgs">
            <summary>Event arguments for the PhysicsWorld's PhysicsPostStep event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsPostStepEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsPostStepEventArgs.World">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PhysicsPreStep2DEventArgs">
            <summary>Event arguments for the PhysicsWorld2D's PhysicsPreStep2D event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsPreStep2DEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsPreStep2DEventArgs.World">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PhysicsPreStepEventArgs">
            <summary>Event arguments for the PhysicsWorld's PhysicsPreStep event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsPreStepEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsPreStepEventArgs.World">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PhysicsRaycastResult">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsRaycastResult.Body">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.PhysicsRaycastResult.Distance">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.PhysicsRaycastResult.Normal">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.PhysicsRaycastResult.Position">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PhysicsWorld">
            <summary>
            Physics simulation world component. Should be added only to the root scene node.
            </summary>
            <remarks>
                <para>Urho3D implements rigid body physics simulation using the Bullet library.</para>
                <para>The physics simulation has its own fixed update rate, which by default is 60Hz. When the rendering framerate is higher than the physics update rate, physics motion is interpolated so that it always appears smooth. The update rate can be changed with <see cref="M:Urho.PhysicsWorld.Fps" /> property. The physics update rate also determines the frequency of fixed timestep scene logic updates. Hard limit for physics steps per frame or adaptive timestep can be configured with <see cref="P:Urho.PhysicsWorld.MaxSubSteps" /> property. These can help to prevent a "spiral of death" due to the CPU being unable to handle the physics load. However, note that using either can lead to time slowing down (when steps are limited) or inconsistent physics behavior (when using adaptive step.)</para>
                <para>The other physics components are:</para>
                <list type="bullet">
                    <item>
                        <term>
                            <see cref="T:Urho.RigidBody" />: a physics object instance. Its parameters include mass, linear/angular velocities, friction and restitution.</term>
                    </item>
                    <item>
                        <term>
                            <see cref="T:Urho.CollisionShape" />: defines physics collision geometry. The supported shapes are box, sphere, cylinder, capsule, cone, triangle mesh, convex hull and heightfield terrain (requires the <see cref="T:Urho.Terrain" /> component in the same node.)</term>
                    </item>
                    <item>
                        <term>
                            <see cref="T:Urho.Constraint" />: connects two RigidBodies together, or one <see cref="T:Urho.RigidBody" /> to a static point in the world. Point, hinge, slider and cone twist constraints are supported.</term>
                    </item>
                </list>
                <para />
                <format type="text/html">
                    <h2>Movement and Collision</h2>
                </format>
                <para />
                <para>Both a <see cref="T:Urho.RigidBody" /> and at least one <see cref="T:Urho.CollisionShape" /> component must exist in a scene node for it to behave physically (a collision shape by itself does nothing.) Several collision shapes may exist in the same node to create compound shapes. An offset position and rotation relative to the node's transform can be specified for each. Triangle mesh and convex hull geometries require specifying a <see cref="T:Urho.Model" /> resource and the LOD level to use.</para>
                <para>
                    <see cref="T:Urho.CollisionShape" /> provides two APIs for defining the collision geometry. Either setting individual properties such as the shape type or size, or specifying both the shape type and all its properties at once using <see cref="M:Urho.CollisionShape.SetBox" />, <see cref="M:Urho.CollisionShape.SetCapsule" /> or <see cref="M:Urho.CollisionShape.SetTriangleMesh" /> for example.</para>
                <para>RigidBodies can be either static or moving. A body is static if its mass is 0, and moving if the mass is greater than 0. Note that the triangle mesh collision shape is not supported for moving objects; it will not collide properly due to limitations in the Bullet library. In this case the convex hull shape can be used instead.</para>
                <para>The collision behaviour of a rigid body is controlled by several variables. </para>
                <para>First, the collision layer and mask define which other objects to collide with: see <see cref="M:Urho.RigidBody.SetCollisionLayerAndMask" />. By default a rigid body is on layer 1; the layer will be ANDed with the other body's collision mask to see if the collision should be reported. A rigid body can also be set to trigger mode to only report collisions without actually applying collision forces. This can be used to implement trigger areas. Finally, the friction, rolling friction and restitution coefficients (between 0 - 1) control how kinetic energy is transferred in the collisions. Note that rolling friction is by default zero, and if you want for example a sphere rolling on the floor to eventually stop, you need to set a non-zero rolling friction on both the sphere and floor rigid bodies.</para>
                <para>By default rigid bodies can move and rotate about all 3 coordinate axes when forces are applied. To limit the movement, use <see cref="M:Urho.RigidBody.SetLinearFactor" /> and <see cref="M:Urho.RigidBody.SetAngularFactor" /> and set the axes you wish to use to 1 and those you do not wish to use to 0. For example moving humanoid characters are often represented by a capsule shape: to ensure they stay upright and only rotate when you explicitly set the rotation in code, set the angular factor to 0, 0, 0.</para>
                <para>To prevent tunneling of a fast moving rigid body through obstacles, continuous collision detection can be used. It approximates the object as a swept sphere, but has a performance cost, so it should be used only when necessary. Set the <see cref="T:Urho.RigidBody.CcdRadius" /> and <see cref="T:Urho.RigidBody.CcdMotionThreshold" /> with non-zero values to enable. To prevent false collisions, the body's actual collision shape should completely contain the radius. The motion threshold is the required motion per simulation step for CCD to kick in: for example a box with size 1 should have motion threshold 1 as well.</para>
                <para>All physics calculations are performed in world space. Nodes containing a <see cref="T:Urho.RigidBody" /> component should preferably be parented to the <see cref="T:Urho.Scene" /> (root node) to ensure independent motion. For ragdolls this is not absolute, as retaining proper bone hierarchy is more important, but be aware that the ragdoll bones may drift far from the animated model's root scene node.</para>
                <para>When several collision shapes are present in the same node, edits to them can cause redundant mass/inertia update computation in the <see cref="T:Urho.RigidBody" />. To optimize performance in these cases, the edits can be enclosed between calls to <see cref="M:Urho.RigidBody.DisableMassUpdate" /> and <see cref="M:Urho.RigidBody.EnableMassUpdate" />.</para>
                <para />
                <format type="text/html">
                    <h2>Constraint parameters</h2>
                </format>
                <para>Constraint position (and rotation if relevant) need to be defined in relation to both connected bodies, see <see cref="M:Urho.Constraint.SetPosition" /> and <see cref="M:Urho.Constraint.SetOtherPosition" />. If the constraint connects a body to the static world, then the "other body position" and "other body rotation" mean the static end's transform in world space. There is also a helper function <see cref="M:Urho.Constraint.SetWorldPosition" /> to assign the constraint to a world-space position; this sets both relative positions.</para>
                <para>Specifying the constraint's motion axis instead of rotation is provided as an alternative as it can be more intuitive, see <see cref="M:Urho.Constraint.SetAxis" />. However, by explicitly specifying a rotation you can be sure the constraint is oriented precisely as you want.</para>
                <para>Hinge, slider and cone twist constraints support defining limits for the motion. To be generic, these are encoded slightly unintuitively into Vector2’s. For a hinge constraint, the low and high limit X coordinates define the minimum and maximum angle in degrees. For example -45 to 45. For a slider constraint, the X coordinates define the maximum linear motion in world space units, and the Y coordinates define maximum angular motion in degrees. The cone twist constraint uses only the high limit to define the maximum angles (minimum angle is always -maximum) in the following manner: The X coordinate is the limit of the twist (main) axis, while Y is the limit of the swinging motion about the other axes.</para>
                <para />
                <para>
                    <see cref="" />Physics events</para>
                <para>The physics world sends 8 types of events during its update step, which you can subscribe by using one of the SubscribeToXxx methods on UrhoObject:</para>
                <list type="bullet">
                    <item>
                        <term>PhysicsPreStep: before the simulation is stepped.</term>
                    </item>
                    <item>
                        <term>PhysicsCollisionStart: for each new collision during the simulation step. The participating scene nodes will also send NodeCollisionStart events.</term>
                    </item>
                    <item>
                        <term>PhysicsCollision for each ongoing collision during the simulation step. The participating scene nodes will also send NodeCollision events.</term>
                    </item>
                    <item>
                        <term>PhysicsCollisionEnded for each collision which has ceased. The participating scene nodes will also send NodeCollisionEnded events.</term>
                    </item>
                    <item>
                        <term>PhysicsPostStep after the simulation has been stepped.</term>
                    </item>
                </list>
                <para>Note that if the rendering framerate is high, the physics might not be stepped at all on each frame: in that case those events will not be sent.</para>
                <para />
                <format type="text/html">
                    <h2>Reading collision events</h2>
                </format>
                <para>A new or ongoing physics collision event will report the collided scene nodes and rigid bodies, whether either of the bodies is a trigger, and the list of contact points.</para>
                <para>These are returned in a CollisionData array, from the “Contacts” property of the EventArguments for the various physics events.</para>
            </remarks>
        </member>
        <member name="C:Urho.PhysicsWorld(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of PhysicsWorld, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.PhysicsWorld(Urho.Context)">
            <param name="scontext"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.PhysicsWorld(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.AddCollisionShape(Urho.CollisionShape)">
            <param name="shape"></param>
            <summary>
            Add a collision shape to keep track of. Called by CollisionShape.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.AddConstraint(Urho.Constraint)">
            <param name="joint"></param>
            <summary>
            Add a constraint to keep track of. Called by Constraint.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.AddRigidBody(Urho.RigidBody)">
            <param name="body"></param>
            <summary>
            Add a rigid body to keep track of. Called by RigidBody.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.CleanupGeometryCache">
            <summary>
            Clean up the geometry cache.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.ConvexCast(Urho.PhysicsRaycastResult@,Urho.CollisionShape,Urho.Vector3,Urho.Quaternion,Urho.Vector3,Urho.Quaternion,System.UInt32)">
            <param name="result"></param>
            <param name="shape"></param>
            <param name="startPos"></param>
            <param name="startRot"></param>
            <param name="endPos"></param>
            <param name="endRot"></param>
            <param name="collisionMask"></param>
            <summary>
            Perform a physics world swept convex test using a user-supplied collision shape and return the first hit.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.DrawDebugGeometry(System.Boolean)">
            <param name="depthTest"></param>
            <summary>
            Add debug geometry to the debug renderer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld.Fps">
            <summary>
            Return simulation steps per second.
            Or
            Set simulation substeps per second.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.getDebugMode">
            <summary>
            Return debug draw flags.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld.Gravity">
            <summary>
            Return gravity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld.InternalEdge">
            <summary>
            Return whether Bullet's internal edge utility for trimesh collisions is enabled.
            Or
            Set whether to use Bullet's internal edge utility for trimesh collisions. Disabled by default.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld.Interpolation">
            <summary>
            Return whether interpolation between simulation steps is enabled.
            Or
            Set whether to interpolate between simulation steps.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.IsApplyingTransforms">
            <summary>
            Return whether node dirtying should be disregarded.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld.MaxNetworkAngularVelocity">
            <summary>
            Return maximum angular velocity for network replication.
            Or
            Set maximum angular velocity for network replication.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld.MaxSubSteps">
            <summary>
            Return maximum number of physics substeps per frame.
            Or
            Set maximum number of physics substeps per frame. 0 (default) is unlimited. Positive values cap the amount. Use a negative value to enable an adaptive timestep. This may cause inconsistent physics behavior.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld.NumIterations">
            <summary>
            Return number of constraint solver iterations.
            Or
            Set number of constraint solver iterations.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.RaycastSingle(Urho.PhysicsRaycastResult@,Urho.Ray,System.Single,System.UInt32)">
            <param name="result"></param>
            <param name="ray"></param>
            <param name="maxDistance"></param>
            <param name="collisionMask"></param>
            <summary>
            Perform a physics world raycast and return the closest hit.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.RemoveCachedGeometry(Urho.Model)">
            <param name="model"></param>
            <summary>
            Invalidate cached collision geometry for a model.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.RemoveCollisionShape(Urho.CollisionShape)">
            <param name="shape"></param>
            <summary>
            Remove a collision shape. Called by CollisionShape.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.RemoveConstraint(Urho.Constraint)">
            <param name="joint"></param>
            <summary>
            Remove a constraint. Called by Constraint.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.RemoveRigidBody(Urho.RigidBody)">
            <param name="body"></param>
            <summary>
            Remove a rigid body. Called by RigidBody.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.SetApplyingTransforms(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set node dirtying to be disregarded.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.SetDebugDepthTest(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set debug geometry depth test mode. Called both by PhysicsWorld itself and physics components.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.setDebugMode(System.Int32)">
            <param name="debugMode"></param>
            <summary>
            Set debug draw flags.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.SetDebugRenderer(Urho.DebugRenderer)">
            <param name="debug"></param>
            <summary>
            Set debug renderer to use. Called both by PhysicsWorld itself and physics components.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.SetGravity(Urho.Vector3)">
            <param name="gravity"></param>
            <summary>
            Set gravity.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.SphereCast(Urho.PhysicsRaycastResult@,Urho.Ray,System.Single,System.Single,System.UInt32)">
            <param name="result"></param>
            <param name="ray"></param>
            <param name="radius"></param>
            <param name="maxDistance"></param>
            <param name="collisionMask"></param>
            <summary>
            Perform a physics world swept sphere test and return the closest hit.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld.SplitImpulse">
            <summary>
            Return whether split impulse collision mode is enabled.
            Or
            Set split impulse collision mode. This is more accurate, but slower. Disabled by default.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.SubscribeToPhysicsCollision(System.Action{Urho.PhysicsCollisionEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the PhysicsCollision event raised by the PhysicsWorld.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.PhysicsWorld.SubscribeToPhysicsCollisionEnd(System.Action{Urho.PhysicsCollisionEndEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the PhysicsCollisionEnd event raised by the PhysicsWorld.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.PhysicsWorld.SubscribeToPhysicsCollisionStart(System.Action{Urho.PhysicsCollisionStartEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the PhysicsCollisionStart event raised by the PhysicsWorld.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.PhysicsWorld.SubscribeToPhysicsPostStep(System.Action{Urho.PhysicsPostStepEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the PhysicsPostStep event raised by the PhysicsWorld.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.PhysicsWorld.SubscribeToPhysicsPreStep(System.Action{Urho.PhysicsPreStepEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the PhysicsPreStep event raised by the PhysicsWorld.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.PhysicsWorld.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.PhysicsWorld.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.PhysicsWorld.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.PhysicsWorld.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Step the simulation forward.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld.UpdateCollisions">
            <summary>
            Refresh collisions only without updating dynamics.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PhysicsWorld2D">
            <summary>
            2D physics simulation world component. Should be added only to the root scene node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.PhysicsWorld2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of PhysicsWorld2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.PhysicsWorld2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of PhysicsWorld2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of PhysicsWorld2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.PhysicsWorld2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.PhysicsWorld2D.AddRigidBody(Urho.RigidBody2D)">
            <param name="rigidBody"></param>
            <summary>
            Add rigid body.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.AllowSleeping">
            <summary>
            Return allow sleeping.
            Or
            Set allow sleeping.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.AutoClearForces">
            <summary>
            Return auto clear forces.
            Or
            Set auto clear forces.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.ContinuousPhysics">
            <summary>
            Return continuous physics.
            Or
            Set continuous physics.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.DrawAabb">
            <summary>
            Return draw aabb.
            Or
            Set draw aabb.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.DrawCenterOfMass">
            <summary>
            Return draw center of mass.
            Or
            Set draw center of mass.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld2D.DrawDebugGeometry">
            <summary>
            Add debug geometry to the debug renderer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld2D.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.DrawJoint">
            <summary>
            Return draw joint.
            Or
            Set draw joint.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.DrawPair">
            <summary>
            Return draw pair.
            Or
            Set draw pair.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.DrawShape">
            <summary>
            Return draw shape.
            Or
            Set draw shape.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld2D.GetRigidBody(Urho.Vector2,System.UInt32)">
            <param name="point"></param>
            <param name="collisionMask"></param>
            <summary>
            Return rigid body at point.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld2D.GetRigidBody(System.Int32,System.Int32,System.UInt32)">
            <param name="screenX"></param>
            <param name="screenY"></param>
            <param name="collisionMask"></param>
            <summary>
            Return rigid body at screen point.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.Gravity">
            <summary>
            Return gravity.
            Or
            Set gravity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld2D.IsApplyingTransforms">
            <summary>
            Return whether node dirtying should be disregarded.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.PositionIterations">
            <summary>
            Return position iterations.
            Or
            Set position iterations.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld2D.RemoveRigidBody(Urho.RigidBody2D)">
            <param name="rigidBody"></param>
            <summary>
            Remove rigid body.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld2D.SetApplyingTransforms(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set node dirtying to be disregarded.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld2D.SubscribeToPhysicsBeginContact2D(System.Action{Urho.PhysicsBeginContact2DEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the PhysicsBeginContact2D event raised by the PhysicsWorld2D.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.PhysicsWorld2D.SubscribeToPhysicsEndContact2D(System.Action{Urho.PhysicsEndContact2DEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the PhysicsEndContact2D event raised by the PhysicsWorld2D.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.PhysicsWorld2D.SubscribeToPhysicsPostStep2D(System.Action{Urho.PhysicsPostStep2DEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the PhysicsPostStep2D event raised by the PhysicsWorld2D.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.PhysicsWorld2D.SubscribeToPhysicsPreStep2D(System.Action{Urho.PhysicsPreStep2DEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the PhysicsPreStep2D event raised by the PhysicsWorld2D.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.PhysicsWorld2D.SubStepping">
            <summary>
            Return sub stepping.
            Or
            Set sub stepping.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.PhysicsWorld2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.PhysicsWorld2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PhysicsWorld2D.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Step the simulation forward.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.VelocityIterations">
            <summary>
            Return velocity iterations.
            Or
            Set velocity iterations.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PhysicsWorld2D.WarmStarting">
            <summary>
            Return warm starting.
            Or
            Set warm starting.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Place">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Place(Urho.Vector3)">
            <param name="pos"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Place(System.Int32,System.Int32,System.Int32)">
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Place.Position">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Place.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PlaceState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.PlaceState(Urho.Place,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Plane">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Plane(Urho.Vector4)">
            <param name="plane"></param>
            <summary>
            Construct from a 4-dimensional vector, where the w coordinate is the plane parameter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Plane(Urho.Vector3,Urho.Vector3)">
            <param name="normal"></param>
            <param name="point"></param>
            <summary>
            Construct from a normal vector and a point on the plane.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Plane.AbsNormal">
            <summary>
            Plane absolute normal.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Plane.D">
            <summary>
            Plane constant.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Plane.Normal">
            <summary>
            Plane normal.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PListFile">
            <summary>
            Property list (plist).
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.PListFile(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of PListFile, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.PListFile(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of PListFile that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of PListFile attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.PListFile(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.PListFile.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.PListFile.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PListFile.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.PListFile.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.PListFile.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.PListFile.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PListValueType">
            <summary>
            PList value types.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.PListValueType.Bool">
            <summary></summary>
        </member>
        <member name="F:Urho.PListValueType.Float">
            <summary></summary>
        </member>
        <member name="F:Urho.PListValueType.Int">
            <summary></summary>
        </member>
        <member name="F:Urho.PListValueType.None">
            <summary></summary>
        </member>
        <member name="F:Urho.PListValueType.String">
            <summary></summary>
        </member>
        <member name="F:Urho.PListValueType.Valuemap">
            <summary></summary>
        </member>
        <member name="F:Urho.PListValueType.Valuevector">
            <summary></summary>
        </member>
        <member name="T:Urho.PodVector`1">
            <typeparam name="T"></typeparam>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.PodVector`1">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PositionedEventArgs">
            <summary>Event arguments for the UIElement's Positioned event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PositionedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PositionedEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PositionedEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PostRenderUpdateEventArgs">
            <summary>Event arguments for the Engine's PostRenderUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PostRenderUpdateEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PostUpdateEventArgs">
            <summary>Event arguments for the Engine's PostUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PostUpdateEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PressedEventArgs">
            <summary>Event arguments for the Button's Pressed event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.PressedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PrimitiveType">
            <summary>
            Primitive type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.PrimitiveType.LineList">
            <summary></summary>
        </member>
        <member name="F:Urho.PrimitiveType.LineStrip">
            <summary></summary>
        </member>
        <member name="F:Urho.PrimitiveType.PointList">
            <summary></summary>
        </member>
        <member name="F:Urho.PrimitiveType.TriangleFan">
            <summary></summary>
        </member>
        <member name="F:Urho.PrimitiveType.TriangleList">
            <summary></summary>
        </member>
        <member name="F:Urho.PrimitiveType.TriangleStrip">
            <summary></summary>
        </member>
        <member name="T:Urho.Profiler">
            <summary>
            Hierarchical performance profiler subsystem.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Profiler(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Profiler, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Profiler(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Profiler that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Profiler attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Profiler(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Profiler.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Profiler.BeginFrame">
            <summary>
            Begin the profiling frame. Called by HandleBeginFrame().
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Profiler.BeginInterval">
            <summary>
            Begin a new interval.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Profiler.CurrentBlock">
            <summary>
            Return the current profiling block.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Profiler.EndBlock">
            <summary>
            End timing the current profiling block.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Profiler.EndFrame">
            <summary>
            End the profiling frame. Called by HandleEndFrame().
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Profiler.GetData(System.Boolean,System.Boolean,System.UInt32)">
            <param name="showUnused"></param>
            <param name="showTotal"></param>
            <param name="maxDepth"></param>
            <summary>
            Return profiling data as text output.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Profiler.RootBlock">
            <summary>
            Return the root profiling block.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Profiler.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Profiler.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Profiler.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Profiler.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ProfilerBlock">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.PropertySet2D">
            <summary>
            Property set.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.PropertySet2D">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.PropertySet2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of PropertySet2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.PropertySet2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.PropertySet2D.GetProperty(System.String)">
            <param name="name"></param>
            <summary>
            Return property value.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PropertySet2D.HasProperty(System.String)">
            <param name="name"></param>
            <summary>
            Return has property.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.PropertySet2D.Load(Urho.XmlElement)">
            <param name="element"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Quaternion">
            <summary>
            Represents a Quaternion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Quaternion(Urho.Matrix3@)">
            <param name="matrix"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Quaternion(Urho.Vector3,System.Single)">
            <param name="v">The vector part</param>
            <param name="w">The w part</param>
            <summary>
            Construct a new Quaternion from vector and w components
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Quaternion(System.Single,System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Quaternion(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
            <summary>
            Construct a new Quaternion
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Add(Urho.Quaternion,Urho.Quaternion)">
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <summary>
            Add two quaternions
            </summary>
            <returns>The result of the addition</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Add(Urho.Quaternion@,Urho.Quaternion@,Urho.Quaternion@)">
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <param name="result">The result of the addition</param>
            <summary>
            Add two quaternions
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Conjugate">
            <summary>
            Convert this quaternion to its conjugate
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Conjugate(Urho.Quaternion)">
            <param name="q">The quaternion</param>
            <summary>
            Get the conjugate of the given quaternion
            </summary>
            <returns>The conjugate of the given quaternion</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Conjugate(Urho.Quaternion@,Urho.Quaternion@)">
            <param name="q">The quaternion</param>
            <param name="result">The conjugate of the given quaternion</param>
            <summary>
            Get the conjugate of the given quaternion
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Equals(System.Object)">
            <param name="other">The other object to be used in the comparison.</param>
            <summary>
            Compares this object instance to another object for equality.
            </summary>
            <returns>True if both objects are Quaternions of equal value. Otherwise it returns false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Equals(Urho.Quaternion)">
            <param name="other">The other Quaternion to be used in the comparison.</param>
            <summary>
            Compares this Quaternion instance to another Quaternion for equality.
            </summary>
            <returns>True if both instances are equal; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.FromAxisAngle(Urho.Vector3,System.Single)">
            <param name="axis">The axis to rotate about</param>
            <param name="angle">The rotation angle in radians</param>
            <summary>
            Build a quaternion from the given axis and angle
            </summary>
            <returns />
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.FromRotationTo(Urho.Vector3,Urho.Vector3)">
            <param name="start"></param>
            <param name="end"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.GetHashCode">
            <summary>
            Provides the hash code for this object.
            </summary>
            <returns>A hash code formed from the bitwise XOR of this objects members.</returns>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Quaternion.Identity">
            <summary>
            Defines the identity quaternion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Invert(Urho.Quaternion)">
            <param name="q">The quaternion to invert</param>
            <summary>
            Get the inverse of the given quaternion
            </summary>
            <returns>The inverse of the given quaternion</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Invert(Urho.Quaternion@,Urho.Quaternion@)">
            <param name="q">The quaternion to invert</param>
            <param name="result">The inverse of the given quaternion</param>
            <summary>
            Get the inverse of the given quaternion
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Quaternion.Length">
            <summary>
            Gets the length (magnitude) of the quaternion.
            </summary>
            <value></value>
            <remarks></remarks>
            <altmember cref="P:Urho.Quaternion.LengthSquared" />
        </member>
        <member name="P:Urho.Quaternion.LengthSquared">
            <summary>
            Gets the square of the quaternion length (magnitude).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Mult(Urho.Quaternion,Urho.Quaternion)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Multiplies two instances.
            </summary>
            <returns>A new instance containing the result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Mult(Urho.Quaternion@,Urho.Quaternion@,Urho.Quaternion@)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
            <summary>
            Multiplies two instances.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Multiply(Urho.Quaternion,System.Single)">
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <returns>A new instance containing the result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Multiply(Urho.Quaternion,Urho.Quaternion)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Multiplies two instances.
            </summary>
            <returns>A new instance containing the result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Multiply(Urho.Quaternion@,System.Single,Urho.Quaternion@)">
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Multiply(Urho.Quaternion@,System.Single@,Urho.Quaternion@)">
            <param name="quaternion"></param>
            <param name="scale"></param>
            <param name="result"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Multiply(Urho.Quaternion@,Urho.Quaternion@,Urho.Quaternion@)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
            <summary>
            Multiplies two instances.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Normalize">
            <summary>
            Scales the Quaternion to unit length.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Normalize(Urho.Quaternion)">
            <param name="q">The quaternion to normalize</param>
            <summary>
            Scale the given quaternion to unit length
            </summary>
            <returns>The normalized quaternion</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Normalize(Urho.Quaternion@,Urho.Quaternion@)">
            <param name="q">The quaternion to normalize</param>
            <param name="result">The normalized quaternion</param>
            <summary>
            Scale the given quaternion to unit length
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.op_Addition(Urho.Quaternion,Urho.Quaternion)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Adds two instances.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.op_Equality(Urho.Quaternion,Urho.Quaternion)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Compares two instances for equality.
            </summary>
            <returns>True, if left equals right; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.op_Inequality(Urho.Quaternion,Urho.Quaternion)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Compares two instances for inequality.
            </summary>
            <returns>True, if left does not equal right; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.op_Multiply(System.Single,Urho.Quaternion)">
            <param name="scale">The scalar.</param>
            <param name="quaternion">The instance.</param>
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <returns>A new instance containing the result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.op_Multiply(Urho.Quaternion,System.Single)">
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <returns>A new instance containing the result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.op_Multiply(Urho.Quaternion,Urho.Quaternion)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Multiplies two instances.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.op_Multiply(Urho.Quaternion,Urho.Vector3)">
            <param name="quaternion">The instance.</param>
            <param name="vector">The vector.</param>
            <summary>
            Multiplies an instance by a vector3.
            </summary>
            <returns>A new instance containing the result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.op_Subtraction(Urho.Quaternion,Urho.Quaternion)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Subtracts two instances.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Quaternion.PitchAngle">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Quaternion.RollAngle">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Slerp(Urho.Quaternion,Urho.Quaternion,System.Single)">
            <param name="q1">The first quaternion</param>
            <param name="q2">The second quaternion</param>
            <param name="blend">The blend factor</param>
            <summary>
            Do Spherical linear interpolation between two quaternions
            </summary>
            <returns>A smooth blend between the given quaternions</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Sub(Urho.Quaternion,Urho.Quaternion)">
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <summary>
            Subtracts two instances.
            </summary>
            <returns>The result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.Sub(Urho.Quaternion@,Urho.Quaternion@,Urho.Quaternion@)">
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <param name="result">The result of the operation.</param>
            <summary>
            Subtracts two instances.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.ToAxisAngle">
            <summary>
            Convert this instance to an axis-angle representation.
            </summary>
            <returns>A Vector4 that is the axis-angle representation of this quaternion.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.ToAxisAngle(Urho.Vector3@,System.Single@)">
            <param name="axis">The resultant axis</param>
            <param name="angle">The resultant angle</param>
            <summary>
            Convert the current quaternion to axis angle representation
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.ToEulerAngles">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Quaternion.ToString">
            <summary>
            Returns a System.String that represents the current Quaternion.
            </summary>
            <returns />
            <remarks></remarks>
        </member>
        <member name="P:Urho.Quaternion.W">
            <summary>
            Gets or sets the W component of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Quaternion.X">
            <summary>
            Gets or sets the X component of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Quaternion.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Quaternion.XYZ">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Quaternion.Y">
            <summary>
            Gets or sets the Y component of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Quaternion.YawAngle">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Quaternion.Z">
            <summary>
            Gets or sets the Z component of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RandomAccessIterator">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Ray">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Ray(Urho.Vector3,Urho.Vector3)">
            <param name="origin"></param>
            <param name="direction"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Ray.Direction">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Ray.Origin">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RayQueryLevel">
            <summary>
            Graphics raycast detail level.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RayQueryLevel.Aabb">
            <summary></summary>
        </member>
        <member name="F:Urho.RayQueryLevel.Obb">
            <summary></summary>
        </member>
        <member name="F:Urho.RayQueryLevel.Triangle">
            <summary></summary>
        </member>
        <member name="F:Urho.RayQueryLevel.TriangleUv">
            <summary></summary>
        </member>
        <member name="T:Urho.RayQueryResult">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RayQueryResult.Distance">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RayQueryResult.Drawable">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RayQueryResult.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RayQueryResult.Normal">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RayQueryResult.Position">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RayQueryResult.SubObject">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RayQueryResult.TextureUV">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Rect">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Rect(Urho.Vector2,Urho.Vector2)">
            <param name="min"></param>
            <param name="max"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Rect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Rect.Defined">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Rect.Max">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Rect.Min">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RefCount">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RefCounted">
            <summary>
            Base class for intrusively reference-counted objects. These are noncopyable and non-assignable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RefCounted">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RefCounted(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of RefCounted, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="M:Urho.RefCounted.AddRef">
            <summary>
            Increment reference count. Can also be called outside of a SharedPtr for traditional reference counting.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.CheckAccess">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.CheckEngine">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.Dispose">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.Dispose(System.Boolean)">
            <param name="disposing"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.Equals(System.Object)">
            <param name="other"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.Finalize">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.GetHashCode">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RefCounted.Handle">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RefCounted.IsDeleted">
            <summary>
            True if underlying native object is deleted
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.OnDeleted">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.op_Equality(Urho.RefCounted,Urho.RefCounted)">
            <param name="_a"></param>
            <param name="_b"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.op_Inequality(Urho.RefCounted,Urho.RefCounted)">
            <param name="_a"></param>
            <param name="_b"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.RefCountPtr">
            <summary>
            Return pointer to the reference count structure.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.Refs">
            <summary>
            Return reference count.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.ReleaseRef">
            <summary>
            Decrement reference count and delete self if no more references. Can also be called outside of a SharedPtr for traditional reference counting.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RefCounted.WeakRefs">
            <summary>
            Return weak reference count.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ReleasedEventArgs">
            <summary>Event arguments for the Button's Released event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ReleasedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ReloadFailedEventArgs">
            <summary>Event arguments for the Resource's ReloadFailed event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ReloadFinishedEventArgs">
            <summary>Event arguments for the Resource's ReloadFinished event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ReloadStartedEventArgs">
            <summary>Event arguments for the Resource's ReloadStarted event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RemoteEventDataEventArgs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RemoteEventDataEventArgs.Connection">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RemoveSelf">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RemoveSelf">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RemoveSelf.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RemoveSelf.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RemoveSelfState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RemoveSelfState(Urho.RemoveSelf,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RemoveSelfState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RenderCommandSortMode">
            <summary>
            Rendering path sorting modes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RenderCommandSortMode.Backtofront">
            <summary></summary>
        </member>
        <member name="F:Urho.RenderCommandSortMode.Fronttoback">
            <summary></summary>
        </member>
        <member name="T:Urho.RenderCommandType">
            <summary>
            Rendering path command types.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RenderCommandType.Clear">
            <summary></summary>
        </member>
        <member name="F:Urho.RenderCommandType.Forwardlights">
            <summary></summary>
        </member>
        <member name="F:Urho.RenderCommandType.Lightvolumes">
            <summary></summary>
        </member>
        <member name="F:Urho.RenderCommandType.None">
            <summary></summary>
        </member>
        <member name="F:Urho.RenderCommandType.Quad">
            <summary></summary>
        </member>
        <member name="F:Urho.RenderCommandType.Renderui">
            <summary></summary>
        </member>
        <member name="F:Urho.RenderCommandType.Scenepass">
            <summary></summary>
        </member>
        <member name="T:Urho.Renderer">
            <summary>
            High-level rendering subsystem. Manages drawing of 3D views.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Renderer(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Renderer, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Renderer(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Renderer that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Renderer attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Renderer(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Renderer.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Renderer.DefaultLightRamp">
            <summary>
            Return the default range attenuation texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.DefaultLightSpot">
            <summary>
            Return the default spotlight attenuation texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.DefaultMaterial">
            <summary>
            Return the default material.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.DefaultRenderPath">
            <summary>
            Return default renderpath.
            Or
            Set default renderpath.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.DefaultZone">
            <summary>
            Return the default zone.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.DrawDebugGeometry(System.Boolean)">
            <param name="depthTest"></param>
            <summary>
            Add debug geometry to the debug renderer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.DrawShadows">
            <summary>
            Return whether drawing shadows is enabled.
            Or
            Set shadows on/off.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.DynamicInstancing">
            <summary>
            Return whether dynamic instancing is in use.
            Or
            Set dynamic instancing on/off.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.FaceSelectCubeMap">
            <summary>
            Return the shadowed pointlight face selection cube map.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.GetDepthStencil(System.Int32,System.Int32)">
            <param name="width"></param>
            <param name="height"></param>
            <summary>
            Allocate a depth-stencil surface that does not need to be readable. Should only be called during actual rendering, not before.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.GetLightGeometry(Urho.Light)">
            <param name="light"></param>
            <summary>
            Return volume geometry for a light.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.GetNumGeometries(System.Boolean)">
            <param name="allViews"></param>
            <summary>
            Return number of geometries rendered.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.GetNumLights(System.Boolean)">
            <param name="allViews"></param>
            <summary>
            Return number of lights rendered.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.GetNumOccluders(System.Boolean)">
            <param name="allViews"></param>
            <summary>
            Return number of occluders rendered.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.GetNumShadowMaps(System.Boolean)">
            <param name="allViews"></param>
            <summary>
            Return number of shadow maps rendered.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.GetOcclusionBuffer(Urho.Camera)">
            <param name="camera"></param>
            <summary>
            Allocate an occlusion buffer.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.GetScreenBuffer(System.Int32,System.Int32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.UInt32)">
            <param name="width"></param>
            <param name="height"></param>
            <param name="format"></param>
            <param name="cubemap"></param>
            <param name="filtered"></param>
            <param name="srgb"></param>
            <param name="persistentKey"></param>
            <summary>
            Allocate a rendertarget or depth-stencil texture for deferred rendering or postprocessing. Should only be called during actual rendering, not before.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.GetShadowMap(Urho.Light,Urho.Camera,System.UInt32,System.UInt32)">
            <param name="light"></param>
            <param name="camera"></param>
            <param name="viewWidth"></param>
            <param name="viewHeight"></param>
            <summary>
            Allocate a shadow map. If shadow map reuse is disabled, a different map is returned each time.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.GetViewport(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return backbuffer viewport by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.HDRRendering">
            <summary>
            Return whether HDR rendering is enabled.
            Or
            Set HDR rendering on/off.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.IndirectionCubeMap">
            <summary>
            Return the shadowed pointlight indirection cube map.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.InstancingBuffer">
            <summary>
            Return the instancing vertex buffer
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.MaterialQuality">
            <summary>
            Return material quality level.
            Or
            Set material quality level. See the QUALITY constants in GraphicsDefs.h.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.MaxOccluderTriangles">
            <summary>
            Return maximum number of occluder triangles.
            Or
            Set maximum number of occluder triangles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.MaxShadowMaps">
            <summary>
            Return maximum number of shadow maps per resolution.
            Or
            Set maximum number of shadow maps created for one resolution. Only has effect if reuse of shadow maps is disabled.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.MaxSortedInstances">
            <summary>
            Return maximum number of sorted instances per batch group.
            Or
            Set maximum number of sorted instances per batch group. If exceeded, instances are rendered unsorted.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.MinInstances">
            <summary>
            Return minimum number of instances required in a batch group to render as instanced.
            Or
            Set minimum number of instances required in a batch group to render as instanced.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.MobileShadowBiasAdd">
            <summary>
            Return shadow depth bias addition for mobile platforms.
            Or
            Set shadow depth bias addition for mobile platforms (OpenGL ES.)  No effect on desktops. Default 0.0001.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.MobileShadowBiasMul">
            <summary>
            Return shadow depth bias multiplier for mobile platforms.
            Or
            Set shadow depth bias multiplier for mobile platforms (OpenGL ES.) No effect on desktops. Default 2.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.NumBatches">
            <summary>
            Return number of batches rendered.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.NumPrimitives">
            <summary>
            Return number of primitives rendered.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.NumViewports">
            <summary>
            Return number of backbuffer viewports.
            Or
            Set number of backbuffer viewports to render.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.NumViews">
            <summary>
            Return number of views rendered.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.OccluderSizeThreshold">
            <summary>
            Return occluder screen size threshold.
            Or
            Set required screen size (1.0 = full screen) for occluders.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.OcclusionBufferSize">
            <summary>
            Return occlusion buffer width.
            Or
            Set occluder buffer width.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.OptimizeLightByScissor(Urho.Light,Urho.Camera)">
            <param name="light"></param>
            <param name="camera"></param>
            <summary>
            Optimize a light by scissor rectangle.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.OptimizeLightByStencil(Urho.Light,Urho.Camera)">
            <param name="light"></param>
            <param name="camera"></param>
            <summary>
            Optimize a light by marking it to the stencil buffer and setting a stencil test.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.QuadGeometry">
            <summary>
            Return quad geometry used in postprocessing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.QueueRenderSurface(Urho.RenderSurface)">
            <param name="renderTarget"></param>
            <summary>
            Queue a render surface's viewports for rendering. Called by the surface, or by View.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.QueueViewport(Urho.RenderSurface,Urho.Viewport)">
            <param name="renderTarget"></param>
            <param name="viewport"></param>
            <summary>
            Queue a viewport for rendering. Null surface means backbuffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.ReloadShaders">
            <summary>
            Force reload of shaders.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.Render">
            <summary>
            Render. Called by Engine.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.ResizeInstancingBuffer(System.UInt32)">
            <param name="numInstances"></param>
            <summary>
            Ensure sufficient size of the instancing vertex buffer. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.RestoreScreenBufferAllocations">
            <summary>
            Restore the screen buffer allocation status. Called by View.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.ReuseShadowMaps">
            <summary>
            Return whether shadow maps are reused.
            Or
            Set reuse of shadow maps. Default is true. If disabled, also transparent geometry can be shadowed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.SaveScreenBufferAllocations">
            <summary>
            Save the screen buffer allocation status. Called by View.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.SetCullMode(Urho.CullMode,Urho.Camera)">
            <param name="mode"></param>
            <param name="camera"></param>
            <summary>
            Set cull mode while taking possible projection flipping into account.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.SetDefaultRenderPath(Urho.XmlFile)">
            <param name="file"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.SetViewport(System.UInt32,Urho.Viewport)">
            <param name="index"></param>
            <param name="viewport"></param>
            <summary>
            Set a backbuffer viewport.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.ShadowCamera">
            <summary>
            Allocate a temporary shadow camera and a scene node for it. Is thread-safe.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.ShadowMapSize">
            <summary>
            Return shadow map resolution.
            Or
            Set shadow map resolution.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.ShadowQuality">
            <summary>
            Return shadow quality.
            Or
            Set shadow quality mode. See the SHADOWQUALITY constants in GraphicsDefs.h.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.SpecularLighting">
            <summary>
            Return whether specular lighting is enabled.
            Or
            Set specular lighting on/off.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.SubscribeToBeginViewRender(System.Action{Urho.BeginViewRenderEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the BeginViewRender event raised by the Renderer.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Renderer.SubscribeToEndViewRender(System.Action{Urho.EndViewRenderEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the EndViewRender event raised by the Renderer.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Renderer.SubscribeToRenderSurfaceUpdate(System.Action{Urho.RenderSurfaceUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the RenderSurfaceUpdate event raised by the Renderer.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Renderer.TextureAnisotropy">
            <summary>
            Return texture anisotropy.
            Or
            Set texture anisotropy.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.TextureFilterMode">
            <summary>
            Return texture filtering.
            Or
            Set texture filtering.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.TextureQuality">
            <summary>
            Return texture quality level.
            Or
            Set texture quality level. See the QUALITY constants in GraphicsDefs.h.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Renderer.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Renderer.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Renderer.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Update for rendering. Called by HandleRenderUpdate().
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Renderer2D">
            <summary>
            2D renderer component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Renderer2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Renderer2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Renderer2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Renderer2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Renderer2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Renderer2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Renderer2D.AddDrawable(Urho.Drawable2D)">
            <param name="drawable"></param>
            <summary>
            Add Drawable2D.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Renderer2D.CheckVisibility(Urho.Drawable2D)">
            <param name="drawable"></param>
            <summary>
            Check visibility.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer2D.GetMaterial(Urho.Texture2D,Urho.BlendMode)">
            <param name="texture"></param>
            <param name="blendMode"></param>
            <summary>
            Return material by texture and blend mode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Renderer2D.RemoveDrawable(Urho.Drawable2D)">
            <param name="drawable"></param>
            <summary>
            Remove Drawable2D.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Renderer2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Renderer2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Renderer2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Renderer2D.UpdateGeometryType">
            <summary>
            Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RenderPath">
            <summary>
            Rendering path definition.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RenderPath">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RenderPath(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of RenderPath, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.RenderPath(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.RenderPath.Append(Urho.XmlFile)">
            <param name="file"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.Clone">
            <summary>
            Clone the rendering path.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.GetCommand(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return command at index, or null if does not exist.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.Load(Urho.XmlFile)">
            <param name="file"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderPath.NumCommands">
            <summary>
            Return number of commands.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderPath.NumRenderTargets">
            <summary>
            Return number of rendertargets.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.RemoveCommand(System.UInt32)">
            <param name="index"></param>
            <summary>
            Remove a command by index.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.RemoveCommands(System.String)">
            <param name="tag"></param>
            <summary>
            Remove commands by tag name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.RemoveRenderTarget(System.String)">
            <param name="name"></param>
            <summary>
            Remove a rendertarget by name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.RemoveRenderTarget(System.UInt32)">
            <param name="index"></param>
            <summary>
            Remove a rendertarget by index.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.RemoveRenderTargets(System.String)">
            <param name="tag"></param>
            <summary>
            Remove rendertargets by tag name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.SetEnabled(System.String,System.Boolean)">
            <param name="tag"></param>
            <param name="active"></param>
            <summary>
            Enable/disable commands and rendertargets by tag.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.SetShaderParameter(System.String,System.Int32)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a shader parameter in all commands that define it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.SetShaderParameter(System.String,System.Single)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a shader parameter in all commands that define it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.SetShaderParameter(System.String,System.String)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a shader parameter in all commands that define it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.SetShaderParameter(System.String,Urho.Color)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a shader parameter in all commands that define it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.SetShaderParameter(System.String,Urho.IntRect)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a shader parameter in all commands that define it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.SetShaderParameter(System.String,Urho.IntVector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a shader parameter in all commands that define it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.SetShaderParameter(System.String,Urho.Quaternion)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a shader parameter in all commands that define it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.SetShaderParameter(System.String,Urho.Vector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a shader parameter in all commands that define it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.SetShaderParameter(System.String,Urho.Vector3)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a shader parameter in all commands that define it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.SetShaderParameter(System.String,Urho.Vector4)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a shader parameter in all commands that define it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderPath.ToggleEnabled(System.String)">
            <param name="tag"></param>
            <summary>
            Toggle enabled state of commands and rendertargets by tag.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RenderPathCommand">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RenderSurface">
            <summary>
            %Color or depth-stencil surface that can be rendered into.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RenderSurface(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of RenderSurface, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.RenderSurface(Urho.Texture)">
            <param name="parentTexture"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RenderSurface(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.RenderSurface.CreateRenderBuffer(System.UInt32,System.UInt32,System.UInt32)">
            <param name="width"></param>
            <param name="height"></param>
            <param name="format"></param>
            <summary>
            Create a renderbuffer. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderSurface.GetViewport(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return viewport by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderSurface.Height">
            <summary>
            Return height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderSurface.LinkedDepthStencil">
            <summary>
            Return linked depth buffer.
            Or
            Set linked depth-stencil surface.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderSurface.LinkedRenderTarget">
            <summary>
            Return linked color buffer.
            Or
            Set linked color rendertarget.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderSurface.NumViewports">
            <summary>
            Return number of viewports.
            Or
            Set number of viewports.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderSurface.OnDeviceLost">
            <summary>
            Handle device loss.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderSurface.ParentTexture">
            <summary>
            Return parent texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderSurface.QueueUpdate">
            <summary>
            Queue manual update of the viewport(s).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderSurface.Release">
            <summary>
            Release renderbuffer if any.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderSurface.RenderBuffer">
            <summary>
            Return renderbuffer if created.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderSurface.SetViewport(System.UInt32,Urho.Viewport)">
            <param name="index"></param>
            <param name="viewport"></param>
            <summary>
            Set viewport.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderSurface.Target">
            <summary>
            Return surface's OpenGL target.
            Or
            Set surface's OpenGL target.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderSurface.UpdateMode">
            <summary>
            Return viewport update mode.
            Or
            Set viewport update mode. Default is to update when visible.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderSurface.Usage">
            <summary>
            Return usage.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RenderSurface.WasUpdated">
            <summary>
            Clear update flag. Called by Renderer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderSurface.Width">
            <summary>
            Return width.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RenderSurfaceUpdateEventArgs">
            <summary>Event arguments for the Renderer's RenderSurfaceUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RenderSurfaceUpdateMode">
            <summary>
            Update mode for render surface viewports.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RenderSurfaceUpdateMode.Manualupdate">
            <summary></summary>
        </member>
        <member name="F:Urho.RenderSurfaceUpdateMode.Updatealways">
            <summary></summary>
        </member>
        <member name="F:Urho.RenderSurfaceUpdateMode.Updatevisible">
            <summary></summary>
        </member>
        <member name="T:Urho.RenderTargetSizeMode">
            <summary>
            Rendertarget size mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RenderTargetSizeMode.Absolute">
            <summary></summary>
        </member>
        <member name="F:Urho.RenderTargetSizeMode.Viewportdivisor">
            <summary></summary>
        </member>
        <member name="F:Urho.RenderTargetSizeMode.Viewportmultiplier">
            <summary></summary>
        </member>
        <member name="T:Urho.RenderUpdateEventArgs">
            <summary>Event arguments for the Engine's RenderUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RenderUpdateEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Repeat">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Repeat(Urho.FiniteTimeAction,System.UInt32)">
            <param name="action"></param>
            <param name="times"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Repeat.ActionInstant">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Repeat.InnerAction">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Repeat.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Repeat.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Repeat.Times">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Repeat.Total">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RepeatForever">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RepeatForever(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RepeatForever(Urho.FiniteTimeAction[])">
            <param name="actions"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RepeatForever.InnerAction">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RepeatForever.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RepeatForever.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RepeatForeverState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RepeatForeverState(Urho.RepeatForever,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RepeatForeverState.IsDone">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RepeatForeverState.Step(System.Single)">
            <param name="dt"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RepeatState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RepeatState(Urho.Repeat,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RepeatState.ActionInstant">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RepeatState.InnerAction">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RepeatState.InnerActionState">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RepeatState.IsDone">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RepeatState.NextDt">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RepeatState.Stop">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RepeatState.Times">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RepeatState.Total">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RepeatState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ReplicationState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ResizedEventArgs">
            <summary>Event arguments for the UIElement's Resized event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResizedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResizedEventArgs.Height">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResizedEventArgs.Width">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Resource">
            <summary>
            Base class for resources.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Resource(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Resource, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Resource(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Resource that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Resource attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Resource(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Resource.AsyncLoadState">
            <summary>
            Return the asynchronous loading state.
            Or
            Set the asynchronous loading state. Called by ResourceCache. Resources in the middle of asynchronous loading are not normally returned to user.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Resource.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Resource.BaseTypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Resource.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Resource.MemoryUse">
            <summary>
            Return memory use in bytes, possibly approximate.
            Or
            Set memory use in bytes, possibly approximate.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Resource.Name">
            <summary>
            Return name.
            Or
            Set name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Resource.NameHash">
            <summary>
            Return name hash.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Resource.ResetUseTimer">
            <summary>
            Reset last used timer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Resource.SubscribeToReloadFailed(System.Action{Urho.ReloadFailedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ReloadFailed event raised by the Resource.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Resource.SubscribeToReloadFinished(System.Action{Urho.ReloadFinishedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ReloadFinished event raised by the Resource.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Resource.SubscribeToReloadStarted(System.Action{Urho.ReloadStartedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ReloadStarted event raised by the Resource.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Resource.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Resource.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Resource.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Resource.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Resource.UseTimer">
            <summary>
            Return time since last use in milliseconds. If referred to elsewhere than in the resource cache, returns always zero.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ResourceBackgroundLoadedEventArgs">
            <summary>Event arguments for the ResourceCache's ResourceBackgroundLoaded event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceBackgroundLoadedEventArgs.Resource">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceBackgroundLoadedEventArgs.ResourceName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceBackgroundLoadedEventArgs.Success">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ResourceCache">
            <summary>
            %Resource cache subsystem. Loads resources on demand and stores them for later access.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ResourceCache(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ResourceCache, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ResourceCache(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ResourceCache that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ResourceCache attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ResourceCache(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.ResourceCache.AddManualResource(Urho.Resource)">
            <param name="resource"></param>
            <summary>
            Add a manually created resource. Must be uniquely named.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.AddPackageFile(System.String,System.UInt32)">
            <param name="fileName"></param>
            <param name="priority"></param>
            <summary>
            Add a package file for loading resources from by name. Optional priority parameter which will control search order.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.AddPackageFile(Urho.PackageFile,System.UInt32)">
            <param name="package"></param>
            <param name="priority"></param>
            <summary>
            Add a package file for loading resources from. Optional priority parameter which will control search order.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.AddResourceDir(System.String,System.UInt32)">
            <param name="pathName"></param>
            <param name="priority"></param>
            <summary>
            Add a resource load directory. Optional priority parameter which will control search order.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.AddResourceRouter(Urho.ResourceRouter,System.Boolean)">
            <param name="router"></param>
            <param name="addAsFirst"></param>
            <summary>
            Add a resource router object. By default there is none, so the routing process is skipped.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceCache.AutoReloadResources">
            <summary>
            Return whether automatic resource reloading is enabled.
            Or
            Enable or disable automatic reloading of resources as files are modified. Default false.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.BackgroundLoadResource(Urho.StringHash,System.String,System.Boolean,Urho.Resource)">
            <param name="type"></param>
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <param name="caller"></param>
            <summary>
            Background load a resource. An event will be sent when complete. Return true if successfully stored to the load queue, false if eg. already exists. Can be called from outside the main thread.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceCache.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.ResourceCache.Exists(System.String)">
            <param name="name"></param>
            <summary>
            Return whether a file exists by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceCache.FinishBackgroundResourcesMs">
            <summary>
            Return how many milliseconds maximum to spend on finishing background loaded resources.
            Or
            Set how many milliseconds maximum per frame to spend on finishing background loaded resources.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetAnimation(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetAnimationSet2D(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetExistingResource(Urho.StringHash,System.String)">
            <param name="type"></param>
            <param name="name"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetFile(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary>
            Open and return a file from the resource load paths or from inside a package file. If not found, use a fallback search with absolute path. Return null if fails. Can be called from outside the main thread.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetFont(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetImage(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetMaterial(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetMemoryBudget(Urho.StringHash)">
            <param name="type"></param>
            <summary>
            Return memory budget for a resource type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetMemoryUse(Urho.StringHash)">
            <param name="type"></param>
            <summary>
            Return total memory use for a resource type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetModel(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetObjectAnimation(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetParticleEffect(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetParticleEffect2D(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetPListFile(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetPreferredResourceDir(System.String)">
            <param name="path"></param>
            <summary>
            Return either the path itself or its parent, based on which of them has recognized resource subdirectories.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetResource(Urho.StringHash,System.String,System.Boolean)">
            <param name="type"></param>
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary>
            Return a resource by type and name. Load if not loaded yet. Return null if not found or if fails, unless SetReturnFailedResources(true) has been called. Can be called only from the main thread.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetResourceFileName(System.String)">
            <param name="name"></param>
            <summary>
            Return full absolute file name of resource if possible.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetResourceRouter(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return a resource router by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetShader(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetSound(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetSprite2D(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetSpriteSheet2D(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetTechnique(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetTempResource(Urho.StringHash,System.String,System.Boolean)">
            <param name="type"></param>
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary>
            Load a resource without storing it in the resource cache. Return null if not found or if fails. Can be called from outside the main thread if the resource itself is safe to load completely (it does not possess for example GPU data.)
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetTexture2D(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetTmxFile2D(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetValueAnimation(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.GetXmlFile(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="sendEventOnFailure"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceCache.NumBackgroundLoadResources">
            <summary>
            Return number of pending background-loaded resources.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceCache.PackageFiles">
            <summary>
            Return added package files.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.ReleaseAllResources(System.Boolean)">
            <param name="force"></param>
            <summary>
            Release all resources. When called with the force flag false, releases all currently unused resources.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.ReleaseResource(Urho.StringHash,System.String,System.Boolean)">
            <param name="type"></param>
            <param name="name"></param>
            <param name="force"></param>
            <summary>
            Release a resource by name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.ReleaseResources(System.String,System.Boolean)">
            <param name="partialName"></param>
            <param name="force"></param>
            <summary>
            Release resources of all types by partial name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.ReleaseResources(Urho.StringHash,System.Boolean)">
            <param name="type"></param>
            <param name="force"></param>
            <summary>
            Release all resources of a specific type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.ReleaseResources(Urho.StringHash,System.String,System.Boolean)">
            <param name="type"></param>
            <param name="partialName"></param>
            <param name="force"></param>
            <summary>
            Release resources of a specific type and partial name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.ReloadResource(Urho.Resource)">
            <param name="resource"></param>
            <summary>
            Reload a resource. Return true on success. The resource will not be removed from the cache in case of failure.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.ReloadResourceWithDependencies(System.String)">
            <param name="fileName"></param>
            <summary>
            Reload a resource based on filename. Causes also reload of dependent resources if necessary.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.RemovePackageFile(System.String,System.Boolean,System.Boolean)">
            <param name="fileName"></param>
            <param name="releaseResources"></param>
            <param name="forceRelease"></param>
            <summary>
            Remove a package file by name. Optionally release the resources loaded from it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.RemovePackageFile(Urho.PackageFile,System.Boolean,System.Boolean)">
            <param name="package"></param>
            <param name="releaseResources"></param>
            <param name="forceRelease"></param>
            <summary>
            Remove a package file. Optionally release the resources loaded from it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.RemoveResourceDir(System.String)">
            <param name="pathName"></param>
            <summary>
            Remove a resource load directory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.RemoveResourceRouter(Urho.ResourceRouter)">
            <param name="router"></param>
            <summary>
            Remove a resource router object.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.ResetDependencies(Urho.Resource)">
            <param name="resource"></param>
            <summary>
            Reset dependencies for a resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceCache.ReturnFailedResources">
            <summary>
            Return whether resources that failed to load are returned.
            Or
            Enable or disable returning resources that failed to load. Default false. This may be useful in editing to not lose resource ref attributes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.SanitateResourceDirName(System.String)">
            <param name="name"></param>
            <summary>
            Remove unnecessary constructs from a resource directory name and ensure it to be an absolute path.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.SanitateResourceName(System.String)">
            <param name="name"></param>
            <summary>
            Remove unsupported constructs from the resource name to prevent ambiguity, and normalize absolute filename to resource path relative if possible.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceCache.SearchPackagesFirst">
            <summary>
            Return whether when getting resources should check package files or directories first.
            Or
            Define whether when getting resources should check package files or directories first. True for packages, false for directories.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.SetMemoryBudget(Urho.StringHash,System.UInt32)">
            <param name="type"></param>
            <param name="budget"></param>
            <summary>
            Set memory budget for a specific resource type, default 0 is unlimited.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.StoreResourceDependency(Urho.Resource,System.String)">
            <param name="resource"></param>
            <param name="dependency"></param>
            <summary>
            Store a dependency for a resource. If a dependency file changes, the resource will be reloaded.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ResourceCache.SubscribeToFileChanged(System.Action{Urho.FileChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the FileChanged event raised by the ResourceCache.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.ResourceCache.SubscribeToLoadFailed(System.Action{Urho.LoadFailedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the LoadFailed event raised by the ResourceCache.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.ResourceCache.SubscribeToResourceBackgroundLoaded(System.Action{Urho.ResourceBackgroundLoadedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ResourceBackgroundLoaded event raised by the ResourceCache.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.ResourceCache.SubscribeToResourceNotFound(System.Action{Urho.ResourceNotFoundEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ResourceNotFound event raised by the ResourceCache.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.ResourceCache.SubscribeToUnknownResourceType(System.Action{Urho.UnknownResourceTypeEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the UnknownResourceType event raised by the ResourceCache.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.ResourceCache.TotalMemoryUse">
            <summary>
            Return total memory use for all resources.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceCache.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ResourceCache.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ResourceCache.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ResourceCache.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ResourceNotFoundEventArgs">
            <summary>Event arguments for the ResourceCache's ResourceNotFound event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ResourceNotFoundEventArgs.ResourceName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ResourceRef">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ResourceRef.Name">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ResourceRef.Type">
            <summary>Urho's type system type.</summary>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="T:Urho.ResourceRefList">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ResourceRequest">
            <summary>
            Resource request types.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ResourceRequest.Checkexists">
            <summary></summary>
        </member>
        <member name="F:Urho.ResourceRequest.Getfile">
            <summary></summary>
        </member>
        <member name="T:Urho.ResourceRouter">
            <summary>
            Optional resource request processor. Can deny requests, re-route resource file names, or perform other processing per request.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ResourceRouter(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ResourceRouter, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ResourceRouter(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="T:Urho.ReverseTime">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ReverseTime(Urho.FiniteTimeAction)">
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ReverseTime.Other">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ReverseTime.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ReverseTime.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ReverseTimeState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ReverseTimeState(Urho.ReverseTime,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ReverseTimeState.Other">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ReverseTimeState.OtherState">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ReverseTimeState.Stop">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ReverseTimeState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RigidBody">
            <summary>
            Physics rigid body component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RigidBody(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of RigidBody, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.RigidBody(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of RigidBody that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of RigidBody attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.RigidBody(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.RigidBody.Activate">
            <summary>
            Activate rigid body if it was resting.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.AddConstraint(Urho.Constraint)">
            <param name="constraint"></param>
            <summary>
            Add a constraint that refers to this rigid body.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.AngularDamping">
            <summary>
            Return angular velocity damping factor.
            Or
            Set angular velocity damping factor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.AngularFactor">
            <summary>
            Return angular degrees of freedom.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.AngularRestThreshold">
            <summary>
            Return angular velocity deactivation threshold.
            Or
            Set angular velocity deactivation threshold.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.AngularVelocity">
            <summary>
            Return angular velocity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.AnisotropicFriction">
            <summary>
            Return anisotropic friction.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.ApplyForce(Urho.Vector3)">
            <param name="force"></param>
            <summary>
            Apply force to center of mass.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.ApplyForce(Urho.Vector3,Urho.Vector3)">
            <param name="force"></param>
            <param name="position"></param>
            <summary>
            Apply force at local position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.ApplyImpulse(Urho.Vector3)">
            <param name="impulse"></param>
            <summary>
            Apply impulse to center of mass.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.ApplyImpulse(Urho.Vector3,Urho.Vector3)">
            <param name="impulse"></param>
            <param name="position"></param>
            <summary>
            Apply impulse at local position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.ApplyTorque(Urho.Vector3)">
            <param name="torque"></param>
            <summary>
            Apply torque.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.ApplyTorqueImpulse(Urho.Vector3)">
            <param name="torque"></param>
            <summary>
            Apply torque impulse.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.ApplyWorldTransform(Urho.Vector3,Urho.Quaternion)">
            <param name="newWorldPosition"></param>
            <param name="newWorldRotation"></param>
            <summary>
            Apply new world transform after a simulation step. Called internally.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.RigidBody.CcdMotionThreshold">
            <summary>
            Return continuous collision detection motion-per-simulation-step threshold.
            Or
            Set continuous collision detection motion-per-simulation-step threshold. 0 disables, which is the default.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.CcdRadius">
            <summary>
            Return continuous collision detection swept sphere radius.
            Or
            Set continuous collision detection swept sphere radius.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.CenterOfMass">
            <summary>
            Return center of mass offset.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.CollisionEventMode">
            <summary>
            Return collision event signaling mode.
            Or
            Set collision event signaling mode. Default is to signal when rigid bodies are active.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.CollisionLayer">
            <summary>
            Return collision layer.
            Or
            Set collision layer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.CollisionMask">
            <summary>
            Return collision mask.
            Or
            Set collision mask.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.ContactProcessingThreshold">
            <summary>
            Return contact processing threshold.
            Or
            Set contact processing threshold.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.DisableMassUpdate">
            <summary>
            Disable mass update. Call this to optimize performance when adding or editing multiple collision shapes in the same node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.EnableMassUpdate">
            <summary>
            Re-enable mass update and recalculate the mass/inertia by calling UpdateMass(). Call when collision shape changes are finished.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.Friction">
            <summary>
            Return friction coefficient.
            Or
            Set friction coefficient.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.GetVelocityAtPoint(Urho.Vector3)">
            <param name="position"></param>
            <summary>
            Return linear velocity at local point.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.GravityOverride">
            <summary>
            Return gravity override. If zero (default), uses the physics world's gravity.
            Or
            Set gravity override. If zero, uses physics world's gravity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.IsActive">
            <summary>
            Return whether rigid body is active (not sleeping.)
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.IsKinematic">
            <summary>
            Return kinematic mode flag.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.IsTrigger">
            <summary>
            Return whether this RigidBody is acting as a trigger.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.LinearDamping">
            <summary>
            Return linear velocity damping factor.
            Or
            Set linear velocity damping factor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.LinearFactor">
            <summary>
            Return linear degrees of freedom.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.LinearRestThreshold">
            <summary>
            Return linear velocity deactivation threshold.
            Or
            Set linear velocity deactivation threshold.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.LinearVelocity">
            <summary>
            Return linear velocity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.Mass">
            <summary>
            Return mass.
            Or
            Set mass. Zero mass makes the body static.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.PhysicsWorld">
            <summary>
            Return physics world.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.Position">
            <summary>
            Return rigid body position in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.ReAddBodyToWorld">
            <summary>
            Readd rigid body to the physics world to clean up internal state like stale contacts.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.ReleaseBody">
            <summary>
            Remove the rigid body.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.RemoveConstraint(Urho.Constraint)">
            <param name="constraint"></param>
            <summary>
            Remove a constraint that refers to this rigid body.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.ResetForces">
            <summary>
            Reset accumulated forces.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.Restitution">
            <summary>
            Return restitution coefficient.
            Or
            Set restitution coefficient.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.RollingFriction">
            <summary>
            Return rolling friction coefficient.
            Or
            Set rolling friction coefficient.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.Rotation">
            <summary>
            Return rigid body rotation in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.SetAngularFactor(Urho.Vector3)">
            <param name="factor"></param>
            <summary>
            Set angular degrees of freedom. Use 1 to enable an axis or 0 to disable. Default is all axes enabled (1, 1, 1).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.SetAngularVelocity(Urho.Vector3)">
            <param name="angularVelocity"></param>
            <summary>
            Set angular velocity.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.SetAnisotropicFriction(Urho.Vector3)">
            <param name="friction"></param>
            <summary>
            Set anisotropic friction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.SetCollisionLayerAndMask(System.UInt32,System.UInt32)">
            <param name="layer"></param>
            <param name="mask"></param>
            <summary>
            Set collision group and mask.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.SetKinematic(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set rigid body kinematic mode. In kinematic mode forces are not applied to the rigid body.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.SetLinearFactor(Urho.Vector3)">
            <param name="factor"></param>
            <summary>
            Set linear degrees of freedom. Use 1 to enable an axis or 0 to disable. Default is all axes enabled (1, 1, 1).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.SetLinearVelocity(Urho.Vector3)">
            <param name="velocity"></param>
            <summary>
            Set linear velocity.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.SetPosition(Urho.Vector3)">
            <param name="position"></param>
            <summary>
            Set rigid body position in world space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.SetRotation(Urho.Quaternion)">
            <param name="rotation"></param>
            <summary>
            Set rigid body rotation in world space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.SetTransform(Urho.Vector3,Urho.Quaternion)">
            <param name="position"></param>
            <param name="rotation"></param>
            <summary>
            Set rigid body position and rotation in world space as an atomic operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.SetTrigger(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set rigid body trigger mode. In trigger mode collisions are reported but do not apply forces.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.RigidBody.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.RigidBody.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.RigidBody.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.UpdateGravity">
            <summary>
            Update gravity parameters to the Bullet rigid body.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody.UpdateMass">
            <summary>
            Update mass and inertia to the Bullet rigid body.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody.UseGravity">
            <summary>
            Return whether rigid body uses gravity.
            Or
            Set whether gravity is applied to rigid body.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RigidBody2D">
            <summary>
            2D rigid body component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RigidBody2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of RigidBody2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.RigidBody2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of RigidBody2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of RigidBody2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.RigidBody2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.RigidBody2D.AddCollisionShape2D(Urho.CollisionShape2D)">
            <param name="collisionShape"></param>
            <summary>
            Add collision shape.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.AddConstraint2D(Urho.Constraint2D)">
            <param name="constraint"></param>
            <summary>
            Add constraint.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody2D.AngularDamping">
            <summary>
            Return angular damping.
            Or
            Set angular damping.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody2D.AngularVelocity">
            <summary>
            Return angular velocity.
            Or
            Set angular velocity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.ApplyAngularImpulse(System.Single,System.Boolean)">
            <param name="impulse"></param>
            <param name="wake"></param>
            <summary>
            Apply angular impulse.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.ApplyForce(Urho.Vector2,Urho.Vector2,System.Boolean)">
            <param name="force"></param>
            <param name="point"></param>
            <param name="wake"></param>
            <summary>
            Apply force.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.ApplyForceToCenter(Urho.Vector2,System.Boolean)">
            <param name="force"></param>
            <param name="wake"></param>
            <summary>
            Apply force to center.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.ApplyLinearImpulse(Urho.Vector2,Urho.Vector2,System.Boolean)">
            <param name="impulse"></param>
            <param name="point"></param>
            <param name="wake"></param>
            <summary>
            Apply linear impulse.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.ApplyTorque(System.Single,System.Boolean)">
            <param name="torque"></param>
            <param name="wake"></param>
            <summary>
            Apply Torque.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.ApplyWorldTransform">
            <summary>
            Apply world transform.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.RigidBody2D.BodyType">
            <summary>
            Return body type.
            Or
            Set body type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.CreateBody">
            <summary>
            Create body.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody2D.GravityScale">
            <summary>
            Return gravity scale.
            Or
            Set gravity scale.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody2D.Inertia">
            <summary>
            Return inertia.
            Or
            Set inertia.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.IsAllowSleep">
            <summary>
            Return allow sleep.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.IsAwake">
            <summary>
            Return awake.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.IsBullet">
            <summary>
            Return bullet mode.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.IsFixedRotation">
            <summary>
            Return fixed rotation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody2D.LinearDamping">
            <summary>
            Return linear damping.
            Or
            Set linear damping.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody2D.LinearVelocity">
            <summary>
            Return linear velocity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody2D.Mass">
            <summary>
            Return mass.
            Or
            Set mass.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody2D.MassCenter">
            <summary>
            Return mass center.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.ReleaseBody">
            <summary>
            Release body.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.RemoveCollisionShape2D(Urho.CollisionShape2D)">
            <param name="collisionShape"></param>
            <summary>
            Remove collision shape.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.RemoveConstraint2D(Urho.Constraint2D)">
            <param name="constraint"></param>
            <summary>
            Remove constraint.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.SetAllowSleep(System.Boolean)">
            <param name="allowSleep"></param>
            <summary>
            Set allow sleep.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.SetAwake(System.Boolean)">
            <param name="awake"></param>
            <summary>
            Set awake.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.SetBullet(System.Boolean)">
            <param name="bullet"></param>
            <summary>
            Set bullet mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.SetFixedRotation(System.Boolean)">
            <param name="fixedRotation"></param>
            <summary>
            Set fixed rotation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.SetLinearVelocity(Urho.Vector2)">
            <param name="linearVelocity"></param>
            <summary>
            Set linear velocity.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RigidBody2D.SetMassCenter(Urho.Vector2)">
            <param name="center"></param>
            <summary>
            Set mass center.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.RigidBody2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.RigidBody2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.RigidBody2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RigidBody2D.UseFixtureMass">
            <summary>
            Return whether to calculate mass and inertia from collision shapes automatically.
            Or
            Set whether to automatically calculate mass and inertia from collision shapes. Default true.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RotateBy">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RotateBy(System.Single,System.Single)">
            <param name="duration"></param>
            <param name="deltaAngle"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RotateBy(System.Single,System.Single,System.Single,System.Single)">
            <param name="duration"></param>
            <param name="deltaAngleX"></param>
            <param name="deltaAngleY"></param>
            <param name="deltaAngleZ"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateBy.AngleX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateBy.AngleY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateBy.AngleZ">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RotateBy.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RotateBy.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RotateByState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RotateByState(Urho.RotateBy,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateByState.AngleX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateByState.AngleY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateByState.AngleZ">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateByState.StartAngles">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RotateByState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RotateTo">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RotateTo(System.Single,System.Single)">
            <param name="duration"></param>
            <param name="deltaAngle"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RotateTo(System.Single,System.Single,System.Single,System.Single)">
            <param name="duration"></param>
            <param name="deltaAngleX"></param>
            <param name="deltaAngleY"></param>
            <param name="deltaAngleZ"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateTo.DistanceAngleX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateTo.DistanceAngleY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateTo.DistanceAngleZ">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RotateTo.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RotateTo.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.RotateToState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.RotateToState(Urho.RotateTo,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RotateToState.DiffAngleX">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RotateToState.DiffAngleY">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RotateToState.DiffAngleZ">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateToState.DistanceAngleX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateToState.DistanceAngleY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.RotateToState.DistanceAngleZ">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RotateToState.StartAngleX">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RotateToState.StartAngleY">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.RotateToState.StartAngleZ">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.RotateToState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Runtime">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Runtime">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Runtime.Initialize">
            <summary>
            Runtime initialization.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Runtime.LookupObject``1(System.IntPtr,System.Boolean)">
            <typeparam name="T"></typeparam>
            <param name="ptr">Pointer to an unmanaged Urho object</param>
            <param name="createIfNotFound">If true, and the pointer is not known to the runtime, this will create a new wrapper for the object and return it.</param>
            <summary>Looks up the specified native pointer into the internal runtime mapping to managed objects.</summary>
            <returns>If the object exists in the internal runtime hash, it will return the existing managed wrapper for the unmanaged Urho object.   If it does not exist, and createIfNotFound is true, a new wrapper will be created by invoking the constructor that takes an <see cref="T:System.IntPtr" /> parameter, otherwise the returned value is null.</returns>
            <remarks>
                <para>Use this method to lookup objects that derive from the <see cref="T:Urho.UrhoObject" /> class.</para>
                <para>This will return the most derived type.   The “ptr” parameter is used to retrieve the type name of the Urho object and to determine its real identity.</para>
                <para />
                <para>This means that you might get a cast exception if you try to LookupObject and try to force the wrong type to be returned.</para>
            </remarks>
        </member>
        <member name="M:Urho.Runtime.LookupRefCounted``1(System.IntPtr,System.Boolean)">
            <typeparam name="T"></typeparam>
            <param name="ptr">Pointer to an unmanaged RefCounted Urho object</param>
            <param name="createIfNotFound">If true, and the pointer is not known to the runtime, this will create a new wrapper for the object and return it.</param>
            <summary>Looks up the specified native pointer into the internal runtime mapping to managed objects.</summary>
            <returns>If the object exists in the internal runtime hash, it will return the existing managed wrapper for the unmanaged Urho object.   If it does not exist, and createIfNotFound is true, a new wrapper will be created by invoking the constructor that takes an <see cref="T:System.IntPtr" /> parameter, otherwise the returned value is null.</returns>
            <remarks>Use this method to lookup objects that derive from the <see cref="T:Urho.RefCounted" /> class.</remarks>
        </member>
        <member name="M:Urho.Runtime.LookupStringHash(System.Type)">
            <param name="t">The C# type to lookup the string hash for</param>
            <summary>Returns the associated string hash for the given C# type (must be an UrhoType)</summary>
            <returns>The string hash for the </returns>
            <remarks>This will only work for Urho types.</remarks>
        </member>
        <member name="P:Urho.Runtime.Platform">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Runtime.RegisterObject(Urho.RefCounted)">
            <param name="refCounted"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Runtime.UnregisterObject(System.IntPtr)">
            <param name="handle"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ScaleBy">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ScaleBy(System.Single,System.Single)">
            <param name="duration"></param>
            <param name="scale"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ScaleBy(System.Single,System.Single,System.Single,System.Single)">
            <param name="duration"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="scaleZ"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScaleBy.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScaleBy.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ScaleByState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ScaleByState(Urho.ScaleTo,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ScaleTo">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ScaleTo(System.Single,System.Single)">
            <param name="duration"></param>
            <param name="scale"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ScaleTo(System.Single,System.Single,System.Single,System.Single)">
            <param name="duration"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="scaleZ"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScaleTo.EndScaleX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScaleTo.EndScaleY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScaleTo.EndScaleZ">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScaleTo.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScaleTo.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ScaleToState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ScaleToState(Urho.ScaleTo,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ScaleToState.DeltaX">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ScaleToState.DeltaY">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ScaleToState.DeltaZ">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ScaleToState.EndScaleX">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ScaleToState.EndScaleY">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ScaleToState.EndScaleZ">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ScaleToState.StartScaleX">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ScaleToState.StartScaleY">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ScaleToState.StartScaleZ">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScaleToState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Scene">
            <summary>
            Root scene node, represents the whole scene.
            </summary>
            <remarks>
                <para>In general, you will want to add an Octree component to your scene, without it, none of the visual components will be shown.  The default Octree component volume goes from (-1000,-1000,-1000) to (1000,1000,1000) in world coordinates.</para>
                <para />
                <example>
                    <code lang="C#"><![CDATA[scene.CreateComponent<Octree> ();

// Create a child scene node (at world origin) and a StaticModel
// component into it. Set the StaticModel to show a simple plane mesh
// with a "stone" material. Note that naming the scene nodes is
// optional. Scale the scene node larger (100 x 100 world units)
var planeNode = scene.CreateChild("Plane");
planeNode.Scale = new Vector3 (100, 1, 100);
var planeObject = planeNode.CreateComponent<StaticModel> ();
planeObject.Model = cache.GetModel ("Models/Plane.mdl");
planeObject.SetMaterial(cache.GetMaterial("Materials/StoneTiled.xml"));

// Create a directional light to the world so that we can see something. The
// light scene node's orientation controls the light direction; we will use
// the SetDirection() function which calculates the orientation from a forward
// direction vector.
// The light will use default settings (white light, no shadows)
var lightNode = scene.CreateChild("DirectionalLight");
lightNode.SetDirection (new Vector3(0.6f, -1.0f, 0.8f)); 


]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:Urho.Scene(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Scene, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Scene(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Scene that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Scene attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Scene(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Scene.AddReplicationState(Urho.NodeReplicationState*)">
            <param name="state"></param>
            <summary>
            Add a replication state that is tracking this scene.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.AddRequiredPackageFile(Urho.PackageFile)">
            <param name="package"></param>
            <summary>
            Add a required package file for networking. To be called on the server.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.AsyncLoadingMs">
            <summary>
            Return maximum milliseconds per frame to spend on async loading.
            Or
            Set maximum milliseconds per frame to spend on async scene loading.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.AsyncLoadMode">
            <summary>
            Return the load mode of the current asynchronous loading operation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.AsyncProgress">
            <summary>
            Return asynchronous loading progress between 0.0 and 1.0, or 1.0 if not in progress.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Scene.BeginThreadedUpdate">
            <summary>
            Begin a threaded update. During threaded update components can choose to delay dirty processing.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.Checksum">
            <summary>
            Return source file checksum.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.CleanupConnection(Urho.Connection)">
            <param name="connection"></param>
            <summary>
            Clean up all references to a network connection that is about to be removed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.Clear(System.Boolean,System.Boolean)">
            <param name="clearReplicated"></param>
            <param name="clearLocal"></param>
            <summary>
            Clear scene completely of either replicated, local or all nodes and components.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.ClearRequiredPackageFiles">
            <summary>
            Clear required package files.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.ComponentAdded(Urho.Component)">
            <param name="component"></param>
            <summary>
            Component added. Add to ID map.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.ComponentRemoved(Urho.Component)">
            <param name="component"></param>
            <summary>
            Component removed. Remove from ID map.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.DelayedMarkedDirty(Urho.Component)">
            <param name="component"></param>
            <summary>
            Add a component to the delayed dirty notify queue. Is thread-safe.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.ElapsedTime">
            <summary>
            Return elapsed time in seconds.
            Or
            Set elapsed time in seconds. This can be used to prevent inaccuracy in the timer if the scene runs for a long time.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.EndThreadedUpdate">
            <summary>
            End a threaded update. Notify components that marked themselves for delayed dirty processing.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.FileName">
            <summary>
            Return source file name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.GetComponent(System.UInt32)">
            <param name="id"></param>
            <summary>
            Return component from the whole scene by ID, or null if not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.GetFreeComponentID(Urho.CreateMode)">
            <param name="mode"></param>
            <summary>
            Get free component ID, either non-local or local.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.GetFreeNodeID(Urho.CreateMode)">
            <param name="mode"></param>
            <summary>
            Get free node ID, either non-local or local.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.GetNode(System.UInt32)">
            <param name="id"></param>
            <summary>
            Return node from the whole scene by ID, or null if not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.GetVarName(Urho.StringHash)">
            <param name="hash"></param>
            <summary>
            Return a node user variable name, or empty if not registered.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.InstantiateXml(Urho.XmlElement,Urho.Vector3,Urho.Quaternion,Urho.CreateMode)">
            <param name="source"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="mode"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.IsAsyncLoading">
            <summary>
            Return whether an asynchronous loading operation is in progress.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.IsThreadedUpdate">
            <summary>
            Return threaded update flag.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.IsUpdateEnabled">
            <summary>
            Return whether updates are enabled.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.LoadAsync(Urho.File,Urho.LoadMode)">
            <param name="file"></param>
            <param name="mode"></param>
            <summary>
            Load from a binary file asynchronously. Return true if started successfully. The LOAD_RESOURCES_ONLY mode can also be used to preload resources from object prefab files.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.LoadAsyncXml(Urho.File,Urho.LoadMode)">
            <param name="file"></param>
            <param name="mode"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.LoadXml(System.String)">
            <param name="file"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.LoadXml(Urho.XmlElement,System.Boolean)">
            <param name="source"></param>
            <param name="setInstanceDefault"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.LoadXmlFromCache(Urho.ResourceCache,System.String)">
            <param name="cache"></param>
            <param name="file"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.MarkNetworkUpdate">
            <summary>
            Mark for attribute check on the next network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.MarkNetworkUpdate(Urho.Component)">
            <param name="component"></param>
            <summary>
            Mark a comoponent for attribute check on the next network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.MarkNetworkUpdate(Urho.Node)">
            <param name="node"></param>
            <summary>
            Mark a node for attribute check on the next network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.MarkReplicationDirty(Urho.Node)">
            <param name="node"></param>
            <summary>
            Mark a node dirty in scene replication states. The node does not need to have own replication state yet.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.NodeAdded(Urho.Node)">
            <param name="node"></param>
            <summary>
            Node added. Assign scene pointer and add to ID map.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.NodeRemoved(Urho.Node)">
            <param name="node"></param>
            <summary>
            Node removed. Remove from ID map.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.PrepareNetworkUpdate">
            <summary>
            Prepare network update by comparing attributes and marking replication states dirty as necessary.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. Node must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.RegisterVar(System.String)">
            <param name="name"></param>
            <summary>
            Register a node user variable hash reverse mapping (for editing.)
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.RequiredPackageFiles">
            <summary>
            Return required package files.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.SaveXml(System.String,System.String)">
            <param name="file"></param>
            <param name="indentation"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.SetUpdateEnabled(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Enable or disable scene update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.SetVarNamesAttr(System.String)">
            <param name="value"></param>
            <summary>
            Set node user variable reverse mappings.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.SmoothingConstant">
            <summary>
            Return motion smoothing constant.
            Or
            Set network client motion smoothing constant.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.SnapThreshold">
            <summary>
            Return motion smoothing snap threshold.
            Or
            Set network client motion smoothing snap threshold.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.StopAsyncLoading">
            <summary>
            Stop asynchronous loading.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.SubscribeToAsyncLoadFinished(System.Action{Urho.AsyncLoadFinishedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the AsyncLoadFinished event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToAsyncLoadProgress(System.Action{Urho.AsyncLoadProgressEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the AsyncLoadProgress event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToAttributeAnimationUpdate(System.Action{Urho.AttributeAnimationUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the AttributeAnimationUpdate event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToComponentAdded(System.Action{Urho.ComponentAddedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ComponentAdded event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToComponentEnabledChanged(System.Action{Urho.ComponentEnabledChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ComponentEnabledChanged event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToComponentRemoved(System.Action{Urho.ComponentRemovedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ComponentRemoved event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToNodeAdded(System.Action{Urho.NodeAddedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NodeAdded event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToNodeEnabledChanged(System.Action{Urho.NodeEnabledChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NodeEnabledChanged event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToNodeNameChanged(System.Action{Urho.NodeNameChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NodeNameChanged event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToNodeRemoved(System.Action{Urho.NodeRemovedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NodeRemoved event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToSceneDrawableUpdateFinished(System.Action{Urho.SceneDrawableUpdateFinishedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the SceneDrawableUpdateFinished event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToScenePostUpdate(System.Action{Urho.ScenePostUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ScenePostUpdate event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToSceneSubsystemUpdate(System.Action{Urho.SceneSubsystemUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the SceneSubsystemUpdate event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToSceneUpdate(System.Action{Urho.SceneUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the SceneUpdate event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Scene.SubscribeToUpdateSmoothing(System.Action{Urho.UpdateSmoothingEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the UpdateSmoothing event raised by the Scene.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Scene.TimeScale">
            <summary>
            Return update time scale.
            Or
            Set update time scale. 1.0 = real time (default.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Scene.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Scene.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Scene.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.UnregisterAllVars">
            <summary>
            Clear all registered node user variable hash reverse mappings.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.UnregisterVar(System.String)">
            <param name="name"></param>
            <summary>
            Unregister a node user variable hash reverse mapping.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Scene.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Update scene. Called by HandleUpdate.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Scene.VarNamesAttr">
            <summary>
            Return node user variable reverse mappings.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SceneDrawableUpdateFinishedEventArgs">
            <summary>Event arguments for the Scene's SceneDrawableUpdateFinished event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SceneDrawableUpdateFinishedEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SceneDrawableUpdateFinishedEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ScenePostUpdateEventArgs">
            <summary>Event arguments for the Scene's ScenePostUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScenePostUpdateEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScenePostUpdateEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SceneSubsystemUpdateEventArgs">
            <summary>Event arguments for the Scene's SceneSubsystemUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SceneSubsystemUpdateEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SceneSubsystemUpdateEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SceneUpdateEventArgs">
            <summary>Event arguments for the Scene's SceneUpdate event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SceneUpdateEventArgs.Scene">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SceneUpdateEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ScreenModeEventArgs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScreenModeEventArgs.Borderless">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScreenModeEventArgs.Fullscreen">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScreenModeEventArgs.Height">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScreenModeEventArgs.Resizable">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScreenModeEventArgs.Width">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ScrollBar">
            <summary>
            Scroll bar %UI element with forward and back buttons.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ScrollBar(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ScrollBar, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ScrollBar(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ScrollBar that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ScrollBar attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ScrollBar(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.ScrollBar.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBar.BackButton">
            <summary>
            Return back button element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBar.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.ScrollBar.ChangeValue(System.Single)">
            <param name="delta"></param>
            <summary>
            Change slider current value by a delta.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBar.EffectiveScrollStep">
            <summary>
            Return scroll step multiplied by factor.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBar.ForwardButton">
            <summary>
            Return forward button element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollBar.OnResize">
            <summary>
            React to resize.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollBar.OnSetEditable">
            <summary>
            React to editable status change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBar.Orientation">
            <summary>
            Return scrollbar orientation.
            Or
            Set orientation type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBar.Range">
            <summary>
            Return slider range.
            Or
            Set slider range maximum value (minimum value is always 0.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollBar.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBar.ScrollStep">
            <summary>
            Return button scroll step.
            Or
            Set button scroll step.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBar.Slider">
            <summary>
            Return slider element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollBar.StepBack">
            <summary>
            Scroll back one step.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBar.StepFactor">
            <summary>
            Return button step factor.
            Or
            Set button step factor, can be used to adjust the step for constant pixel size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollBar.StepForward">
            <summary>
            Scroll forward one step.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollBar.SubscribeToScrollBarChanged(System.Action{Urho.ScrollBarChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ScrollBarChanged event raised by the ScrollBar.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.ScrollBar.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ScrollBar.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ScrollBar.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ScrollBar.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBar.Value">
            <summary>
            Return slider current value.
            Or
            Set slider current value.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ScrollBarChangedEventArgs">
            <summary>Event arguments for the ScrollBar's ScrollBarChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBarChangedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollBarChangedEventArgs.Value">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ScrollView">
            <summary>
            Scrollable %UI element for showing a (possibly large) child element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ScrollView(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ScrollView, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ScrollView(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ScrollView that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ScrollView attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ScrollView(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.ScrollView.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.AutoDisableChildren">
            <summary>
            Return whether child element will be disabled while touch scrolling.
            Or
            Set whether child elements should be disabled while touch scrolling.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.AutoDisableThreshold">
            <summary>
            Return how much touch movement is needed to trigger child element disabling.
            Or
            Set how much touch movement is needed to trigger child element disabling.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ScrollView.ContentElement">
            <summary>
            Return content element.
            Or
            Set content element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.HorizontalScrollBar">
            <summary>
            Return horizontal scroll bar.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollView.OnKey(System.Int32,System.Int32,System.Int32)">
            <param name="key"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <summary>
            React to a key press.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollView.OnResize">
            <summary>
            React to resize.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollView.OnWheel(System.Int32,System.Int32,System.Int32)">
            <param name="delta"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <summary>
            React to mouse wheel.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.PageStep">
            <summary>
            Return arrow key page step.
            Or
            Set arrow key page step.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollView.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.ScrollBarsAutoVisible">
            <summary>
            Return whether scrollbars are automatically shown/hidden.
            Or
            Set whether to automatically show/hide scrollbars. Default true.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.ScrollDeceleration">
            <summary>
            Return scroll deceleration.
            Or
            Set scroll deceleration.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.ScrollPanel">
            <summary>
            Return scroll panel.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.ScrollSnapEpsilon">
            <summary>
            Return scroll snap epsilon
            Or
            Set scroll snap epsilon
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.ScrollStep">
            <summary>
            Return arrow key scroll step.
            Or
            Set arrow key scroll step. Also sets it on the scrollbars.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollView.SetScrollBarsVisible(System.Boolean,System.Boolean)">
            <param name="horizontal"></param>
            <param name="vertical"></param>
            <summary>
            Set scrollbars' visibility manually. Disables scrollbar autoshow/hide.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollView.SetViewPosition(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set view offset from the top-left corner.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollView.SetViewPositionAttr(Urho.IntVector2)">
            <param name="value"></param>
            <summary>
            Set view position attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollView.SubscribeToViewChanged(System.Action{Urho.ViewChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ViewChanged event raised by the ScrollView.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.ScrollView.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ScrollView.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ScrollView.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ScrollView.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ScrollView.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Perform UI element update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.VerticalScrollBar">
            <summary>
            Return vertical scroll bar.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ScrollView.ViewPosition">
            <summary>
            Return view offset from the top-left corner.
            Or
            Set view offset from the top-left corner.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SelectionChangedEventArgs">
            <summary>Event arguments for the ListView's SelectionChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SelectionChangedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Sequence">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Sequence(Urho.FiniteTimeAction[])">
            <param name="actions"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Sequence(Urho.FiniteTimeAction,Urho.FiniteTimeAction)">
            <param name="action1"></param>
            <param name="action2"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sequence.Actions">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sequence.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sequence.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SequenceState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.SequenceState(Urho.Sequence,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.SequenceState.actionSequences">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.SequenceState.actionStates">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SequenceState.IsDone">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.SequenceState.last">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.SequenceState.split">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SequenceState.Step(System.Single)">
            <param name="dt"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SequenceState.Stop">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SequenceState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Serializable">
            <summary>
            Base class for objects with automatic serialization through attributes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Serializable(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Serializable, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Serializable(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Serializable that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Serializable attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Serializable(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Serializable.AllocateNetworkState">
            <summary>
            Allocate network attribute state.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Serializable.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Serializable.GetAttribute(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute value by name. Return empty if not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.GetAttribute(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return attribute value by index. Return empty if illegal index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.GetAttributeDefault(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute default value by name. Return empty if not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.GetAttributeDefault(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return attribute default value by index. Return empty if illegal index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.GetInterceptNetworkUpdate(System.String)">
            <param name="attributeName"></param>
            <summary>
            Return whether an attribute's network updates are being intercepted.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.IsTemporary">
            <summary>
            Return whether is temporary.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.LoadXml(Urho.XmlElement,System.Boolean)">
            <param name="source"></param>
            <param name="setInstanceDefault"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.MarkNetworkUpdate">
            <summary>
            Mark for attribute check on the next network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Serializable.NetworkState">
            <summary>
            Return the network attribute state, if allocated.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Serializable.NumAttributes">
            <summary>
            Return number of attributes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Serializable.NumNetworkAttributes">
            <summary>
            Return number of network replication attributes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.RemoveInstanceDefault">
            <summary>
            Remove instance's default values if they are set previously.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.ResetToDefault">
            <summary>
            Reset all editable attributes to their default values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SaveDefaultAttributes">
            <summary>
            Return whether should save default-valued attributes into XML. Default false.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SaveXml(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.String,System.Int32)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set attribute by name. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.String,System.Single)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set attribute by name. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.String,System.String)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set attribute by name. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.String,Urho.Color)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set attribute by name. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.String,Urho.IntRect)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set attribute by name. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.String,Urho.IntVector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set attribute by name. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.String,Urho.Quaternion)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set attribute by name. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.String,Urho.Vector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set attribute by name. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.String,Urho.Vector3)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set attribute by name. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.String,Urho.Vector4)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set attribute by name. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.UInt32,System.Int32)">
            <param name="index"></param>
            <param name="value"></param>
            <summary>
            Set attribute by index. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.UInt32,System.Single)">
            <param name="index"></param>
            <param name="value"></param>
            <summary>
            Set attribute by index. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.UInt32,System.String)">
            <param name="index"></param>
            <param name="value"></param>
            <summary>
            Set attribute by index. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.UInt32,Urho.Color)">
            <param name="index"></param>
            <param name="value"></param>
            <summary>
            Set attribute by index. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.UInt32,Urho.IntRect)">
            <param name="index"></param>
            <param name="value"></param>
            <summary>
            Set attribute by index. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.UInt32,Urho.IntVector2)">
            <param name="index"></param>
            <param name="value"></param>
            <summary>
            Set attribute by index. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.UInt32,Urho.Quaternion)">
            <param name="index"></param>
            <param name="value"></param>
            <summary>
            Set attribute by index. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.UInt32,Urho.Vector2)">
            <param name="index"></param>
            <param name="value"></param>
            <summary>
            Set attribute by index. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.UInt32,Urho.Vector3)">
            <param name="index"></param>
            <param name="value"></param>
            <summary>
            Set attribute by index. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetAttribute(System.UInt32,Urho.Vector4)">
            <param name="index"></param>
            <param name="value"></param>
            <summary>
            Set attribute by index. Return true if successfully set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetInterceptNetworkUpdate(System.String,System.Boolean)">
            <param name="attributeName"></param>
            <param name="enable"></param>
            <summary>
            Enable interception of an attribute from network updates. Intercepted attributes are sent as events instead of applying directly. This can be used to implement client side prediction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SetTemporary(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set temporary flag. Temporary objects will not be saved.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Serializable.SubscribeToInterceptNetworkUpdate(System.Action{Urho.InterceptNetworkUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the InterceptNetworkUpdate event raised by the Serializable.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Serializable.SubscribeToTemporaryChanged(System.Action{Urho.TemporaryChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the TemporaryChanged event raised by the Serializable.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Serializable.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Serializable.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Serializable.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Serializable.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ServerConnectedEventArgs">
            <summary>Event arguments for the Network's ServerConnected event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ServerDisconnectedEventArgs">
            <summary>Event arguments for the Network's ServerDisconnected event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Shader">
            <summary>
            %Shader resource consisting of several shader variations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Shader(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Shader, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Shader(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Shader that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Shader attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Shader(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Shader.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Shader.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Shader.GetSourceCode(Urho.ShaderType)">
            <param name="type"></param>
            <summary>
            Return either vertex or pixel shader source code.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Shader.GetVariation(Urho.ShaderType,System.String)">
            <param name="type"></param>
            <param name="defines"></param>
            <summary>
            Return a variation with defines.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Shader.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Shader.TimeStamp">
            <summary>
            Return the latest timestamp of the shader code and its includes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Shader.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Shader.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Shader.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Shader.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ShaderParameter">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ShaderParameterAnimationInfo">
            <summary>
            Material's shader parameter animation instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ShaderParameterAnimationInfo(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ShaderParameterAnimationInfo, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ShaderParameterAnimationInfo(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.ShaderParameterAnimationInfo(Urho.Material,System.String,Urho.ValueAnimation,Urho.WrapMode,System.Single)">
            <param name="material"></param>
            <param name="name"></param>
            <param name="attributeAnimation"></param>
            <param name="wrapMode"></param>
            <param name="speed"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ShaderParameterAnimationInfo.Name">
            <summary>
            Return shader parameter name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ShaderParameterGroup">
            <summary>
            Shader parameter groups for determining need to update. On APIs that support constant buffers, these correspond to different constant buffers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ShaderParameterGroup.Camera">
            <summary></summary>
        </member>
        <member name="F:Urho.ShaderParameterGroup.Custom">
            <summary></summary>
        </member>
        <member name="F:Urho.ShaderParameterGroup.Frame">
            <summary></summary>
        </member>
        <member name="F:Urho.ShaderParameterGroup.Light">
            <summary></summary>
        </member>
        <member name="F:Urho.ShaderParameterGroup.Material">
            <summary></summary>
        </member>
        <member name="F:Urho.ShaderParameterGroup.MaxShaderParameterGroups">
            <summary></summary>
        </member>
        <member name="F:Urho.ShaderParameterGroup.Object">
            <summary></summary>
        </member>
        <member name="F:Urho.ShaderParameterGroup.Zone">
            <summary></summary>
        </member>
        <member name="T:Urho.ShaderPrecache">
            <summary>
            Utility class for collecting used shader combinations during runtime for precaching.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ShaderPrecache(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ShaderPrecache, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ShaderPrecache(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.ShaderPrecache(Urho.Context,System.String)">
            <param name="context">The context that this object will be attached to.</param>
            <param name="fileName"></param>
            <summary>Creates an instance of ShaderPrecache that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ShaderPrecache attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="P:Urho.ShaderPrecache.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.ShaderPrecache.StoreShaders(Urho.ShaderVariation,Urho.ShaderVariation)">
            <param name="vs"></param>
            <param name="ps"></param>
            <summary>
            Collect a shader combination. Called by Graphics when shaders have been set.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ShaderPrecache.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ShaderPrecache.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ShaderPrecache.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ShaderPrecache.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ShaderProgram">
            <summary>
            Linked shader program on the GPU.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ShaderProgram(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ShaderProgram, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ShaderProgram(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.ShaderProgram(Urho.Graphics,Urho.ShaderVariation,Urho.ShaderVariation)">
            <param name="graphics"></param>
            <param name="vertexShader"></param>
            <param name="pixelShader"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderProgram.ClearGlobalParameterSource(Urho.ShaderParameterGroup)">
            <param name="group"></param>
            <summary>
            Clear a global parameter source when constant buffers change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderProgram.ClearParameterSource(Urho.ShaderParameterGroup)">
            <param name="group"></param>
            <summary>
            Clear a parameter source. Affects only the current shader program if appropriate.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderProgram.ClearParameterSources">
            <summary>
            Clear all parameter sources from all shader programs by incrementing the global parameter source framenumber.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderProgram.GetParameter(Urho.StringHash)">
            <param name="param"></param>
            <summary>
            Return the info for a shader parameter, or null if does not exist.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderProgram.HasParameter(Urho.StringHash)">
            <param name="param"></param>
            <summary>
            Return whether uses a shader parameter.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderProgram.HasTextureUnit(Urho.TextureUnit)">
            <param name="unit"></param>
            <summary>
            Return whether uses a texture unit.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderProgram.Link">
            <summary>
            Link the shaders and examine the uniforms and samplers used. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ShaderProgram.LinkerOutput">
            <summary>
            Return linker output.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderProgram.NeedParameterUpdate(Urho.ShaderParameterGroup,System.Void*)">
            <param name="group"></param>
            <param name="source"></param>
            <summary>
            Check whether a shader parameter group needs update. Does not actually check whether parameters exist in the shaders.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderProgram.OnDeviceLost">
            <summary>
            Mark the GPU resource destroyed on context destruction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ShaderProgram.PixelShader">
            <summary>
            Return the pixel shader.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderProgram.Release">
            <summary>
            Release shader program.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ShaderProgram.VertexShader">
            <summary>
            Return the vertex shader.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ShaderType">
            <summary>
            Shader types.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ShaderType.PS">
            <summary></summary>
        </member>
        <member name="F:Urho.ShaderType.VS">
            <summary></summary>
        </member>
        <member name="T:Urho.ShaderVariation">
            <summary>
            Vertex or pixel shader on the GPU.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ShaderVariation(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ShaderVariation, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ShaderVariation(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.ShaderVariation(Urho.Shader,Urho.ShaderType)">
            <param name="owner"></param>
            <param name="type"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ShaderVariation.CompilerOutput">
            <summary>
            Return compile error/warning string.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderVariation.Create">
            <summary>
            Compile the shader. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ShaderVariation.Defines">
            <summary>
            Return defines.
            Or
            Set defines.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ShaderVariation.FullName">
            <summary>
            Return full shader name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ShaderVariation.Name">
            <summary>
            Return name.
            Or
            Set name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderVariation.OnDeviceLost">
            <summary>
            Mark the GPU resource destroyed on context destruction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ShaderVariation.Owner">
            <summary>
            Return the owner resource.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ShaderVariation.Release">
            <summary>
            Release the shader.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ShaderVariation.ShaderType">
            <summary>
            Return shader type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ShapeType">
            <summary>
            Collision shape type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ShapeType.Box">
            <summary></summary>
        </member>
        <member name="F:Urho.ShapeType.Capsule">
            <summary></summary>
        </member>
        <member name="F:Urho.ShapeType.Cone">
            <summary></summary>
        </member>
        <member name="F:Urho.ShapeType.Convexhull">
            <summary></summary>
        </member>
        <member name="F:Urho.ShapeType.Cylinder">
            <summary></summary>
        </member>
        <member name="F:Urho.ShapeType.Sphere">
            <summary></summary>
        </member>
        <member name="F:Urho.ShapeType.Staticplane">
            <summary></summary>
        </member>
        <member name="F:Urho.ShapeType.Terrain">
            <summary></summary>
        </member>
        <member name="F:Urho.ShapeType.Trianglemesh">
            <summary></summary>
        </member>
        <member name="T:Urho.Show">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Show">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Show.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Show.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ShowState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ShowState(Urho.Show,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Skeleton">
            <summary>
            Hierarchical collection of bones.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Skeleton(System.IntPtr,System.Object)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <param name="container"></param>
            <summary>Constructs a new instance of Skeleton, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="M:Urho.Skeleton.ClearBones">
            <summary>
            Clear bones.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Skeleton.GetBone(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return bone by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Skeleton.GetBone(Urho.StringHash)">
            <param name="boneNameHash"></param>
            <summary>
            Return bone by name hash.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Skeleton.GetBoneSafe(System.String)">
            <param name="name"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Skeleton.GetBoneSafe(System.UInt32)">
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Skeleton.NumBones">
            <summary>
            Return number of bones.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Skeleton.Reset">
            <summary>
            Reset all animating bones to initial positions.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Skeleton.ResetSilent">
            <summary>
            Reset all animating bones to initial positions without marking the nodes dirty. Requires the node dirtying to be performed later.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Skeleton.RootBone">
            <summary>
            Return root bone.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Skeleton.SetRootBoneIndex(System.UInt32)">
            <param name="index"></param>
            <summary>
            Set root bone's index.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Skybox">
            <summary>
            Static model component with fixed position in relation to the camera.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Skybox(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Skybox, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Skybox(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Skybox that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Skybox attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Skybox(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Skybox.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Skybox.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. StaticModel must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Skybox.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Skybox.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Skybox.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Skybox.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Slider">
            <summary>
            %Slider bar %UI element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Slider(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Slider, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Slider(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Slider that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Slider attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Slider(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Slider.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Slider.ChangeValue(System.Single)">
            <param name="delta"></param>
            <summary>
            Change value by a delta.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Slider.Knob">
            <summary>
            Return knob element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Slider.OnClickBegin(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="button"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse click begin.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Slider.OnClickEnd(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,System.Int32,Urho.Cursor,Urho.UIElement)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="button"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <param name="beginElement"></param>
            <summary>
            React to mouse click end.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Slider.OnDragBegin(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag begin.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Slider.OnDragEnd(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="dragButtons"></param>
            <param name="buttons"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag end.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Slider.OnDragMove(Urho.IntVector2,Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="deltaPos"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag motion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Slider.OnHover(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse hover.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Slider.OnResize">
            <summary>
            React to resize.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Slider.Orientation">
            <summary>
            Return orientation type.
            Or
            Set orientation type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Slider.Range">
            <summary>
            Return slider range.
            Or
            Set slider range maximum value (minimum value is always 0.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Slider.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Slider.RepeatRate">
            <summary>
            Return paging minimum repeat rate (number of events per second).
            Or
            Set paging minimum repeat rate (number of events per second).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Slider.SubscribeToSliderChanged(System.Action{Urho.SliderChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the SliderChanged event raised by the Slider.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Slider.SubscribeToSliderPaged(System.Action{Urho.SliderPagedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the SliderPaged event raised by the Slider.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Slider.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Slider.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Slider.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Slider.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Slider.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Perform UI element update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Slider.Value">
            <summary>
            Return slider current value.
            Or
            Set slider current value.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SliderChangedEventArgs">
            <summary>Event arguments for the Slider's SliderChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SliderChangedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SliderChangedEventArgs.Value">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SliderPagedEventArgs">
            <summary>Event arguments for the Slider's SliderPaged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SliderPagedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SliderPagedEventArgs.Offset">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SliderPagedEventArgs.Pressed">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SmoothedTransform">
            <summary>
            Transform smoothing component for network updates.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.SmoothedTransform(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of SmoothedTransform, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.SmoothedTransform(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of SmoothedTransform that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of SmoothedTransform attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.SmoothedTransform(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.SmoothedTransform.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.SmoothedTransform.IsInProgress">
            <summary>
            Return whether smoothing is in progress.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SmoothedTransform.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SmoothedTransform.SetTargetWorldPosition(Urho.Vector3)">
            <param name="position"></param>
            <summary>
            Set target position in world space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SmoothedTransform.SetTargetWorldRotation(Urho.Quaternion)">
            <param name="rotation"></param>
            <summary>
            Set target rotation in world space.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SmoothedTransform.SubscribeToTargetPositionChanged(System.Action{Urho.TargetPositionChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the TargetPositionChanged event raised by the SmoothedTransform.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.SmoothedTransform.SubscribeToTargetRotationChanged(System.Action{Urho.TargetRotationChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the TargetRotationChanged event raised by the SmoothedTransform.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.SmoothedTransform.TargetPosition">
            <summary>
            Return target position in parent space.
            Or
            Set target position in parent space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SmoothedTransform.TargetRotation">
            <summary>
            Return target rotation in parent space.
            Or
            Set target rotation in parent space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SmoothedTransform.TargetWorldPosition">
            <summary>
            Return target position in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SmoothedTransform.TargetWorldRotation">
            <summary>
            Return target rotation in world space.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SmoothedTransform.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.SmoothedTransform.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SmoothedTransform.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SmoothedTransform.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SmoothedTransform.Update(System.Single,System.Single)">
            <param name="constant"></param>
            <param name="squaredSnapThreshold"></param>
            <summary>
            Update smoothing.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Sound">
            <summary>
            %Sound resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Sound(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Sound, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Sound(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Sound that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Sound attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Sound(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Sound.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Sound.DataSize">
            <summary>
            Return total sound data size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sound.DecoderStream">
            <summary>
            Return a new instance of a decoder sound stream. Used by compressed sounds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sound.End">
            <summary>
            Return sound data end.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sound.FixInterpolation">
            <summary>
            Fix interpolation by copying data from loop start to loop end (looped), or adding silence (oneshot.) Called internally, does not normally need to be called, unless the sound data is modified manually on the fly.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sound.Frequency">
            <summary>
            Return default frequency as a float.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sound.IntFrequency">
            <summary>
            Return default frequency as an integer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sound.IsCompressed">
            <summary>
            Return whether is compressed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sound.IsLooped">
            <summary>
            Return whether is looped.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sound.IsSixteenBit">
            <summary>
            Return whether data is sixteen bit.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sound.IsStereo">
            <summary>
            Return whether data is stereo.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sound.Length">
            <summary>
            Return length in seconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sound.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sound.Repeat">
            <summary>
            Return loop start.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sound.SampleSize">
            <summary>
            Return sample size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sound.SetData(System.Void*,System.UInt32)">
            <param name="data"></param>
            <param name="dataSize"></param>
            <summary>
            Set uncompressed sound data.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sound.SetFormat(System.UInt32,System.Boolean,System.Boolean)">
            <param name="frequency"></param>
            <param name="sixteenBit"></param>
            <param name="stereo"></param>
            <summary>
            Set uncompressed sound data format.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sound.SetLoop(System.UInt32,System.UInt32)">
            <param name="repeatOffset"></param>
            <param name="endOffset"></param>
            <summary>
            Define loop.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sound.SetLooped(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set loop on/off. If loop is enabled, sets the full sound as loop range.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sound.SetSize(System.UInt32)">
            <param name="dataSize"></param>
            <summary>
            Set sound size in bytes. Also resets the sound to be uncompressed and one-shot.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sound.Start">
            <summary>
            Return sound data start.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sound.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Sound.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Sound.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Sound.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SoundListener">
            <summary>
            %Sound listener component
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.SoundListener(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of SoundListener, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.SoundListener(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of SoundListener that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of SoundListener attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.SoundListener(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.SoundListener.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.SoundListener.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundListener.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.SoundListener.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SoundListener.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SoundListener.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SoundSource">
            <summary>
            %Sound source component with stereo position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.SoundSource(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of SoundSource, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.SoundSource(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of SoundSource that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of SoundSource attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.SoundSource(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.SoundSource.Attenuation">
            <summary>
            Return attenuation.
            Or
            Set attenuation. 1.0 is unaltered. Used for distance attenuated playback.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource.AutoRemove">
            <summary>
            Return autoremove mode.
            Or
            Set whether sound source will be automatically removed from the scene node when playback stops.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.SoundSource.Frequency">
            <summary>
            Return frequency.
            Or
            Set frequency.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource.Gain">
            <summary>
            Return gain.
            Or
            Set gain. 0.0 is silence, 1.0 is full volume.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.IsPlaying">
            <summary>
            Return whether is playing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.Mix(System.Int32*,System.UInt32,System.Int32,System.Boolean,System.Boolean)">
            <param name="dest"></param>
            <param name="samples"></param>
            <param name="mixRate"></param>
            <param name="stereo"></param>
            <param name="interpolation"></param>
            <summary>
            Mix sound source output to a 32-bit clipping buffer. Called by Audio.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource.Panning">
            <summary>
            Return stereo panning.
            Or
            Set stereo panning. -1.0 is full left and 1.0 is full right.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.Play(Urho.Sound)">
            <param name="sound"></param>
            <summary>
            Play a sound.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.Play(Urho.SoundStream)">
            <param name="stream"></param>
            <summary>
            Start playing a sound stream.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.Play(Urho.Sound,System.Single)">
            <param name="sound"></param>
            <param name="frequency"></param>
            <summary>
            Play a sound with specified frequency.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.Play(Urho.Sound,System.Single,System.Single)">
            <param name="sound"></param>
            <param name="frequency"></param>
            <param name="gain"></param>
            <summary>
            Play a sound with specified frequency and gain.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.Play(Urho.Sound,System.Single,System.Single,System.Single)">
            <param name="sound"></param>
            <param name="frequency"></param>
            <param name="gain"></param>
            <param name="panning"></param>
            <summary>
            Play a sound with specified frequency, gain and panning.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource.PlayPosition">
            <summary>
            Return playback position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource.PositionAttr">
            <summary>
            Return sound position attribute.
            Or
            Set sound position attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.SetPlayingAttr(System.Boolean)">
            <param name="value"></param>
            <summary>
            Set sound playing attribute
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.SetPlayPosition(System.SByte*)">
            <param name="pos"></param>
            <summary>
            Set new playback position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.SetSoundType(System.String)">
            <param name="type"></param>
            <summary>
            Set sound type, determines the master gain group.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource.Sound">
            <summary>
            Return sound.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource.SoundAttr">
            <summary>
            Return sound attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource.SoundType">
            <summary>
            Return sound type, determines the master gain group.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.Stop">
            <summary>
            Stop playback.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource.TimePosition">
            <summary>
            Return playback time position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.SoundSource.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SoundSource.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SoundSource.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Update the sound source. Perform subclass specific operations. Called by Audio.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource.UpdateMasterGain">
            <summary>
            Update the effective master gain. Called internally and by Audio when the master gain changes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SoundSource3D">
            <summary>
            %Sound source component with three-dimensional position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.SoundSource3D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of SoundSource3D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.SoundSource3D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of SoundSource3D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of SoundSource3D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.SoundSource3D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.SoundSource3D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.SoundSource3D.CalculateAttenuation">
            <summary>
            Calculate attenuation and panning based on current position and listener position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource3D.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource3D.FarDistance">
            <summary>
            Return far distance.
            Or
            Set far distance. Outside this range sound will be completely attenuated.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource3D.InnerAngle">
            <summary>
            Return inner angle in degrees.
            Or
            Set inner angle in degrees. Inside this angle sound will not be attenuated.By default 360, meaning direction never has an effect.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource3D.NearDistance">
            <summary>
            Return near distance.
            Or
            Set near distance. Inside this range sound will not be attenuated.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource3D.OuterAngle">
            <summary>
            Return outer angle in degrees.
            Or
            Set outer angle in degrees. Outside this angle sound will be completely attenuated. By default 360, meaning direction never has an effect.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource3D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource3D.RollAngleoffFactor">
            <summary>
            Return rolloff power factor.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource3D.SetAngleAttenuation(System.Single,System.Single)">
            <param name="innerAngle"></param>
            <param name="outerAngle"></param>
            <summary>
            Set angle attenuation parameters.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource3D.SetDistanceAttenuation(System.Single,System.Single,System.Single)">
            <param name="nearDistance"></param>
            <param name="farDistance"></param>
            <param name="rolloffFactor"></param>
            <summary>
            Set attenuation parameters.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource3D.SetRolloffFactor(System.Single)">
            <param name="factor"></param>
            <summary>
            Set rolloff power factor, defines attenuation function shape.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundSource3D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.SoundSource3D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SoundSource3D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SoundSource3D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundSource3D.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Update sound source.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SoundStream">
            <summary>
            Base class for sound streams.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.SoundStream(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of SoundStream, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.SoundStream(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.SoundStream.Frequency">
            <summary>
            Return default frequency as a float.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundStream.GetData(System.SByte*,System.UInt32)">
            <param name="dest"></param>
            <param name="numBytes"></param>
            <summary>
            Produce sound data into destination. Return number of bytes produced. Called by SoundSource from the mixing thread.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundStream.IntFrequency">
            <summary>
            Return default frequency as an integer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundStream.IsSixteenBit">
            <summary>
            Return whether data is sixteen bit.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundStream.IsStereo">
            <summary>
            Return whether data is stereo.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundStream.SampleSize">
            <summary>
            Return sample size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SoundStream.SetFormat(System.UInt32,System.Boolean,System.Boolean)">
            <param name="frequency"></param>
            <param name="sixteenBit"></param>
            <param name="stereo"></param>
            <summary>
            Set sound data format.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SoundStream.StopAtEnd">
            <summary>
            Return whether playback should stop when no more data.
            Or
            Set whether playback should stop when no more data. Default false.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SoundType">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.SoundType.Ambient">
            <summary></summary>
        </member>
        <member name="F:Urho.SoundType.Effect">
            <summary></summary>
        </member>
        <member name="F:Urho.SoundType.Master">
            <summary></summary>
        </member>
        <member name="F:Urho.SoundType.Music">
            <summary></summary>
        </member>
        <member name="F:Urho.SoundType.Voice">
            <summary></summary>
        </member>
        <member name="T:Urho.Spawn">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Spawn(Urho.FiniteTimeAction[])">
            <param name="actions"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Spawn(Urho.FiniteTimeAction,Urho.FiniteTimeAction)">
            <param name="action1"></param>
            <param name="action2"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Spawn.ActionOne">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Spawn.ActionTwo">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Spawn.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Spawn.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SpawnState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.SpawnState(Urho.Spawn,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SpawnState.ActionOne">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SpawnState.ActionTwo">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SpawnState.Stop">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SpawnState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Speed">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Speed(Urho.FiniteTimeAction,System.Single)">
            <param name="action"></param>
            <param name="speedValue"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Speed.InnerAction">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Speed.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Speed.SpeedValue">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Speed.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SplinePath">
            <summary>
            Spline for creating smooth movement based on Speed along a set of Control Points modified by the Interpolation Mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.SplinePath(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of SplinePath, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.SplinePath(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of SplinePath that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of SplinePath attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.SplinePath(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.SplinePath.AddControlPoint(Urho.Node,System.UInt32)">
            <param name="point"></param>
            <param name="index"></param>
            <summary>
            Add a Node to the SplinePath as a Control Point.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SplinePath.ApplyAttributes">
            <summary>
            Apply Attributes to the SplinePath.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SplinePath.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.SplinePath.ClearControlPoints">
            <summary>
            Clear the Control Points from the SplinePath.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SplinePath.ControlledIdAttr">
            <summary>
            Get Controlled Node ID attribute.
            Or
            Set Controlled Node ID attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SplinePath.ControlledNode">
            <summary>
            Get the controlled Node.
            Or
            Set the Node to be moved along the SplinePath.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SplinePath.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Draw the Debug Geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SplinePath.GetPoint(System.Single)">
            <param name="factor"></param>
            <summary>
            Get a point on the SplinePath from 0.f to 1.f where 0 is the start and 1 is the end.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SplinePath.InterpolationMode">
            <summary>
            Get the Interpolation Mode.
            Or
            Set the Interpolation Mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SplinePath.IsFinished">
            <summary>
            Returns whether the movement along the SplinePath is complete.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SplinePath.Length">
            <summary>
            Get the length of SplinePath;
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SplinePath.Move(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Move the controlled Node to the next position along the SplinePath based off the Speed value.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SplinePath.Position">
            <summary>
            Get the parent Node's last position on the spline.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SplinePath.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SplinePath.RemoveControlPoint(Urho.Node)">
            <param name="point"></param>
            <summary>
            Remove a Node Control Point from the SplinePath.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SplinePath.Reset">
            <summary>
            Reset movement along the path.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SplinePath.SetPosition(System.Single)">
            <param name="factor"></param>
            <summary>
            Set the controlled Node's position on the SplinePath.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SplinePath.Speed">
            <summary>
            Get the movement Speed.
            Or
            Set the movement Speed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SplinePath.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.SplinePath.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SplinePath.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SplinePath.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Sprite">
            <summary>
            %UI element which allows sub-pixel positioning and size, as well as rotation. Only other Sprites should be added as child elements.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Sprite(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Sprite, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Sprite(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Sprite that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Sprite attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Sprite(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Sprite.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Sprite.BlendMode">
            <summary>
            Return blend mode.
            Or
            Set blend mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite.HotSpot">
            <summary>
            Return hotspot.
            Or
            Set hotspot for positioning and rotation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite.ImageRect">
            <summary>
            Return image rectangle.
            Or
            Set part of texture to use as the image.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sprite.IsWithinScissor(Urho.IntRect)">
            <param name="currentScissor"></param>
            <summary>
            Return whether is visible and inside a scissor rectangle and should be rendered.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sprite.OnPositionSet">
            <summary>
            React to position change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite.PositionFloat">
            <summary>
            Return floating point position.
            Or
            Set floating point position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sprite.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite.Rotation">
            <summary>
            Return rotation angle.
            Or
            Set rotation angle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite.Scale">
            <summary>
            Return scale.
            Or
            Set scale. Scale also affects child sprites.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite.ScreenPosition">
            <summary>
            Update and return screen position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sprite.SetFullImageRect">
            <summary>
            Use whole texture as the image.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sprite.SetHotSpot(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set hotspot for positioning and rotation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sprite.SetPosition(System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set floating point position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sprite.SetScale(System.Single)">
            <param name="scale"></param>
            <summary>
            Set uniform scale. Scale also affects child sprites.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sprite.SetScale(System.Single,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set scale. Scale also affects child sprites.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite.Texture">
            <summary>
            Return texture.
            Or
            Set texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite.TextureAttr">
            <summary>
            Return texture attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Sprite.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Sprite.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Sprite.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Sprite2D">
            <summary>
            Sprite.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Sprite2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Sprite2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Sprite2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Sprite2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Sprite2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Sprite2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Sprite2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Sprite2D.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite2D.HotSpot">
            <summary>
            Return hot spot.
            Or
            Set hot spot.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite2D.Offset">
            <summary>
            Return offset.
            Or
            Set offset.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite2D.Rectangle">
            <summary>
            Return rectangle.
            Or
            Set rectangle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sprite2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Sprite2D.SaveToResourceRef(Urho.Sprite2D)">
            <param name="sprite"></param>
            <summary>
            Save sprite to ResourceRef.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite2D.SpriteSheet">
            <summary>
            Return sprite sheet.
            Or
            Set sprite sheet.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite2D.Texture">
            <summary>
            Return texture.
            Or
            Set texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Sprite2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Sprite2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Sprite2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Sprite2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.SpriteSheet2D">
            <summary>
            Sprite sheet.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.SpriteSheet2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of SpriteSheet2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.SpriteSheet2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of SpriteSheet2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of SpriteSheet2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.SpriteSheet2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.SpriteSheet2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.SpriteSheet2D.DefineSprite(System.String,Urho.IntRect,Urho.Vector2,Urho.IntVector2)">
            <param name="name"></param>
            <param name="rectangle"></param>
            <param name="hotSpot"></param>
            <param name="offset"></param>
            <summary>
            Define sprite.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SpriteSheet2D.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SpriteSheet2D.GetSprite(System.String)">
            <param name="name"></param>
            <summary>
            Return sprite.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.SpriteSheet2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SpriteSheet2D.Texture">
            <summary>
            Return texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.SpriteSheet2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.SpriteSheet2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SpriteSheet2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.SpriteSheet2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.StaticModel">
            <summary>
            Static model component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.StaticModel(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of StaticModel, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.StaticModel(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of StaticModel that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of StaticModel attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.StaticModel(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.StaticModel.ApplyMaterialList(System.String)">
            <param name="fileName"></param>
            <summary>
            Apply default materials from a material list file. If filename is empty (default), the model's resource name with extension .txt will be used.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticModel.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.StaticModel.DrawOcclusion(Urho.OcclusionBuffer)">
            <param name="buffer"></param>
            <summary>
            Draw to occlusion buffer. Return true if did not run out of triangles.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModel.GetLodGeometry(System.UInt32,System.UInt32)">
            <param name="batchIndex"></param>
            <param name="level"></param>
            <summary>
            Return the geometry for a specific LOD level.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModel.GetMaterial(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return material by geometry index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModel.IsInside(Urho.Vector3)">
            <param name="point"></param>
            <summary>
            Determines if the given world space point is within the model geometry.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModel.IsInsideLocal(Urho.Vector3)">
            <param name="point"></param>
            <summary>
            Determines if the given local space point is within the model geometry.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticModel.Model">
            <summary>
            Return model.
            Or
            Set model.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticModel.ModelAttr">
            <summary>
            Return model attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticModel.NumGeometries">
            <summary>
            Return number of geometries.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticModel.NumOccluderTriangles">
            <summary>
            Return number of occlusion geometry triangles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticModel.OcclusionLodLevel">
            <summary>
            Return occlusion LOD level.
            Or
            Set occlusion LOD level. By default (M_MAX_UNSIGNED) same as visible.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModel.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. Drawable must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModel.SetMaterial(Urho.Material)">
            <param name="material"></param>
            <summary>
            Set material on all geometries.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModel.SetMaterial(System.UInt32,Urho.Material)">
            <param name="index"></param>
            <param name="material"></param>
            <summary>
            Set material on one geometry. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticModel.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.StaticModel.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.StaticModel.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.StaticModel.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.StaticModelGroup">
            <summary>
            Renders several object instances while culling and receiving light as one unit. Can be used as a CPU-side optimization, but note that also regular StaticModels will use instanced rendering if possible.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.StaticModelGroup(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of StaticModelGroup, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.StaticModelGroup(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of StaticModelGroup that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of StaticModelGroup attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.StaticModelGroup(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.StaticModelGroup.AddInstanceNode(Urho.Node)">
            <param name="node"></param>
            <summary>
            Add an instance scene node. It does not need any drawable components of its own.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModelGroup.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticModelGroup.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.StaticModelGroup.DrawOcclusion(Urho.OcclusionBuffer)">
            <param name="buffer"></param>
            <summary>
            Draw to occlusion buffer. Return true if did not run out of triangles.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModelGroup.GetInstanceNode(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return instance node by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticModelGroup.NumInstanceNodes">
            <summary>
            Return number of instance nodes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticModelGroup.NumOccluderTriangles">
            <summary>
            Return number of occlusion geometry triangles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModelGroup.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. StaticModel must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModelGroup.RemoveAllInstanceNodes">
            <summary>
            Remove all instance scene nodes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticModelGroup.RemoveInstanceNode(Urho.Node)">
            <param name="node"></param>
            <summary>
            Remove an instance scene node.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticModelGroup.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.StaticModelGroup.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.StaticModelGroup.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.StaticModelGroup.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.StaticSprite2D">
            <summary>
            Static sprite component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.StaticSprite2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of StaticSprite2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.StaticSprite2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of StaticSprite2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of StaticSprite2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.StaticSprite2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.Alpha">
            <summary>
            Return alpha.
            Or
            Set alpha.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.BlendMode">
            <summary>
            Return blend mode.
            Or
            Set blend mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.Color">
            <summary>
            Return color.
            Or
            Set color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.CustomMaterial">
            <summary>
            Return custom material.
            Or
            Set custom material.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.CustomMaterialAttr">
            <summary>
            Return custom material attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.FlipX">
            <summary>
            Return flip X.
            Or
            Set flip X.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.FlipY">
            <summary>
            Return flip Y.
            Or
            Set flip Y.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.HotSpot">
            <summary>
            Return hot spot.
            Or
            Set hot spot.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticSprite2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. Drawable2D must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StaticSprite2D.SetFlip(System.Boolean,System.Boolean)">
            <param name="flipX"></param>
            <param name="flipY"></param>
            <summary>
            Set flip.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.Sprite">
            <summary>
            Return sprite.
            Or
            Set sprite.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.SpriteAttr">
            <summary>
            Return sprite attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.StaticSprite2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.StaticSprite2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.StaticSprite2D.UseHotSpot">
            <summary>
            Return use hot spot.
            Or
            Set use hot spot.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.StencilOp">
            <summary>
            Stencil operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.StencilOp.Decr">
            <summary></summary>
        </member>
        <member name="F:Urho.StencilOp.Incr">
            <summary></summary>
        </member>
        <member name="F:Urho.StencilOp.Keep">
            <summary></summary>
        </member>
        <member name="F:Urho.StencilOp.Ref">
            <summary></summary>
        </member>
        <member name="F:Urho.StencilOp.Zero">
            <summary></summary>
        </member>
        <member name="T:Urho.StringHash">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.StringHash(System.Int32)">
            <param name="code"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.StringHash(System.String)">
            <param name="str"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.StringHash.Code">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StringHash.ToString">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.StringHashRef">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.StringHashRef(System.IntPtr)">
            <param name="ptr"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.StringHashRef.op_Implicit(Urho.StringHashRef)~Urho.StringHash">
            <param name="r"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Subscription">
            <summary>Encapsulates the subscription to an event, the main use it to stop event delivery by unsubscribing.</summary>
            <remarks>Instances of Subscription are returned from the various Subscribe methods exposed by the UrhoObject class.   When you want to stop receiving notifications for a subscription, invoke the <see cref="M:Urho.Subscription.Unsubscribe" /> method.</remarks>
        </member>
        <member name="M:Urho.Subscription.Unsubscribe">
            <summary>Unsubscribes from receiving notifications.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:Urho.TargetedAction">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TargetedAction(Urho.Node,Urho.FiniteTimeAction)">
            <param name="target"></param>
            <param name="action"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TargetedAction.Action">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TargetedAction.ForcedTarget">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TargetedAction.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TargetedAction.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TargetedActionState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TargetedActionState(Urho.TargetedAction,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TargetedActionState.ActionState">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TargetedActionState.ForcedTarget">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TargetedActionState.Stop">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TargetedActionState.TargetedAction">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TargetedActionState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TargetPositionChangedEventArgs">
            <summary>Event arguments for the SmoothedTransform's TargetPositionChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TargetRotationChangedEventArgs">
            <summary>Event arguments for the SmoothedTransform's TargetRotationChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Technique">
            <summary>
            %Material technique. Consists of several passes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Technique(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Technique, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Technique(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Technique that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Technique attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Technique(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Technique.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Technique.CreatePass(System.String)">
            <param name="passName"></param>
            <summary>
            Create a new pass.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.GetPass(System.String)">
            <param name="passName"></param>
            <summary>
            Return a pass by name, or null if not found. This overload should not be called in time-critical rendering loops; use a pre-acquired pass index instead.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.GetPass(System.UInt32)">
            <param name="passIndex"></param>
            <summary>
            Return a pass, or null if not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.GetPassIndex(System.String)">
            <param name="passName"></param>
            <summary>
            Return a pass type index by name. Allocate new if not used yet.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.GetSupportedPass(System.String)">
            <param name="passName"></param>
            <summary>
            Return a supported pass by name. This overload should not be called in time-critical rendering loops; use a pre-acquired pass index instead.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.GetSupportedPass(System.UInt32)">
            <param name="passIndex"></param>
            <summary>
            Return a pass that is supported for rendering, or null if not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.HasPass(System.String)">
            <param name="passName"></param>
            <summary>
            Return whether has a pass by name. This overload should not be called in time-critical rendering loops; use a pre-acquired pass index instead.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.HasPass(System.UInt32)">
            <param name="passIndex"></param>
            <summary>
            Return whether has a pass.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.IsDesktop">
            <summary>
            Return whether requires desktop level hardware.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.IsSupported">
            <summary>
            Return whether technique is supported by the current hardware.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Technique.NumPasses">
            <summary>
            Return number of passes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.ReleaseShaders">
            <summary>
            Reset shader pointers in all passes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.RemovePass(System.String)">
            <param name="passName"></param>
            <summary>
            Remove a pass.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Technique.SetIsDesktop(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether requires desktop level hardware.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Technique.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Technique.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Technique.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Technique.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TemporaryChangedEventArgs">
            <summary>Event arguments for the Serializable's TemporaryChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TemporaryChangedEventArgs.Serializable">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Terrain">
            <summary>
            Heightmap terrain component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Terrain(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Terrain, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Terrain(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Terrain that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Terrain attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Terrain(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Terrain.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.ApplyHeightMap">
            <summary>
            Apply changes from the heightmap image.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Terrain.CastShadows">
            <summary>
            Return shadowcaster flag.
            Or
            Set shadowcaster flag for patches.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.CreatePatchGeometry(Urho.TerrainPatch)">
            <param name="patch"></param>
            <summary>
            Regenerate patch geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.DrawDistance">
            <summary>
            Return draw distance.
            Or
            Set draw distance for patches.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.GetHeight(Urho.Vector3)">
            <param name="worldPosition"></param>
            <summary>
            Return height at world coordinates.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.GetNormal(Urho.Vector3)">
            <param name="worldPosition"></param>
            <summary>
            Return normal at world coordinates.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.GetPatch(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return patch by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.GetPatch(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="z"></param>
            <summary>
            Return patch by patch coordinates.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.HeightMap">
            <summary>
            Return heightmap image.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.HeightMapAttr">
            <summary>
            Return heightmap attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.IsOccludee">
            <summary>
            Return occludee flag.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.IsOccluder">
            <summary>
            Return occluder flag.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.IsVisible">
            <summary>
            Return visible flag.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.LightMask">
            <summary>
            Return light mask.
            Or
            Set light mask for patches. Is and'ed with light's and zone's light mask to see if the object should be lit.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.LodBias">
            <summary>
            Return LOD bias.
            Or
            Set LOD bias for patches. Affects which terrain LOD to display.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.Material">
            <summary>
            Return material.
            Or
            Set material.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.MaterialAttr">
            <summary>
            Return material attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.MaxLights">
            <summary>
            Return maximum number of per-pixel lights.
            Or
            Set maximum number of per-pixel lights for patches. Default 0 is unlimited.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.MaxLodLevels">
            <summary>
            Return maximum number of LOD levels for terrain patches. This can be between 1-4.
            Or
            Set maximum number of LOD levels for terrain patches. This can be between 1-4.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.NumPatches">
            <summary>
            Return heightmap size in patches.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.NumVertices">
            <summary>
            Return heightmap size in vertices.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.OcclusionLodLevel">
            <summary>
            Return LOD level used for occlusion.
            Or
            Set LOD level used for terrain patch occlusion. By default (M_MAX_UNSIGNED) the coarsest. Since the LOD level used needs to be fixed, using finer LOD levels may result in false positive occlusion in cases where the actual rendered geometry is coarser, so use with caution.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.OnSetEnabled">
            <summary>
            Handle enabled/disabled state change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.PatchSize">
            <summary>
            Return patch quads per side.
            Or
            Set patch quads per side. Must be a power of two.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.SetHeightMap(Urho.Image)">
            <param name="image"></param>
            <summary>
            Set heightmap image. Dimensions should be a power of two + 1. Uses 8-bit grayscale, or optionally red as MSB and green as LSB for 16-bit accuracy. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.SetMaxLodLevelsAttr(System.UInt32)">
            <param name="value"></param>
            <summary>
            Set max LOD levels attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.SetOccludee(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set occludee flag for patches.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.SetOccluder(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set occlusion flag for patches. Occlusion uses the coarsest LOD by default.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.SetOcclusionLodLevelAttr(System.UInt32)">
            <param name="value"></param>
            <summary>
            Set occlusion LOD level attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.SetPatchSizeAttr(System.Int32)">
            <param name="value"></param>
            <summary>
            Set patch size attribute.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.ShadowDistance">
            <summary>
            Return shadow draw distance.
            Or
            Set shadow draw distance for patches.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.ShadowMask">
            <summary>
            Return shadow mask.
            Or
            Set shadow mask for patches. Is and'ed with light's light mask and zone's shadow mask to see if the object should be rendered to a shadow map.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.Smoothing">
            <summary>
            Return whether smoothing is in use.
            Or
            Set smoothing of heightmap.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.Spacing">
            <summary>
            Return vertex and height spacing.
            Or
            Set vertex (XZ) and height (Y) spacing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.SubscribeToTerrainCreated(System.Action{Urho.TerrainCreatedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the TerrainCreated event raised by the Terrain.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Terrain.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Terrain.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Terrain.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Terrain.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.UpdatePatchLod(Urho.TerrainPatch)">
            <param name="patch"></param>
            <summary>
            Update patch based on LOD and neighbor LOD.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.ViewMask">
            <summary>
            Return view mask.
            Or
            Set view mask for patches. Is and'ed with camera's view mask to see if the object should be rendered.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Terrain.WorldToHeightMap(Urho.Vector3)">
            <param name="worldPosition"></param>
            <summary>
            Convert world position to heightmap pixel position. Note that the internal height data representation is reversed vertically, but in the heightmap image north is at the top.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Terrain.ZoneMask">
            <summary>
            Return zone mask.
            Or
            Set zone mask for patches. Is and'ed with zone's zone mask to see if the object should belong to the zone.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TerrainCreatedEventArgs">
            <summary>Event arguments for the Terrain's TerrainCreated event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainCreatedEventArgs.Node">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TerrainPatch">
            <summary>
            Individually rendered part of a heightmap terrain.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TerrainPatch(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of TerrainPatch, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.TerrainPatch(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of TerrainPatch that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of TerrainPatch attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.TerrainPatch(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.TerrainPatch.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.TerrainPatch.Coordinates">
            <summary>
            Return patch coordinates.
            Or
            Set patch coordinates.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TerrainPatch.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TerrainPatch.DrawOcclusion(Urho.OcclusionBuffer)">
            <param name="buffer"></param>
            <summary>
            Draw to occlusion buffer. Return true if did not run out of triangles.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.EastPatch">
            <summary>
            Return east neighbor patch.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.Geometry">
            <summary>
            Return visible geometry.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TerrainPatch.GetLodGeometry(System.UInt32,System.UInt32)">
            <param name="batchIndex"></param>
            <param name="level"></param>
            <summary>
            Return the geometry for a specific LOD level.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.LodLevel">
            <summary>
            Return current LOD level.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.MaxLodGeometry">
            <summary>
            Return max LOD geometry. Used for decals.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.NorthPatch">
            <summary>
            Return north neighbor patch.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.NumOccluderTriangles">
            <summary>
            Return number of occlusion geometry triangles.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.OcclusionGeometry">
            <summary>
            Return geometry used for occlusion.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.Owner">
            <summary>
            Return owner terrain.
            Or
            Set owner terrain.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TerrainPatch.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TerrainPatch.ResetLod">
            <summary>
            Reset to LOD level 0.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TerrainPatch.SetBoundingBox(Urho.BoundingBox)">
            <param name="box"></param>
            <summary>
            Set local-space bounding box.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TerrainPatch.SetMaterial(Urho.Material)">
            <param name="material"></param>
            <summary>
            Set material.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TerrainPatch.SetNeighbors(Urho.TerrainPatch,Urho.TerrainPatch,Urho.TerrainPatch,Urho.TerrainPatch)">
            <param name="north"></param>
            <param name="south"></param>
            <param name="west"></param>
            <param name="east"></param>
            <summary>
            Set neighbor patches.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.SouthPatch">
            <summary>
            Return south neighbor patch.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.TerrainPatch.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.TerrainPatch.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.TerrainPatch.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.UpdateGeometryType">
            <summary>
            Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.VertexBuffer">
            <summary>
            Return vertex buffer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TerrainPatch.WestPatch">
            <summary>
            Return west neighbor patch.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Text">
            <summary>
            %Text %UI element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Text(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Text, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Text(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Text that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Text attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Text(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Text.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.AutoLocalizable">
            <summary>
            Return auto localizable mode.
            Or
            The text will be automatically translated. The text value used as string identifier.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Text.ClearSelection">
            <summary>
            Clear selection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.EffectColor">
            <summary>
            Return effect color.
            Or
            Set effect color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.EffectDepthBias">
            <summary>
            Return effect Z bias.
            Or
            Set text effect Z bias. Zero by default, adjusted only in 3D mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.Font">
            <summary>
            Return font.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.FontAttr">
            <summary>
            Return font attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.FontSize">
            <summary>
            Return font size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text.GetCharPosition(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return position of character by index relative to the text element origin.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text.GetCharSize(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return size of character by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text.GetRowWidth(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return width of row by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.HoverColor">
            <summary>
            Return hover background color.
            Or
            Set hover background color. Color with 0 alpha (default) disables.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.NumChars">
            <summary>
            Return number of characters.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.NumRows">
            <summary>
            Return number of rows.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text.OnIndentSet">
            <summary>
            React to indent change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text.OnResize">
            <summary>
            React to resize.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.RowHeight">
            <summary>
            Return row height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.RowSpacing">
            <summary>
            Return row spacing.
            Or
            Set row spacing, 1.0 for original font spacing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.SelectionColor">
            <summary>
            Return selection background color.
            Or
            Set selection background color. Color with 0 alpha (default) disables.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.SelectionLength">
            <summary>
            Return selection length.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.SelectionStart">
            <summary>
            Return selection start.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text.SetFont(System.String,System.Int32)">
            <param name="fontName"></param>
            <param name="size"></param>
            <summary>
            Set font and font size and use signed distance field.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text.SetFont(Urho.Font,System.Int32)">
            <param name="font"></param>
            <param name="size"></param>
            <summary>
            Set font and font size and use signed distance field.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text.SetSelection(System.UInt32,System.UInt32)">
            <param name="start"></param>
            <param name="length"></param>
            <summary>
            Set selection. When length is not provided, select until the text ends.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text.SetUsedInText3D(System.Boolean)">
            <param name="usedInText3D"></param>
            <summary>
            Set used in Text3D.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.TextAlignment">
            <summary>
            Return row alignment.
            Or
            Set row alignment.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.TextEffect">
            <summary>
            Return text effect.
            Or
            Set text effect.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Text.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Text.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Text.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.Value">
            <summary>
            Return text.
            Or
            Set text. Text is assumed to be either ASCII or UTF8-encoded.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text.Wordwrap">
            <summary>
            Return wordwrap mode.
            Or
            Set wordwrap. In wordwrap mode the text element will respect its current width. Otherwise it resizes itself freely.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Text3D">
            <summary>
            3D text component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Text3D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Text3D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Text3D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Text3D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Text3D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Text3D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Text3D.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Text3D.ColorAttr">
            <summary>
            Get color attribute. Uses just the top-left color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.EffectColor">
            <summary>
            Return effect color.
            Or
            Set effect color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.EffectDepthBias">
            <summary>
            Return effect depth bias.
            Or
            Set effect Z bias.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.FaceCameraMode">
            <summary>
            Return how the text rotates in relation to the camera.
            Or
            Set how the text should rotate in relation to the camera. Default is to not rotate (FC_NONE.)
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.Font">
            <summary>
            Return font.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.FontAttr">
            <summary>
            Return font attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.FontSize">
            <summary>
            Return font size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text3D.GetCharPosition(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return position of character by index relative to the text element origin.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text3D.GetCharSize(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return size of character by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text3D.GetColor(Urho.Corner)">
            <param name="corner"></param>
            <summary>
            Return corner color.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text3D.GetRowWidth(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return width of row by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.HorizontalAlignment">
            <summary>
            Return horizontal alignment.
            Or
            Set horizontal alignment.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.Material">
            <summary>
            Return material.
            Or
            Set material.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.MaterialAttr">
            <summary>
            Return material attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.NumChars">
            <summary>
            Return number of characters.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.NumRows">
            <summary>
            Return number of rows.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.Opacity">
            <summary>
            Return opacity.
            Or
            Set opacity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text3D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. Drawable must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.RowHeight">
            <summary>
            Return row height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.RowSpacing">
            <summary>
            Return row spacing.
            Or
            Set row spacing, 1.0 for original font spacing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text3D.SetAlignment(Urho.HorizontalAlignment,Urho.VerticalAlignment)">
            <param name="hAlign"></param>
            <param name="vAlign"></param>
            <summary>
            Set horizontal and vertical alignment.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text3D.SetColor(Urho.Color)">
            <param name="color"></param>
            <summary>
            Set color on all corners.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text3D.SetColor(Urho.Corner,Urho.Color)">
            <param name="corner"></param>
            <param name="color"></param>
            <summary>
            Set color on one corner.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text3D.SetFont(System.String,System.Int32)">
            <param name="fontName"></param>
            <param name="size"></param>
            <summary>
            Set font and font size and use signed distance field font. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Text3D.SetFont(Urho.Font,System.Int32)">
            <param name="font"></param>
            <param name="size"></param>
            <summary>
            Set font and font size and use signed distance field font. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.Text">
            <summary>
            Return text.
            Or
            Set text. Text is assumed to be either ASCII or UTF8-encoded.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.TextAlignment">
            <summary>
            Return row alignment.
            Or
            Set row alignment.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.TextEffect">
            <summary>
            Return text effect.
            Or
            Set text effect.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Text3D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Text3D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Text3D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.UpdateGeometryType">
            <summary>
            Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.VerticalAlignment">
            <summary>
            Return vertical alignment.
            Or
            Set vertical alignment.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.Width">
            <summary>
            Return text width.
            Or
            Set text width. Only has effect in word wrap mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Text3D.Wordwrap">
            <summary>
            Return wordwrap mode.
            Or
            Set wordwrap. In wordwrap mode the text element will respect its current width. Otherwise it resizes itself freely.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TextChangedEventArgs">
            <summary>Event arguments for the LineEdit's TextChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TextChangedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TextChangedEventArgs.Text">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TextEffect">
            <summary>
            Text effect.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TextEffect.None">
            <summary></summary>
        </member>
        <member name="F:Urho.TextEffect.Shadow">
            <summary></summary>
        </member>
        <member name="F:Urho.TextEffect.Stroke">
            <summary></summary>
        </member>
        <member name="T:Urho.TextFinishedEventArgs">
            <summary>Event arguments for the LineEdit's TextFinished event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TextFinishedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TextFinishedEventArgs.Text">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TextFinishedEventArgs.Value">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TextInputEventArgs">
            <summary>Event arguments for the Input's TextInput event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TextInputEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TextInputEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TextInputEventArgs.Text">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Texture">
            <summary>
            Base class for texture resources.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Texture(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Texture, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Texture(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Texture that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Texture attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Texture(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Texture.BackupTexture">
            <summary>
            Return backup texture.
            Or
            Set backup texture to use when rendering to this texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.BorderColor">
            <summary>
            Return border color.
            Or
            Set border color for border addressing mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.Components">
            <summary>
            Return number of image components required to receive pixel data from GetData(), or 0 for compressed images.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.Depth">
            <summary>
            Return height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.FilterMode">
            <summary>
            Return filtering mode.
            Or
            Set filtering mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.Format">
            <summary>
            Return texture format.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.GetAddressMode(Urho.TextureCoordinate)">
            <param name="coord"></param>
            <summary>
            Return addressing mode by texture coordinate.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.GetDataSize(System.Int32,System.Int32)">
            <param name="width"></param>
            <param name="height"></param>
            <summary>
            Return data size in bytes for a rectangular region.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.GetDataSize(System.Int32,System.Int32,System.Int32)">
            <param name="width"></param>
            <param name="height"></param>
            <param name="depth"></param>
            <summary>
            Return data size in bytes for a volume region.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.GetDataType(System.UInt32)">
            <param name="format"></param>
            <summary>
            Return the data type corresponding to an OpenGL internal format.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.GetExternalFormat(System.UInt32)">
            <param name="format"></param>
            <summary>
            Return the non-internal texture format corresponding to an OpenGL internal format.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.GetLevelDepth(System.UInt32)">
            <param name="level"></param>
            <summary>
            Return mip level depth, or 0 if level does not exist.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.GetLevelHeight(System.UInt32)">
            <param name="level"></param>
            <summary>
            Return mip level width, or 0 if level does not exist.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.GetLevelWidth(System.UInt32)">
            <param name="level"></param>
            <summary>
            Return mip level width, or 0 if level does not exist.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.GetMipsToSkip(System.Int32)">
            <param name="quality"></param>
            <summary>
            Return mip levels to skip on a quality setting when loading.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.GetRowDataSize(System.Int32)">
            <param name="width"></param>
            <summary>
            Return data size in bytes for a pixel or block row.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.GetSRGBFormat(System.UInt32)">
            <param name="format"></param>
            <summary>
            Return the corresponding SRGB texture format if supported. If not supported, return format unchanged.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.Height">
            <summary>
            Return height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.IsCompressed">
            <summary>
            Return whether the texture format is compressed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.Levels">
            <summary>
            Return number of mip levels.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.ParametersDirty">
            <summary>
            Return whether parameters are dirty.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.SetAddressMode(Urho.TextureCoordinate,Urho.TextureAddressMode)">
            <param name="coord"></param>
            <param name="address"></param>
            <summary>
            Set addressing mode by texture coordinate.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.SetMipsToSkip(System.Int32,System.Int32)">
            <param name="quality"></param>
            <param name="mips"></param>
            <summary>
            Set mip levels to skip on a quality setting when loading. Ensures higher quality levels do not skip more.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.SetNumLevels(System.UInt32)">
            <param name="levels"></param>
            <summary>
            Set number of requested mip levels. Needs to be called before setting size.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.SetParameters(Urho.XmlElement)">
            <param name="element"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.SetParameters(Urho.XmlFile)">
            <param name="xml"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.SetParametersDirty">
            <summary>
            Dirty the parameters.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.ShadowCompare">
            <summary>
            Return whether shadow compare is enabled.
            Or
            Set shadow compare mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.SRGB">
            <summary>
            Return whether is using sRGB sampling and writing.
            Or
            Set sRGB sampling and writing mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.Target">
            <summary>
            Return texture's OpenGL target.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture.UpdateParameters">
            <summary>
            Update changed parameters to OpenGL. Called by Graphics when binding the texture.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.Usage">
            <summary>
            Return texture usage type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture.Width">
            <summary>
            Return width.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Texture2D">
            <summary>
            2D texture resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Texture2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Texture2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Texture2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Texture2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Texture2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Texture2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Texture2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Texture2D.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture2D.GetData(System.UInt32,System.IntPtr)">
            <param name="level"></param>
            <param name="dest"></param>
            <summary>
            Get data from a mip level. The destination buffer must be big enough. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture2D.OnDeviceLost">
            <summary>
            Mark the GPU resource destroyed on context destruction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture2D.OnDeviceReset">
            <summary>
            Recreate the GPU resource and restore data if applicable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture2D.Release">
            <summary>
            Release the texture.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture2D.RenderSurface">
            <summary>
            Return render surface.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture2D.SetData(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <param name="level"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="data"></param>
            <summary>
            Set data either partially or fully on a mip level. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture2D.SetSize(System.Int32,System.Int32,System.UInt32,Urho.TextureUsage)">
            <param name="width"></param>
            <param name="height"></param>
            <param name="format"></param>
            <param name="usage"></param>
            <summary>
            Set size, format and usage. Zero size will follow application window size. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Texture2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Texture2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Texture2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Texture3D">
            <summary>
            3D texture resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Texture3D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Texture3D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Texture3D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Texture3D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Texture3D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Texture3D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Texture3D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Texture3D.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture3D.GetData(System.UInt32,System.IntPtr)">
            <param name="level"></param>
            <param name="dest"></param>
            <summary>
            Get data from a mip level. The destination buffer must be big enough. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture3D.OnDeviceLost">
            <summary>
            Mark the GPU resource destroyed on context destruction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture3D.OnDeviceReset">
            <summary>
            Recreate the GPU resource and restore data if applicable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture3D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture3D.Release">
            <summary>
            Release the texture.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture3D.RenderSurface">
            <summary>
            Return render surface.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture3D.SetData(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <param name="level"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="depth"></param>
            <param name="data"></param>
            <summary>
            Set data either partially or fully on a mip level. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Texture3D.SetSize(System.Int32,System.Int32,System.Int32,System.UInt32,Urho.TextureUsage)">
            <param name="width"></param>
            <param name="height"></param>
            <param name="depth"></param>
            <param name="format"></param>
            <param name="usage"></param>
            <summary>
            Set size, format and usage. Zero size will follow application window size. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Texture3D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Texture3D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Texture3D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Texture3D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TextureAddressMode">
            <summary>
            Texture addressing mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TextureAddressMode.Border">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureAddressMode.Clamp">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureAddressMode.MaxAddressmodes">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureAddressMode.Mirror">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureAddressMode.Wrap">
            <summary></summary>
        </member>
        <member name="T:Urho.TextureCoordinate">
            <summary>
            Texture coordinates.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TextureCoordinate.MaxCoords">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureCoordinate.U">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureCoordinate.V">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureCoordinate.W">
            <summary></summary>
        </member>
        <member name="T:Urho.TextureCube">
            <summary>
            Cube texture resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TextureCube(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of TextureCube, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.TextureCube(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of TextureCube that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of TextureCube attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.TextureCube(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.TextureCube.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.TextureCube.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TextureCube.GetData(Urho.CubeMapFace,System.UInt32,System.IntPtr)">
            <param name="face"></param>
            <param name="level"></param>
            <param name="dest"></param>
            <summary>
            Get data from a face's mip level. The destination buffer must be big enough. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TextureCube.GetRenderSurface(Urho.CubeMapFace)">
            <param name="face"></param>
            <summary>
            Return render surface for one face.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TextureCube.OnDeviceLost">
            <summary>
            Mark the GPU resource destroyed on context destruction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TextureCube.OnDeviceReset">
            <summary>
            Recreate the GPU resource and restore data if applicable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TextureCube.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TextureCube.Release">
            <summary>
            Release the texture.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TextureCube.SetData(Urho.CubeMapFace,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <param name="face"></param>
            <param name="level"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="data"></param>
            <summary>
            Set data either partially or fully on a face's mip level. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TextureCube.SetSize(System.Int32,System.UInt32,Urho.TextureUsage)">
            <param name="size"></param>
            <param name="format"></param>
            <param name="usage"></param>
            <summary>
            Set size, format and usage. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TextureCube.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.TextureCube.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.TextureCube.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.TextureCube.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TextureFilterMode">
            <summary>
            Texture filtering mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TextureFilterMode.Anisotropic">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureFilterMode.Bilinear">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureFilterMode.Default">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureFilterMode.MaxFiltermodes">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureFilterMode.Nearest">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureFilterMode.Trilinear">
            <summary></summary>
        </member>
        <member name="T:Urho.TextureFrame">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TextureUnit">
            <summary>
            Texture units.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TextureUnit.Albedobuffer">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Custom1">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Custom2">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Depthbuffer">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Diffuse">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Emissive">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Environment">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Faceselect">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Indirection">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Lightbuffer">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Lightramp">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Lightshape">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.MaxMaterialTextureUnits">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.MaxTextureUnits">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Normal">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Normalbuffer">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Shadowmap">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Specular">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Volumemap">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUnit.Zone">
            <summary></summary>
        </member>
        <member name="T:Urho.TextureUsage">
            <summary>
            Texture usage types.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TextureUsage.Depthstencil">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUsage.Dynamic">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUsage.Rendertarget">
            <summary></summary>
        </member>
        <member name="F:Urho.TextureUsage.Static">
            <summary></summary>
        </member>
        <member name="T:Urho.Tile2D">
            <summary>
            Tile define.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Tile2D">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Tile2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Tile2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Tile2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.Tile2D.GetProperty(System.String)">
            <param name="name"></param>
            <summary>
            Return property.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Tile2D.Gid">
            <summary>
            Return gid.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Tile2D.HasProperty(System.String)">
            <param name="name"></param>
            <summary>
            Return has property.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Tile2D.Sprite">
            <summary>
            Return sprite.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TileMap2D">
            <summary>
            Tile map component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TileMap2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of TileMap2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.TileMap2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of TileMap2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of TileMap2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.TileMap2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.TileMap2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.TileMap2D.DrawDebugGeometry">
            <summary>
            Add debug geometry to the debug renderer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMap2D.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMap2D.GetLayer(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return tile map layer at index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMap2D.Info">
            <summary>
            Return information.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMap2D.NumLayers">
            <summary>
            Return number of layers.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMap2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMap2D.TileIndexToPosition(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Convert tile index to position.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMap2D.TmxFile">
            <summary>
            Return tmx file.
            Or
            Set tmx file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMap2D.TmxFileAttr">
            <summary>
            Return tile map file attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMap2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.TileMap2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.TileMap2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.TileMap2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TileMapInfo2D">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TileMapInfo2D.Height">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapInfo2D.MapHeight">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapInfo2D.MapWidth">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TileMapInfo2D.Orientation">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TileMapInfo2D.TileHeight">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TileMapInfo2D.TileWidth">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TileMapInfo2D.Width">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TileMapLayer2D">
            <summary>
            Tile map component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TileMapLayer2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of TileMapLayer2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.TileMapLayer2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of TileMapLayer2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of TileMapLayer2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.TileMapLayer2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.TileMapLayer2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.TileMapLayer2D.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Add debug geometry to the debug renderer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapLayer2D.DrawOrder">
            <summary>
            Return draw order.
            Or
            Set draw order
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapLayer2D.GetObject(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return tile map object (for object group only).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapLayer2D.GetObjectNode(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return object node (for object group only).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapLayer2D.GetProperty(System.String)">
            <param name="name"></param>
            <summary>
            Return property.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapLayer2D.GetTile(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Return tile (for tile layer only).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapLayer2D.GetTileNode(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Return tile node (for tile layer only).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapLayer2D.HasProperty(System.String)">
            <param name="name"></param>
            <summary>
            Return has property
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapLayer2D.Height">
            <summary>
            Return height (for tile layer only).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapLayer2D.ImageNode">
            <summary>
            Return image node (for image layer only).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapLayer2D.Initialize(Urho.TileMap2D,Urho.TmxLayer2D)">
            <param name="tileMap"></param>
            <param name="tmxLayer"></param>
            <summary>
            Initialize with tile map and tmx layer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapLayer2D.IsVisible">
            <summary>
            Return visible.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapLayer2D.LayerType">
            <summary>
            Return layer type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapLayer2D.NumObjects">
            <summary>
            Return number of tile map objects (for object group only).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapLayer2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapLayer2D.SetVisible(System.Boolean)">
            <param name="visible"></param>
            <summary>
            Set visible.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapLayer2D.TileMap">
            <summary>
            Return tile map.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapLayer2D.TmxLayer">
            <summary>
            Return tmx layer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapLayer2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.TileMapLayer2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.TileMapLayer2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.TileMapLayer2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapLayer2D.Width">
            <summary>
            Return width (for tile layer only).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TileMapLayerType2D">
            <summary>
            Tile map layer type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TileMapLayerType2D.ImageLayer">
            <summary></summary>
        </member>
        <member name="F:Urho.TileMapLayerType2D.Invalid">
            <summary></summary>
        </member>
        <member name="F:Urho.TileMapLayerType2D.ObjectGroup">
            <summary></summary>
        </member>
        <member name="F:Urho.TileMapLayerType2D.TileLayer">
            <summary></summary>
        </member>
        <member name="T:Urho.TileMapObject2D">
            <summary>
            Tile map object.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TileMapObject2D">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TileMapObject2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of TileMapObject2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.TileMapObject2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.TileMapObject2D.GetPoint(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return point at index (use for script).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapObject2D.GetProperty(System.String)">
            <param name="name"></param>
            <summary>
            Return property value.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TileMapObject2D.HasProperty(System.String)">
            <param name="name"></param>
            <summary>
            Return has property.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapObject2D.Name">
            <summary>
            Return name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapObject2D.NumPoints">
            <summary>
            Return number of points (use for script).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapObject2D.ObjectType">
            <summary>
            Return type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapObject2D.Position">
            <summary>
            Return position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapObject2D.Size">
            <summary>
            Return size (for rectangle and ellipse).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapObject2D.TileGid">
            <summary>
            Return tile Gid.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapObject2D.TileSprite">
            <summary>
            Return tile sprite.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TileMapObject2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="T:Urho.TileMapObjectType2D">
            <summary>
            Tile map object type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TileMapObjectType2D.Ellipse">
            <summary></summary>
        </member>
        <member name="F:Urho.TileMapObjectType2D.Invalid">
            <summary></summary>
        </member>
        <member name="F:Urho.TileMapObjectType2D.Polygon">
            <summary></summary>
        </member>
        <member name="F:Urho.TileMapObjectType2D.Polyline">
            <summary></summary>
        </member>
        <member name="F:Urho.TileMapObjectType2D.Rectangle">
            <summary></summary>
        </member>
        <member name="F:Urho.TileMapObjectType2D.Tile">
            <summary></summary>
        </member>
        <member name="T:Urho.Time">
            <summary>
            %Time and frame counter subsystem.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Time(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Time, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Time(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Time that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Time attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Time(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Time.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Time.BeginFrame(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Begin new frame, with (last) frame duration in seconds and send frame start event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Time.ElapsedTime">
            <summary>
            Return elapsed time from program start as seconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Time.EndFrame">
            <summary>
            End frame. Increment total time and send frame end event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Time.FrameNumber">
            <summary>
            Return frame number, starting from 1 once BeginFrame() is called for the first time.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Time.Sleep(System.UInt32)">
            <param name="mSec"></param>
            <summary>
            Sleep for a number of milliseconds.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Time.SubscribeToBeginFrame(System.Action{Urho.BeginFrameEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the BeginFrame event raised by the Time.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.Time.SubscribeToEndFrame(System.Action{Urho.EndFrameEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the EndFrame event raised by the Time.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Time.SystemTime">
            <summary>
            Get system time as milliseconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Time.TimerPeriod">
            <summary>
            Return current low-resolution timer period in milliseconds.
            Or
            Set the low-resolution timer period in milliseconds. 0 resets to the default period.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Time.TimeSinceEpoch">
            <summary>
            Get system time as seconds since 1.1.1970.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Time.TimeStamp">
            <summary>
            Get a date/time stamp as a string.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Time.TimeStep">
            <summary>
            Return current frame timestep as seconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Time.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Time.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Time.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Time.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TintBy">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TintBy(System.Single,System.Single,System.Single,System.Single)">
            <param name="duration"></param>
            <param name="deltaRed"></param>
            <param name="deltaGreen"></param>
            <param name="deltaBlue"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintBy.DeltaB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintBy.DeltaG">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintBy.DeltaR">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TintBy.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TintBy.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TintByState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TintByState(Urho.TintBy,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintByState.DeltaB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintByState.DeltaG">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintByState.DeltaR">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintByState.FromB">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintByState.FromG">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintByState.FromR">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TintByState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TintTo">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TintTo(System.Single,System.Single,System.Single,System.Single)">
            <param name="duration"></param>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintTo.ColorTo">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TintTo.Reverse">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TintTo.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TintToState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TintToState(Urho.TintTo,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintToState.ColorFrom">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TintToState.ColorTo">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TintToState.Update(System.Single)">
            <param name="time"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TmxFile2D">
            <summary>
            Tile map file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TmxFile2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of TmxFile2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.TmxFile2D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of TmxFile2D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of TmxFile2D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.TmxFile2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.TmxFile2D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.TmxFile2D.EndLoad">
            <summary>
            Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TmxFile2D.GetLayer(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return layer at index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TmxFile2D.GetTilePropertySet(System.Int32)">
            <param name="gid"></param>
            <summary>
            Return tile property set by gid, if not exist return 0.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TmxFile2D.GetTileSprite(System.Int32)">
            <param name="gid"></param>
            <summary>
            Return tile sprite by gid, if not exist return 0.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TmxFile2D.Info">
            <summary>
            Return information.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TmxFile2D.NumLayers">
            <summary>
            Return number of layers.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TmxFile2D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TmxFile2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.TmxFile2D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.TmxFile2D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.TmxFile2D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TmxImageLayer2D">
            <summary>
            Tmx image layer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TmxImageLayer2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of TmxImageLayer2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.TmxImageLayer2D(Urho.TmxFile2D)">
            <param name="tmxFile"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TmxImageLayer2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.TmxImageLayer2D.Load(Urho.XmlElement,Urho.TileMapInfo2D)">
            <param name="element"></param>
            <param name="info"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TmxImageLayer2D.Position">
            <summary>
            Return position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TmxImageLayer2D.Source">
            <summary>
            Return source.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TmxImageLayer2D.Sprite">
            <summary>
            Return sprite.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TmxLayer2D">
            <summary>
            Tmx layer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TmxLayer2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of TmxLayer2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.TmxLayer2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.TmxLayer2D(Urho.TmxFile2D,Urho.TileMapLayerType2D)">
            <param name="tmxFile"></param>
            <param name="type"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TmxLayer2D.GetProperty(System.String)">
            <param name="name"></param>
            <summary>
            Return property value (use for script).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TmxLayer2D.HasProperty(System.String)">
            <param name="name"></param>
            <summary>
            Return has property (use for script).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TmxLayer2D.Height">
            <summary>
            Return height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TmxLayer2D.IsVisible">
            <summary>
            Return is visible.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TmxLayer2D.Name">
            <summary>
            Return name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TmxLayer2D.TmxFile">
            <summary>
            Return tmx file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TmxLayer2D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.TmxLayer2D.Width">
            <summary>
            Return width.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TmxObjectGroup2D">
            <summary>
            Tmx image layer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TmxObjectGroup2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of TmxObjectGroup2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.TmxObjectGroup2D(Urho.TmxFile2D)">
            <param name="tmxFile"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TmxObjectGroup2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.TmxObjectGroup2D.GetObject(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return tile map object at index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TmxObjectGroup2D.Load(Urho.XmlElement,Urho.TileMapInfo2D)">
            <param name="element"></param>
            <param name="info"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TmxObjectGroup2D.NumObjects">
            <summary>
            Return number of objects.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TmxTileLayer2D">
            <summary>
            Tmx tile layer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TmxTileLayer2D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of TmxTileLayer2D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.TmxTileLayer2D(Urho.TmxFile2D)">
            <param name="tmxFile"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.TmxTileLayer2D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.TmxTileLayer2D.GetTile(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Return tile.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TmxTileLayer2D.Load(Urho.XmlElement,Urho.TileMapInfo2D)">
            <param name="element"></param>
            <param name="info"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ToggledEventArgs">
            <summary>Event arguments for the CheckBox's Toggled event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ToggledEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ToggledEventArgs.State">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ToggleVisibility">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ToggleVisibility">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ToggleVisibility.StartAction(Urho.Node)">
            <param name="target"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ToggleVisibilityState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ToggleVisibilityState(Urho.ToggleVisibility,Urho.Node)">
            <param name="action"></param>
            <param name="target"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ToolTip">
            <summary>
            Tooltip %UI element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ToolTip(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ToolTip, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ToolTip(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ToolTip that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ToolTip attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ToolTip(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ToolTip.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ToolTip.Delay">
            <summary>
            Return the delay in seconds until the tooltip shows once hovering.
            Or
            Set the delay in seconds until the tooltip shows once hovering. Set zero to use the default from the UI subsystem.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ToolTip.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ToolTip.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ToolTip.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ToolTip.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ToolTip.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ToolTip.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Perform UI element update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TouchBeginEventArgs">
            <summary>Event arguments for the Input's TouchBegin event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchBeginEventArgs.Pressure">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchBeginEventArgs.TouchID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchBeginEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchBeginEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TouchEndEventArgs">
            <summary>Event arguments for the Input's TouchEnd event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchEndEventArgs.TouchID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchEndEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchEndEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TouchMoveEventArgs">
            <summary>Event arguments for the Input's TouchMove event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchMoveEventArgs.DX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchMoveEventArgs.DY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchMoveEventArgs.Pressure">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchMoveEventArgs.TouchID">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchMoveEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.TouchMoveEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TouchState">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TouchState.Delta">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TouchState.LastPosition">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TouchState.Position">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TouchState.Pressure">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.TouchState.TouchedElement">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TouchState.TouchID">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.TransformSpace">
            <summary>
            Transform space for translations and rotations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TransformSpace.Local">
            <summary></summary>
        </member>
        <member name="F:Urho.TransformSpace.Parent">
            <summary></summary>
        </member>
        <member name="F:Urho.TransformSpace.World">
            <summary></summary>
        </member>
        <member name="T:Urho.TraversalMode">
            <summary>
            Traversal mode for rendering.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.TraversalMode.BreadthFirst">
            <summary></summary>
        </member>
        <member name="F:Urho.TraversalMode.DepthFirst">
            <summary></summary>
        </member>
        <member name="T:Urho.UI">
            <summary>
            %UI subsystem. Manages the graphical user interface.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.UI(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of UI, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.UI(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of UI that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of UI attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.UI(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.UI.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.UI.Clear">
            <summary>
            Clear the UI (excluding the cursor.)
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.ClipboardText">
            <summary>
            Return clipboard text.
            Or
            Set clipboard text.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.Cursor">
            <summary>
            Return cursor.
            Or
            Set cursor UI element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.CursorPosition">
            <summary>
            Return cursor position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.DebugDraw(Urho.UIElement)">
            <param name="element"></param>
            <summary>
            Debug draw a UI element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.DefaultToolTipDelay">
            <summary>
            Return tooltip default display delay in seconds.
            Or
            Set tooltip default display delay in seconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.DoubleClickInterval">
            <summary>
            Return UI element double click interval in seconds.
            Or
            Set UI element double click interval in seconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.DragBeginDistance">
            <summary>
            Return UI drag start event distance threshold in pixels.
            Or
            Set UI drag event start distance threshold in pixels.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.DragBeginInterval">
            <summary>
            Return UI drag start event interval in seconds.
            Or
            Set UI drag event start interval in seconds.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.FocusElement">
            <summary>
            Return focused element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.ForceAutoHint">
            <summary>
            Return whether is using forced autohinting.
            Or
            Set whether to force font autohinting instead of using FreeType's TTF bytecode interpreter.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.FrontElement">
            <summary>
            Return topmost enabled root-level non-modal element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.GetDragElement(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return the drag element at index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.GetElementAt(Urho.IntVector2,System.Boolean)">
            <param name="position"></param>
            <param name="enabledOnly"></param>
            <summary>
            Return UI element at screen coordinates. By default returns only input-enabled elements.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.GetElementAt(System.Int32,System.Int32,System.Boolean)">
            <param name="x"></param>
            <param name="y"></param>
            <param name="enabledOnly"></param>
            <summary>
            Return UI element at screen coordinates. By default returns only input-enabled elements.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.HasModalElement">
            <summary>
            Return true when UI has modal element(s).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.IsDragging">
            <summary>
            Return whether a drag is in progress.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.IsNonFocusedMouseWheel">
            <summary>
            Return whether mouse wheel can control also a non-focused element.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.LoadLayout(Urho.XmlFile,Urho.XmlFile)">
            <param name="file"></param>
            <param name="styleFile"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.LoadLayoutToElement(Urho.UIElement,Urho.ResourceCache,System.String)">
            <param name="container"></param>
            <param name="cache"></param>
            <param name="name"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.MaxFontTextureSize">
            <summary>
            Return font texture maximum size.
            Or
            Set maximum font face texture size. Must be a power of two. Default is 2048.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.NumDragElements">
            <summary>
            Return the number of currently dragged elements.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.Render(System.Boolean)">
            <param name="resetRenderTargets"></param>
            <summary>
            Render the UI. If resetRenderTargets is true, is assumed to be the default UI render to backbuffer called by Engine, and will be performed only once. Additional UI renders to a different rendertarget may be triggered from the renderpath.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.RenderUpdate">
            <summary>
            Update the UI for rendering. Called by HandleRenderUpdate().
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.Root">
            <summary>
            Return root UI element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.RootModalElement">
            <summary>
            Return root modal element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.SetFocusElement(Urho.UIElement,System.Boolean)">
            <param name="element"></param>
            <param name="byKey"></param>
            <summary>
            Set focused UI element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.SetModalElement(Urho.UIElement,System.Boolean)">
            <param name="modalElement"></param>
            <param name="enable"></param>
            <summary>
            Set modal element. Until all the modal elements are dismissed, all the inputs and events are only sent to them. Return true when successful.
            Only the modal element can clear its modal status or when it is being destructed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.SetNonFocusedMouseWheel(System.Boolean)">
            <param name="nonFocusedMouseWheel"></param>
            <summary>
            Set whether mouse wheel can control also a non-focused element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.SubscribeToFocusChanged(System.Action{Urho.FocusChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the FocusChanged event raised by the UI.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UI.SubscribeToUIDropFile(System.Action{Urho.UIDropFileEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the UIDropFile event raised by the UI.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UI.SubscribeToUIMouseClick(System.Action{Urho.UIMouseClickEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the UIMouseClick event raised by the UI.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UI.SubscribeToUIMouseClickEnd(System.Action{Urho.UIMouseClickEndEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the UIMouseClickEnd event raised by the UI.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.UI.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.UI.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.UI.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.UI.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UI.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Update the UI logic. Called by HandlePostUpdate().
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.UseMutableGlyphs">
            <summary>
            Return whether is using mutable (eraseable) glyphs for fonts.
            Or
            Set whether to use mutable (eraseable) glyphs to ensure a font face never expands to more than one texture. Default false.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.UseScreenKeyboard">
            <summary>
            Return whether focusing a %LineEdit will show the on-screen keyboard.
            Or
            Set whether to show the on-screen keyboard (if supported) when a %LineEdit is focused. Default true on mobile devices.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UI.UseSystemClipboard">
            <summary>
            Return whether is using the system clipboard.
            Or
            Set whether to use system clipboard. Default false.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UIDropFileEventArgs">
            <summary>Event arguments for the UI's UIDropFile event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIDropFileEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIDropFileEventArgs.ElementX">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIDropFileEventArgs.ElementY">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIDropFileEventArgs.FileName">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIDropFileEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIDropFileEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UIElement">
            <summary>
            Base class for %UI elements.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.UIElement(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of UIElement, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.UIElement(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of UIElement that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of UIElement attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.UIElement(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.UIElement.AddChild(Urho.UIElement)">
            <param name="element"></param>
            <summary>
            Add a child element.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.AppliedStyle">
            <summary>
            Return applied style name. Return an empty string when the applied style is an 'auto' style (i.e. style derived from instance's type).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.ApplyAttributes">
            <summary>
            Apply attribute changes that can not be applied immediately.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.UIElement.BaseTypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.BringToBackOnFocus">
            <summary>
            Return whether should be put to background when another element is focused.
            Or
            Set whether should be put to background when another element is focused.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.BringToFront">
            <summary>
            Bring UI element to front.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.BringToFrontOnFocus">
            <summary>
            Return whether should be brought to front when focused.
            Or
            Set whether should be brought to front when focused.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.ChildOffset">
            <summary>
            Return child element offset.
            Or
            Set child offset.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Children">
            <summary>
            Return immediate child elements.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.ClipBorder">
            <summary>
            Return child element clipping border.
            Or
            Set child element clipping border.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.ClipChildren">
            <summary>
            Return whether should clip child elements.
            Or
            Set whether should clip child elements. Default false.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.ColorAttr">
            <summary>
            Return color attribute. Uses just the top-left color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.CombinedScreenRect">
            <summary>
            Return combined screen coordinate rect of element and its children.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateBorderImage(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateButton(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateCheckBox(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateChild(Urho.StringHash,System.String,System.UInt32)">
            <param name="type"></param>
            <param name="name"></param>
            <param name="index"></param>
            <summary>
            Create and add a child element and return it.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateChild``1(Urho.StringHash,System.String,System.UInt32)">
            <typeparam name="T"></typeparam>
            <param name="code"></param>
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateCursor(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateDropDownList(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateLineEdit(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateListView(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateMenu(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateScrollBar(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateScrollView(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateSlider(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateSprite(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateText(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateToolTip(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateView3D(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.CreateWindow(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="index"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.DerivedColor">
            <summary>
            Return derived color. Only valid when no gradient.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.DerivedOpacity">
            <summary>
            Return derived opacity (affected by parent elements.) If UseDerivedOpacity is false, returns same as element's own opacity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.DisableLayoutUpdate">
            <summary>
            Disable automatic layout update. Should only be used if there are performance problems.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.DragButtonCombo">
            <summary>
            Return the drag button combo if this element is being dragged.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.DragButtonCount">
            <summary>
            Return the number of buttons dragging this element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.DragDropMode">
            <summary>
            Return drag and drop flags.
            Or
            Set drag and drop flags.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.ElementEventSender">
            <summary>
            Get element which should send child added / removed events.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.ElementToScreen(Urho.IntVector2)">
            <param name="position"></param>
            <summary>
            Convert element coordinates to screen coordinates.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.EnableLayoutUpdate">
            <summary>
            Enable automatic layout update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.FilterAttributes(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.FindChild(Urho.UIElement)">
            <param name="element"></param>
            <summary>
            Find child index. Return M_MAX_UNSIGNED if not found.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.FocusMode">
            <summary>
            Return focus mode.
            Or
            Set focus mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.GetChild(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return child element by index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.GetChild(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="recursive"></param>
            <summary>
            Return child element by name.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.GetColor(Urho.Corner)">
            <param name="corner"></param>
            <summary>
            Return corner color.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.GetDefaultStyle(System.Boolean)">
            <param name="recursiveUp"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.GetNumChildren(System.Boolean)">
            <param name="recursive"></param>
            <summary>
            Return number of child elements.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.HasColorGradient">
            <summary>
            Return whether has different color in at least one corner.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.HasFocus">
            <summary>
            Return whether has focus.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Height">
            <summary>
            Return height.
            Or
            Set height only.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.HorizontalAlignment">
            <summary>
            Return horizontal alignment.
            Or
            Set horizontal alignment.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Indent">
            <summary>
            Return horizontal indentation.
            Or
            Set horizontal indentation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.IndentSpacing">
            <summary>
            Return indent spacing (number of pixels per indentation level).
            Or
            Set indent spacing (number of pixels per indentation level).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.IndentWidth">
            <summary>
            Return indent width in pixels.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.InsertChild(System.UInt32,Urho.UIElement)">
            <param name="index"></param>
            <param name="element"></param>
            <summary>
            Insert a child element into a specific position in the child list.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsEditable">
            <summary>
            Return whether value is editable through input.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsElementEventSender">
            <summary>
            Return whether element should send child added / removed events by itself. If false, defers to parent element.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsEnabled">
            <summary>
            Return whether reacts to input.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsEnabledSelf">
            <summary>
            Returns the element's last own enabled state. May be different than the value returned by IsEnabled when SetDeepEnabled has been used.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsFixedHeight">
            <summary>
            Return true if height is fixed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsFixedSize">
            <summary>
            Return true if size is fixed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsFixedWidth">
            <summary>
            Return true if width is fixed.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsHovering">
            <summary>
            Return whether the cursor is hovering on this element.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsInside(Urho.IntVector2,System.Boolean)">
            <param name="position"></param>
            <param name="isScreen"></param>
            <summary>
            Return whether a point (either in element or screen coordinates) is inside the element.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsInsideCombined(Urho.IntVector2,System.Boolean)">
            <param name="position"></param>
            <param name="isScreen"></param>
            <summary>
            Return whether a point (either in element or screen coordinates) is inside the combined rect of the element and its children.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsInternal">
            <summary>
            Return whether is internally created.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsSelected">
            <summary>
            Return whether is selected. Actual meaning is element dependent.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsVisible">
            <summary>
            Return whether element itself should be visible. Elements can be also hidden due to the parent being not visible, use IsVisibleEffective() to check.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsVisibleEffective">
            <summary>
            Return whether element is effectively visible (parent element chain is visible.)
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.IsWithinScissor(Urho.IntRect)">
            <param name="currentScissor"></param>
            <summary>
            Return whether is visible and inside a scissor rectangle and should be rendered.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.LayoutBorder">
            <summary>
            Return layout border.
            Or
            Set layout border.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.LayoutFlexScale">
            <summary>
            Return layout flex scale.
            Or
            Set layout flex scale.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.LayoutMaxSize">
            <summary>
            Return maximum layout element size in the layout direction. Only valid after layout has been calculated. Used internally by UI for optimizations.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.LayoutMinSize">
            <summary>
            Return minimum layout element size in the layout direction. Only valid after layout has been calculated. Used internally by UI for optimizations.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.LayoutMode">
            <summary>
            Return layout mode.
            Or
            Set layout mode only.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.LayoutSpacing">
            <summary>
            Return layout spacing.
            Or
            Set layout spacing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.LoadChildXml(Urho.XmlElement,Urho.XmlFile,System.Boolean)">
            <param name="childElem"></param>
            <param name="styleFile"></param>
            <param name="setInstanceDefault"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.LoadXml(Urho.XmlElement,System.Boolean)">
            <param name="source"></param>
            <param name="setInstanceDefault"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.LoadXml(Urho.XmlElement,Urho.XmlFile,System.Boolean)">
            <param name="source"></param>
            <param name="styleFile"></param>
            <param name="setInstanceDefault"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.MaxHeight">
            <summary>
            Return minimum height.
            Or
            Set maximum height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.MaxSize">
            <summary>
            Return maximum size.
            Or
            Set maximum size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.MaxWidth">
            <summary>
            Return minimum width.
            Or
            Set maximum width.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.MinHeight">
            <summary>
            Return minimum height.
            Or
            Set minimum height.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.MinSize">
            <summary>
            Return minimum size.
            Or
            Set minimum size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.MinWidth">
            <summary>
            Return minimum width.
            Or
            Set minimum width.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Name">
            <summary>
            Return name.
            Or
            Set name.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnClickBegin(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="button"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse click begin.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnClickEnd(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,System.Int32,Urho.Cursor,Urho.UIElement)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="button"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <param name="beginElement"></param>
            <summary>
            React to mouse click end.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnDoubleClick(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="button"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to double mouse click.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnDragBegin(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag begin.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnDragCancel(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="dragButtons"></param>
            <param name="cancelButton"></param>
            <param name="cursor"></param>
            <summary>
            React to a mouse drag cancel event (ie, when an extra button is pressed)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnDragDropFinish(Urho.UIElement)">
            <param name="source"></param>
            <summary>
            React to drag and drop finish. Return true to signal that the drop was accepted.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnDragDropTest(Urho.UIElement)">
            <param name="source"></param>
            <summary>
            React to drag and drop test. Return true to signal that the drop is acceptable.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnDragEnd(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="dragButtons"></param>
            <param name="releaseButton"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag end.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnDragMove(Urho.IntVector2,Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="deltaPos"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag motion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnHover(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse hover.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnIndentSet">
            <summary>
            React to indent change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnKey(System.Int32,System.Int32,System.Int32)">
            <param name="key"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <summary>
            React to a key press.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnPositionSet">
            <summary>
            React to position change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnResize">
            <summary>
            React to resize.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnSetEditable">
            <summary>
            React to editable status change.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnTextInput(System.String,System.Int32,System.Int32)">
            <param name="text"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <summary>
            React to text input event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.OnWheel(System.Int32,System.Int32,System.Int32)">
            <param name="delta"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <summary>
            React to mouse wheel.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Opacity">
            <summary>
            Return opacity.
            Or
            Set opacity.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Parent">
            <summary>
            Return parent element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Position">
            <summary>
            Return position.
            Or
            Set position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Priority">
            <summary>
            Return priority.
            Or
            Set priority.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.Remove">
            <summary>
            Remove from the parent element. If no other shared pointer references exist, causes immediate deletion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.RemoveAllChildren">
            <summary>
            Remove all child elements.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.RemoveChild(Urho.UIElement,System.UInt32)">
            <param name="element"></param>
            <param name="index"></param>
            <summary>
            Remove a child element. Starting search at specified index if provided.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.RemoveChildAtIndex(System.UInt32)">
            <param name="index"></param>
            <summary>
            Remove a child element at index.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.ResetDeepEnabled">
            <summary>
            Reset enabled state to the element's remembered state prior to calling SetDeepEnabled.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Root">
            <summary>
            Return root element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SaveXml(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.ScreenPosition">
            <summary>
            Update and return screen position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.ScreenToElement(Urho.IntVector2)">
            <param name="screenPosition"></param>
            <summary>
            Convert screen coordinates to element coordinates.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetAlignment(Urho.HorizontalAlignment,Urho.VerticalAlignment)">
            <param name="hAlign"></param>
            <param name="vAlign"></param>
            <summary>
            Set horizontal and vertical alignment.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetColor(Urho.Color)">
            <param name="color"></param>
            <summary>
            Set color on all corners.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetColor(Urho.Corner,Urho.Color)">
            <param name="corner"></param>
            <param name="color"></param>
            <summary>
            Set color on one corner.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetDeepEnabled(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set enabled state on self and child elements. Elements' own enabled state is remembered (IsEnabledSelf) and can be restored.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetDefaultStyle(Urho.XmlFile)">
            <param name="style"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetEditable(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether value is editable through input. Not applicable to all elements. Default true.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetElementEventSender(System.Boolean)">
            <param name="flag"></param>
            <summary>
            Set element event sender flag. When child element is added or deleted, the event would be sent using UIElement found in the parental chain having this flag set. If not set, the event is sent using UI's root as per normal.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetEnabled(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether reacts to input. Default false, but is enabled by subclasses if applicable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetEnabledRecursive(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set enabled state on self and child elements. Unlike SetDeepEnabled this does not remember the elements' own enabled state, but overwrites it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetFixedHeight(System.Int32)">
            <param name="height"></param>
            <summary>
            Set fixed height.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetFixedSize(Urho.IntVector2)">
            <param name="size"></param>
            <summary>
            Set fixed size.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetFixedSize(System.Int32,System.Int32)">
            <param name="width"></param>
            <param name="height"></param>
            <summary>
            Set fixed size.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetFixedWidth(System.Int32)">
            <param name="width"></param>
            <summary>
            Set fixed width.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetFocus(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether is focused. Only one element can be focused at a time.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetHovering(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set hovering state.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetInternal(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Mark as internally (programmatically) created. Used when an element composes itself out of child elements.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetLayout(Urho.LayoutMode,System.Int32,Urho.IntRect)">
            <param name="mode"></param>
            <param name="spacing"></param>
            <param name="border"></param>
            <summary>
            Set layout.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetMaxSize(System.Int32,System.Int32)">
            <param name="width"></param>
            <param name="height"></param>
            <summary>
            Set maximum size.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetMinSize(System.Int32,System.Int32)">
            <param name="width"></param>
            <param name="height"></param>
            <summary>
            Set minimum size.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetParent(Urho.UIElement,System.UInt32)">
            <param name="parent"></param>
            <param name="index"></param>
            <summary>
            Set parent element. Same as parent-&gt;InsertChild(index, this).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetPosition(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Set position.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetSelected(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set selected mode. Actual meaning is element dependent, for example constant hover or pressed effect.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetSize(System.Int32,System.Int32)">
            <param name="width"></param>
            <param name="height"></param>
            <summary>
            Set size.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetStyle(Urho.XmlElement)">
            <param name="element"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetStyle(System.String,Urho.XmlFile)">
            <param name="styleName"></param>
            <param name="file"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetStyleAuto(Urho.XmlFile)">
            <param name="file"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetVar(Urho.StringHash,System.Int32)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetVar(Urho.StringHash,System.Single)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetVar(Urho.StringHash,System.String)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetVar(Urho.StringHash,Urho.Color)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetVar(Urho.StringHash,Urho.IntRect)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetVar(Urho.StringHash,Urho.IntVector2)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetVar(Urho.StringHash,Urho.Quaternion)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetVar(Urho.StringHash,Urho.Vector2)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetVar(Urho.StringHash,Urho.Vector3)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetVar(Urho.StringHash,Urho.Vector4)">
            <param name="key"></param>
            <param name="value"></param>
            <summary>
            Set a user variable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SetVisible(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether is visible. Visibility propagates to child elements.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.ShouldSortChildren">
            <summary>
            Return whether should sort child elements according to priority.
            Or
            Set whether should sort child elements according to priority. Default true.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Size">
            <summary>
            Return size.
            Or
            Set size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SortChildren">
            <summary>
            Sort child elements if sorting enabled and order dirty. Called by UI.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.SubscribeToDefocused(System.Action{Urho.DefocusedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the Defocused event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToDragBegin(System.Action{Urho.DragBeginEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the DragBegin event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToDragCancel(System.Action{Urho.DragCancelEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the DragCancel event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToDragDropFinish(System.Action{Urho.DragDropFinishEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the DragDropFinish event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToDragDropTest(System.Action{Urho.DragDropTestEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the DragDropTest event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToDragEnd(System.Action{Urho.DragEndEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the DragEnd event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToDragMove(System.Action{Urho.DragMoveEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the DragMove event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToElementAdded(System.Action{Urho.ElementAddedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ElementAdded event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToElementRemoved(System.Action{Urho.ElementRemovedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ElementRemoved event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToFocused(System.Action{Urho.FocusedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the Focused event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToHoverBegin(System.Action{Urho.HoverBeginEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the HoverBegin event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToHoverEnd(System.Action{Urho.HoverEndEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the HoverEnd event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToLayoutUpdated(System.Action{Urho.LayoutUpdatedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the LayoutUpdated event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToNameChanged(System.Action{Urho.NameChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the NameChanged event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToPositioned(System.Action{Urho.PositionedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the Positioned event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToResized(System.Action{Urho.ResizedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the Resized event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UIElement.SubscribeToVisibleChanged(System.Action{Urho.VisibleChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the VisibleChanged event raised by the UIElement.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.UIElement.TraversalMode">
            <summary>
            Return traversal mode for rendering.
            Or
            Set traversal mode for rendering. The default traversal mode is TM_BREADTH_FIRST for non-root element. Root element should be set to TM_DEPTH_FIRST to avoid artifacts during rendering.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.UIElement.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.UIElement.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.UIElement.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Perform UI element update.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UIElement.UpdateLayout">
            <summary>
            Manually update layout. Should not be necessary in most cases, but is provided for completeness.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.UseDerivedOpacity">
            <summary>
            Return whether parent elements' opacity affects opacity.
            Or
            Set whether parent elements' opacity affects opacity. Default true.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.VerticalAlignment">
            <summary>
            Return vertical alignment.
            Or
            Set vertical alignment.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIElement.Width">
            <summary>
            Return width.
            Or
            Set width only.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UIMouseClickEndEventArgs">
            <summary>Event arguments for the UI's UIMouseClickEnd event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEndEventArgs.BeginElement">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEndEventArgs.Button">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEndEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEndEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEndEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEndEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEndEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UIMouseClickEventArgs">
            <summary>Event arguments for the UI's UIMouseClick event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEventArgs.Button">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseClickEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UIMouseDoubleClickEventArgs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseDoubleClickEventArgs.Button">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseDoubleClickEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseDoubleClickEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseDoubleClickEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseDoubleClickEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UIMouseDoubleClickEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UnhandledKeyEventArgs">
            <summary>Event arguments for the LineEdit's UnhandledKey event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UnhandledKeyEventArgs.Buttons">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UnhandledKeyEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UnhandledKeyEventArgs.Key">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UnhandledKeyEventArgs.Qualifiers">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UnknownComponent">
            <summary>
            Placeholder for allowing unregistered components to be loaded
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.UnknownComponent(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of UnknownComponent, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.UnknownComponent(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of UnknownComponent that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of UnknownComponent attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.UnknownComponent(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="M:Urho.UnknownComponent.LoadXml(Urho.XmlElement,System.Boolean)">
            <param name="source"></param>
            <param name="setInstanceDefault"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UnknownComponent.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UnknownComponent.SaveXml(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UnknownComponent.SetType(Urho.StringHash)">
            <param name="typeHash"></param>
            <summary>
            Initialize the type hash only when type name not known. Called by Node when loading.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UnknownComponent.SetTypeName(System.String)">
            <param name="typeName"></param>
            <summary>
            Initialize the type name. Called by Node when loading.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UnknownComponent.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.UnknownComponent.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.UnknownComponent.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.UnknownComponent.TypeStatic">
            <summary>
            Return static type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UnknownComponent.UseXML">
            <summary>
            Return whether was loaded using XML data.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UnknownResourceTypeEventArgs">
            <summary>Event arguments for the ResourceCache's UnknownResourceType event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UnknownResourceTypeEventArgs.ResourceType">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UpdateEventArgs">
            <summary>Event arguments for the Engine's Update event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UpdateEventArgs.TimeStep">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UpdateGeometryType">
            <summary>
            Geometry update type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.UpdateGeometryType.MainThread">
            <summary></summary>
        </member>
        <member name="F:Urho.UpdateGeometryType.None">
            <summary></summary>
        </member>
        <member name="F:Urho.UpdateGeometryType.WorkerThread">
            <summary></summary>
        </member>
        <member name="T:Urho.UpdateSmoothingEventArgs">
            <summary>Event arguments for the Scene's UpdateSmoothing event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UpdateSmoothingEventArgs.Constant">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UpdateSmoothingEventArgs.SquaredSnapThreshold">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UrhoConsole">
            <summary>
            %Console window with log history and command line prompt.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.UrhoConsole(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of UrhoConsole, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.UrhoConsole(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of UrhoConsole that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of UrhoConsole attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.UrhoConsole(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.UrhoConsole.Background">
            <summary>
            Return the background element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoConsole.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.UrhoConsole.CloseButton">
            <summary>
            Return the close butoon element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoConsole.CommandInterpreter">
            <summary>
            Return the last used command interpreter.
            Or
            Set the command interpreter.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoConsole.CopySelectedRows">
            <summary>
            Copy selected rows to system clipboard.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoConsole.DefaultStyle">
            <summary>
            Return the UI style file.
            Or
            Set UI elements' style from an XML file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoConsole.FocusOnShow">
            <summary>
            Return whether automatically focuses the line edit when showing.
            Or
            Set whether to automatically focus the line edit when showing. Default true on desktops and false on mobile devices, as on mobiles it would pop up the screen keyboard.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoConsole.GetConsoleInput">
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoConsole.GetHistoryRow(System.UInt32)">
            <param name="index"></param>
            <summary>
            Return history row at index.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoConsole.HistoryPosition">
            <summary>
            Return current history position.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoConsole.IsAutoVisibleOnError">
            <summary>
            Return true when console is set to automatically visible when receiving an error log message.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoConsole.IsVisible">
            <summary>
            Return whether is visible.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoConsole.LineEdit">
            <summary>
            Return the line edit element.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoConsole.NumBufferedRows">
            <summary>
            Return number of buffered rows.
            Or
            Set number of buffered rows.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoConsole.NumHistoryRows">
            <summary>
            Return history maximum size.
            Or
            Set command history maximum size, 0 disables history.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoConsole.NumRows">
            <summary>
            Return number of displayed rows.
            Or
            Set number of displayed rows.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoConsole.OpenConsoleWindow">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoConsole.SetAutoVisibleOnError(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Automatically set console to visible when receiving an error log message.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoConsole.SetVisible(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Show or hide.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoConsole.SubscribeToConsoleCommand(System.Action{Urho.ConsoleCommandEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ConsoleCommand event raised by the UrhoConsole.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.UrhoConsole.Toggle">
            <summary>
            Toggle visibility.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoConsole.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.UrhoConsole.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.UrhoConsole.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.UrhoConsole.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoConsole.UpdateElements">
            <summary>
            Update elements to layout properly. Call this after manually adjusting the sub-elements.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UrhoObject">
            <summary>
            Base class for objects with type identification, subsystem access and event sending/receiving capability.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.UrhoObject(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of UrhoObject, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.UrhoObject(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.UrhoObject.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.UrhoObject.BaseTypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoObject.Category">
            <summary>
            Return object category. Categories are (optionally) registered along with the object factory. Return an empty string if the object category is not registered.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoObject.Context">
            <summary>
            Return execution context.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoObject.EventHandler">
            <summary>
            Return active event handler. Null outside event handling.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoObject.EventSender">
            <summary>
            Return active event sender. Null outside event handling.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoObject.GetSubsystem(Urho.StringHash)">
            <param name="type"></param>
            <summary>
            Return subsystem by type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoObject.HasEventHandlers">
            <summary>
            Return whether has subscribed to any event.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoObject.HasSubscribedToEvent(Urho.StringHash)">
            <param name="eventType"></param>
            <summary>
            Return whether has subscribed to an event without specific sender.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoObject.HasSubscribedToEvent(Urho.UrhoObject,Urho.StringHash)">
            <param name="sender"></param>
            <param name="eventType"></param>
            <summary>
            Return whether has subscribed to a specific sender's event.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoObject.SendEvent(Urho.StringHash)">
            <param name="eventType"></param>
            <summary>
            Send event to all subscribers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoObject.SubscribeToEvent(Urho.StringHash,System.IntPtr)">
            <param name="eventType"></param>
            <param name="handler"></param>
            <summary>
            Subscribe to an event that can be sent by any sender.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoObject.SubscribeToEvent(Urho.UrhoObject,Urho.StringHash,System.IntPtr)">
            <param name="sender"></param>
            <param name="eventType"></param>
            <param name="handler"></param>
            <summary>
            Subscribe to a specific sender's event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.UrhoObject.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.UrhoObject.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="M:Urho.UrhoObject.UnsubscribeFromAllEvents">
            <summary>
            Unsubscribe from all events.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoObject.UnsubscribeFromEvent(Urho.StringHash)">
            <param name="eventType"></param>
            <summary>
            Unsubscribe from an event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoObject.UnsubscribeFromEvent(Urho.UrhoObject,Urho.StringHash)">
            <param name="sender"></param>
            <param name="eventType"></param>
            <summary>
            Unsubscribe from a specific sender's event.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.UrhoObject.UnsubscribeFromEvents(Urho.UrhoObject)">
            <param name="sender"></param>
            <summary>
            Unsubscribe from a specific sender's events.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.UrhoObjectFlag">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.UrhoObjectFlag.Empty">
            <summary></summary>
        </member>
        <member name="T:Urho.UrhoString">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.UrhoString.Buffer">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.UrhoString.Capacity">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.UrhoString.Length">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ValueAnimation">
            <summary>
            Value animation class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ValueAnimation(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ValueAnimation, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ValueAnimation(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of ValueAnimation that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of ValueAnimation attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.ValueAnimation(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.ValueAnimation.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ValueAnimation.BeginTime">
            <summary>
            Return begin time.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ValueAnimation.EndTime">
            <summary>
            Return end time.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.GetAnimationValue(System.Single)">
            <param name="scaledTime"></param>
            <summary>
            Return animation value.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.HasEventFrames">
            <summary>
            Has event frames.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ValueAnimation.InterpolationMethod">
            <summary>
            Return interpolation method.
            Or
            Set interpolation method.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.IsValid">
            <summary>
            Return animation is valid.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.LoadXml(Urho.XmlElement)">
            <param name="source"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ValueAnimation.Owner">
            <summary>
            Return owner.
            Or
            Set owner.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.SaveXml(Urho.XmlElement)">
            <param name="dest"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.SetKeyFrame(System.Single,System.Int32)">
            <param name="time"></param>
            <param name="value"></param>
            <summary>
            Set key frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.SetKeyFrame(System.Single,System.Single)">
            <param name="time"></param>
            <param name="value"></param>
            <summary>
            Set key frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.SetKeyFrame(System.Single,System.String)">
            <param name="time"></param>
            <param name="value"></param>
            <summary>
            Set key frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.SetKeyFrame(System.Single,Urho.Color)">
            <param name="time"></param>
            <param name="value"></param>
            <summary>
            Set key frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.SetKeyFrame(System.Single,Urho.IntRect)">
            <param name="time"></param>
            <param name="value"></param>
            <summary>
            Set key frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.SetKeyFrame(System.Single,Urho.IntVector2)">
            <param name="time"></param>
            <param name="value"></param>
            <summary>
            Set key frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.SetKeyFrame(System.Single,Urho.Quaternion)">
            <param name="time"></param>
            <param name="value"></param>
            <summary>
            Set key frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.SetKeyFrame(System.Single,Urho.Vector2)">
            <param name="time"></param>
            <param name="value"></param>
            <summary>
            Set key frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.SetKeyFrame(System.Single,Urho.Vector3)">
            <param name="time"></param>
            <param name="value"></param>
            <summary>
            Set key frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimation.SetKeyFrame(System.Single,Urho.Vector4)">
            <param name="time"></param>
            <param name="value"></param>
            <summary>
            Set key frame.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ValueAnimation.SplineTension">
            <summary>
            Return spline tension.
            Or
            Set spline tension, should be between 0.0f and 1.0f, but this is not a must.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ValueAnimation.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.ValueAnimation.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ValueAnimation.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.ValueAnimation.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ValueAnimation.ValueType">
            <summary>
            Return value type.
            Or
            Set value type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ValueAnimationInfo">
            <summary>
            Base class for a value animation instance, which includes animation runtime information and updates the target object's value automatically.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ValueAnimationInfo(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of ValueAnimationInfo, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.ValueAnimationInfo(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.ValueAnimationInfo(Urho.ValueAnimation,Urho.WrapMode,System.Single)">
            <param name="animation"></param>
            <param name="wrapMode"></param>
            <param name="speed"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.ValueAnimationInfo(Urho.UrhoObject,Urho.ValueAnimation,Urho.WrapMode,System.Single)">
            <param name="target"></param>
            <param name="animation"></param>
            <param name="wrapMode"></param>
            <param name="speed"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ValueAnimationInfo.Animation">
            <summary>
            Return animation.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ValueAnimationInfo.Speed">
            <summary>
            Return speed.
            Or
            Set speed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ValueAnimationInfo.Target">
            <summary>
            Return target object.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.ValueAnimationInfo.Update(System.Single)">
            <param name="timeStep"></param>
            <summary>
            Update. Return true when the animation is finished. No-op when the target object is not defined.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ValueAnimationInfo.WrapMode">
            <summary>
            Return wrap mode.
            Or
            Set wrap mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Variant">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.VariantType">
            <summary>
            Variant's supported types.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.VariantType.Bool">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Buffer">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Color">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Double">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Float">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Int">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Intrect">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Intvector2">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Matrix3">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Matrix3x4">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Matrix4">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.MaxVarTypes">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.None">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Ptr">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Quaternion">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Resourceref">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Resourcereflist">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.String">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Stringvector">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Variantmap">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Variantvector">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Vector2">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Vector3">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Vector4">
            <summary></summary>
        </member>
        <member name="F:Urho.VariantType.Voidptr">
            <summary></summary>
        </member>
        <member name="T:Urho.Vector2">
            <summary>Represents a 2D vector using two single-precision floating-point numbers.</summary>
            <remarks>
            The Vector2 structure is suitable for interoperation with unmanaged code requiring two consecutive floats.
            </remarks>
        </member>
        <member name="C:Urho.Vector2(Urho.Vector2)">
            <param name="v">The Vector2 to copy components from.</param>
            <summary>
            Constructs a new Vector2 from the given Vector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Vector2(Urho.Vector3)">
            <param name="v">The Vector3 to copy components from. Z is discarded.</param>
            <summary>
            Constructs a new Vector2 from the given Vector3.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Vector2(Urho.Vector4)">
            <param name="v">The Vector4 to copy components from. Z and W are discarded.</param>
            <summary>
            Constructs a new Vector2 from the given Vector4.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Vector2(System.Single,System.Single)">
            <param name="x">The x coordinate of the net Vector2.</param>
            <param name="y">The y coordinate of the net Vector2.</param>
            <summary>
            Constructs a new Vector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Add(Urho.Vector2)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Add(Urho.Vector2@)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Add(Urho.Vector2,Urho.Vector2)">
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <summary>
            Adds two vectors.
            </summary>
            <returns>Result of operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Add(Urho.Vector2@,Urho.Vector2@,Urho.Vector2@)">
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
            <summary>
            Adds two vectors.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.BaryCentric(Urho.Vector2,Urho.Vector2,Urho.Vector2,System.Single,System.Single)">
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.BaryCentric(Urho.Vector2@,Urho.Vector2@,Urho.Vector2@,System.Single,System.Single,Urho.Vector2@)">
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Clamp(Urho.Vector2,Urho.Vector2,Urho.Vector2)">
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <returns>The clamped vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Clamp(Urho.Vector2@,Urho.Vector2@,Urho.Vector2@,Urho.Vector2@)">
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.ComponentMax(Urho.Vector2,Urho.Vector2)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <returns>The component-wise maximum</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.ComponentMax(Urho.Vector2@,Urho.Vector2@,Urho.Vector2@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.ComponentMin(Urho.Vector2,Urho.Vector2)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <returns>The component-wise minimum</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.ComponentMin(Urho.Vector2@,Urho.Vector2@,Urho.Vector2@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Div(System.Single)">
            <param name="f">Scalar operand.</param>
            <summary>Divide this instance by a scalar.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Div(Urho.Vector2,System.Single)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <summary>
            Divide a vector by a scalar
            </summary>
            <returns>Result of the division</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Div(Urho.Vector2@,System.Single,Urho.Vector2@)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
            <summary>
            Divide a vector by a scalar
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Divide(Urho.Vector2,System.Single)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Divides a vector by a scalar.
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Divide(Urho.Vector2,Urho.Vector2)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Divide(Urho.Vector2@,System.Single,Urho.Vector2@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Divides a vector by a scalar.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Divide(Urho.Vector2@,Urho.Vector2@,Urho.Vector2@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Dot(Urho.Vector2,Urho.Vector2)">
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <returns>The dot product of the two inputs</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Dot(Urho.Vector2@,Urho.Vector2@,System.Single@)">
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Equals(System.Object)">
            <param name="obj">The object to compare to.</param>
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>True if the instances are equal; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Equals(Urho.Vector2)">
            <param name="other">A vector to compare with this vector.</param>
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Vector2.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <value></value>
            <remarks></remarks>
            <see cref="P:Urho.Vector2.LengthFast" />
            <altmember cref="P:Urho.Vector2.LengthSquared" />
        </member>
        <member name="P:Urho.Vector2.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <value></value>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:Urho.Vector2.Length" />
            <altmember cref="P:Urho.Vector2.LengthSquared" />
        </member>
        <member name="P:Urho.Vector2.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <value></value>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:Urho.Vector2.Length" />
            <altmember cref="P:Urho.Vector2.LengthFast" />
        </member>
        <member name="M:Urho.Vector2.Lerp(Urho.Vector2,Urho.Vector2,System.Single)">
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Lerp(Urho.Vector2@,Urho.Vector2@,System.Single,Urho.Vector2@)">
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Max(Urho.Vector2,Urho.Vector2)">
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <returns>The minimum Vector3</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Min(Urho.Vector2,Urho.Vector2)">
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <returns>The minimum Vector3</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Mult(System.Single)">
            <param name="f">Scalar operand.</param>
            <summary>Multiply this instance by a scalar.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Mult(Urho.Vector2,System.Single)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <summary>
            Multiply a vector and a scalar
            </summary>
            <returns>Result of the multiplication</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Mult(Urho.Vector2@,System.Single,Urho.Vector2@)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
            <summary>
            Multiply a vector and a scalar
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Multiply(Urho.Vector2,System.Single)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Multiply(Urho.Vector2,Urho.Vector2)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Multiply(Urho.Vector2@,System.Single,Urho.Vector2@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Multiply(Urho.Vector2@,Urho.Vector2@,Urho.Vector2@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Normalize(Urho.Vector2)">
            <param name="vec">The input vector</param>
            <summary>
            Scale a vector to unit length
            </summary>
            <returns>The normalized vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Normalize(Urho.Vector2@,Urho.Vector2@)">
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
            <summary>
            Scale a vector to unit length
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.NormalizeFast">
            <summary>
            Scales the Vector2 to approximately unit length.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.NormalizeFast(Urho.Vector2)">
            <param name="vec">The input vector</param>
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <returns>The normalized vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.NormalizeFast(Urho.Vector2@,Urho.Vector2@)">
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector2.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.op_Addition(Urho.Vector2,Urho.Vector2)">
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <summary>
            Adds the specified instances.
            </summary>
            <returns>Result of addition.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.op_Division(Urho.Vector2,System.Single)">
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <summary>
            Divides the specified instance by a scalar.
            </summary>
            <returns>Result of the division.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.op_Equality(Urho.Vector2,Urho.Vector2)">
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <summary>
            Compares the specified instances for equality.
            </summary>
            <returns>True if both instances are equal; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.op_Inequality(Urho.Vector2,Urho.Vector2)">
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <summary>
            Compares the specified instances for inequality.
            </summary>
            <returns>True if both instances are not equal; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.op_Multiply(System.Single,Urho.Vector2)">
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <returns>Result of multiplication.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.op_Multiply(Urho.Vector2,System.Single)">
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <returns>Result of multiplication.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.op_Subtraction(Urho.Vector2,Urho.Vector2)">
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <summary>
            Subtracts the specified instances.
            </summary>
            <returns>Result of subtraction.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.op_UnaryNegation(Urho.Vector2)">
            <param name="vec">Operand.</param>
            <summary>
            Negates the specified instance.
            </summary>
            <returns>Result of negation.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Vector2.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Vector2.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Scale(Urho.Vector2)">
            <param name="scale">The scaling of the individual components.</param>
            <summary>Scales this instance by the given parameter.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Scale(Urho.Vector2@)">
            <param name="scale">The scaling of the individual components.</param>
            <summary>Scales this instance by the given parameter.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Scale(System.Single,System.Single)">
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <summary>
            Scales the current Vector2 by the given amounts.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector2.SizeInBytes">
            <summary>
            Defines the size of the Vector2 struct in bytes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Sub(Urho.Vector2)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Sub(Urho.Vector2@)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Sub(Urho.Vector2,Urho.Vector2)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <returns>Result of subtraction</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Sub(Urho.Vector2@,Urho.Vector2@,Urho.Vector2@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Subtract(Urho.Vector2,Urho.Vector2)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <returns>Result of subtraction</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.Subtract(Urho.Vector2@,Urho.Vector2@,Urho.Vector2@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector2.ToString">
            <summary>
            Returns a System.String that represents the current Vector2.
            </summary>
            <returns />
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector2.UnitX">
            <summary>
            Defines a unit-length Vector2 that points towards the X-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector2.UnitY">
            <summary>
            Defines a unit-length Vector2 that points towards the Y-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector2.X">
            <summary>
            The X component of the Vector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector2.Y">
            <summary>
            The Y component of the Vector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector2.Zero">
            <summary>
            Defines a zero-length Vector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Vector3">
            <summary>
            Represents a 3D vector using three single-precision floating-point numbers.
            </summary>
            <remarks>
            The Vector3 structure is suitable for interoperation with unmanaged code requiring three consecutive floats.
            </remarks>
        </member>
        <member name="C:Urho.Vector3(Urho.Vector2)">
            <param name="v">The Vector2 to copy components from.</param>
            <summary>
            Constructs a new Vector3 from the given Vector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Vector3(Urho.Vector3)">
            <param name="v">The Vector3 to copy components from.</param>
            <summary>
            Constructs a new Vector3 from the given Vector3.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Vector3(Urho.Vector4)">
            <param name="v">The Vector4 to copy components from.</param>
            <summary>
            Constructs a new Vector3 from the given Vector4.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Vector3(System.Single,System.Single,System.Single)">
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
            <summary>
            Constructs a new Vector3.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Abs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Add(Urho.Vector3)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Add(Urho.Vector3@)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Add(Urho.Vector3,Urho.Vector3)">
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <summary>
            Adds two vectors.
            </summary>
            <returns>Result of operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Add(Urho.Vector3@,Urho.Vector3@,Urho.Vector3@)">
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
            <summary>
            Adds two vectors.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.BaryCentric(Urho.Vector3,Urho.Vector3,Urho.Vector3,System.Single,System.Single)">
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.BaryCentric(Urho.Vector3@,Urho.Vector3@,Urho.Vector3@,System.Single,System.Single,Urho.Vector3@)">
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.CalculateAngle(Urho.Vector3,Urho.Vector3)">
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:Urho.Vector3.CalculateAngle(Urho.Vector3@,Urho.Vector3@,System.Single@)">
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:Urho.Vector3.Clamp(Urho.Vector3,Urho.Vector3,Urho.Vector3)">
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <returns>The clamped vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Clamp(Urho.Vector3@,Urho.Vector3@,Urho.Vector3@,Urho.Vector3@)">
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.ComponentMax(Urho.Vector3,Urho.Vector3)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <returns>The component-wise maximum</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.ComponentMax(Urho.Vector3@,Urho.Vector3@,Urho.Vector3@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.ComponentMin(Urho.Vector3,Urho.Vector3)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <returns>The component-wise minimum</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.ComponentMin(Urho.Vector3@,Urho.Vector3@,Urho.Vector3@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Cross(Urho.Vector3,Urho.Vector3)">
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <returns>The cross product of the two inputs</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Cross(Urho.Vector3@,Urho.Vector3@,Urho.Vector3@)">
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The cross product of the two inputs</param>
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Div(System.Single)">
            <param name="f">Scalar operand.</param>
            <summary>Divide this instance by a scalar.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Div(Urho.Vector3,System.Single)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <summary>
            Divide a vector by a scalar
            </summary>
            <returns>Result of the division</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Div(Urho.Vector3@,System.Single,Urho.Vector3@)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
            <summary>
            Divide a vector by a scalar
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Divide(Urho.Vector3,System.Single)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Divides a vector by a scalar.
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Divide(Urho.Vector3,Urho.Vector3)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Divide(Urho.Vector3@,System.Single,Urho.Vector3@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Divides a vector by a scalar.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Divide(Urho.Vector3@,Urho.Vector3@,Urho.Vector3@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Dot(Urho.Vector3,Urho.Vector3)">
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <returns>The dot product of the two inputs</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Dot(Urho.Vector3@,Urho.Vector3@,System.Single@)">
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Equals(System.Object)">
            <param name="obj">The object to compare to.</param>
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>True if the instances are equal; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Equals(Urho.Vector3)">
            <param name="other">A vector to compare with this vector.</param>
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Vector3.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <value></value>
            <remarks></remarks>
            <see cref="P:Urho.Vector3.LengthFast" />
            <altmember cref="P:Urho.Vector3.LengthSquared" />
        </member>
        <member name="P:Urho.Vector3.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <value></value>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:Urho.Vector3.Length" />
            <altmember cref="P:Urho.Vector3.LengthSquared" />
        </member>
        <member name="P:Urho.Vector3.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <value></value>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:Urho.Vector3.Length" />
            <altmember cref="P:Urho.Vector3.LengthFast" />
        </member>
        <member name="M:Urho.Vector3.Lerp(Urho.Vector3,Urho.Vector3,System.Single)">
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Lerp(Urho.Vector3@,Urho.Vector3@,System.Single,Urho.Vector3@)">
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Max(Urho.Vector3,Urho.Vector3)">
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <returns>The minimum Vector3</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Min(Urho.Vector3,Urho.Vector3)">
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <returns>The minimum Vector3</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Mult(System.Single)">
            <param name="f">Scalar operand.</param>
            <summary>Multiply this instance by a scalar.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Mult(Urho.Vector3,System.Single)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <summary>
            Multiply a vector and a scalar
            </summary>
            <returns>Result of the multiplication</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Mult(Urho.Vector3@,System.Single,Urho.Vector3@)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
            <summary>
            Multiply a vector and a scalar
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Multiply(Urho.Vector3,System.Single)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Multiply(Urho.Vector3,Urho.Vector3)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Multiply(Urho.Vector3@,System.Single,Urho.Vector3@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Multiply(Urho.Vector3@,Urho.Vector3@,Urho.Vector3@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Normalize">
            <summary>
            Scales the Vector3 to unit length.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Normalize(Urho.Vector3)">
            <param name="vec">The input vector</param>
            <summary>
            Scale a vector to unit length
            </summary>
            <returns>The normalized vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Normalize(Urho.Vector3@,Urho.Vector3@)">
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
            <summary>
            Scale a vector to unit length
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.NormalizeFast">
            <summary>
            Scales the Vector3 to approximately unit length.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.NormalizeFast(Urho.Vector3)">
            <param name="vec">The input vector</param>
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <returns>The normalized vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.NormalizeFast(Urho.Vector3@,Urho.Vector3@)">
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector3.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.op_Addition(Urho.Vector3,Urho.Vector3)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Adds two instances.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.op_Division(Urho.Vector3,System.Single)">
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <summary>
            Divides an instance by a scalar.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.op_Equality(Urho.Vector3,Urho.Vector3)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Compares two instances for equality.
            </summary>
            <returns>True, if left equals right; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.op_Inequality(Urho.Vector3,Urho.Vector3)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Compares two instances for inequality.
            </summary>
            <returns>True, if left does not equa lright; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.op_Multiply(System.Single,Urho.Vector3)">
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.op_Multiply(Urho.Vector3,System.Single)">
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.op_Subtraction(Urho.Vector3,Urho.Vector3)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Subtracts two instances.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.op_UnaryNegation(Urho.Vector3)">
            <param name="vec">The instance.</param>
            <summary>
            Negates an instance.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Scale(Urho.Vector3)">
            <param name="scale">The scaling of the individual components.</param>
            <summary>Scales this instance by the given parameter.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Scale(Urho.Vector3@)">
            <param name="scale">The scaling of the individual components.</param>
            <summary>Scales this instance by the given parameter.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Scale(System.Single,System.Single,System.Single)">
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
            <summary>
            Scales the current Vector3 by the given amounts.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector3.SizeInBytes">
            <summary>
            Defines the size of the Vector3 struct in bytes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Sub(Urho.Vector3)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Sub(Urho.Vector3@)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Sub(Urho.Vector3,Urho.Vector3)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <returns>Result of subtraction</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Sub(Urho.Vector3@,Urho.Vector3@,Urho.Vector3@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Subtract(Urho.Vector3,Urho.Vector3)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <returns>Result of subtraction</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Subtract(Urho.Vector3@,Urho.Vector3@,Urho.Vector3@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns />
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Transform(Urho.Vector3,Urho.Matrix4)">
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <summary>Transform a Vector by the given Matrix</summary>
            <returns>The transformed vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.Transform(Urho.Vector3@,Urho.Matrix4@,Urho.Vector4@)">
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
            <summary>Transform a Vector by the given Matrix</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.TransformNormal(Urho.Vector3,Urho.Matrix4)">
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <summary>Transform a Normal by the given Matrix</summary>
            <returns>The transformed normal</returns>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
        </member>
        <member name="M:Urho.Vector3.TransformNormal(Urho.Vector3@,Urho.Matrix4@,Urho.Vector3@)">
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed normal</param>
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
        </member>
        <member name="M:Urho.Vector3.TransformNormalInverse(Urho.Vector3,Urho.Matrix4)">
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <returns>The transformed normal</returns>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
        </member>
        <member name="M:Urho.Vector3.TransformNormalInverse(Urho.Vector3@,Urho.Matrix4@,Urho.Vector3@)">
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <param name="result">The transformed normal</param>
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
        </member>
        <member name="M:Urho.Vector3.TransformPerspective(Urho.Vector3,Urho.Matrix4)">
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <returns>The transformed vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.TransformPerspective(Urho.Vector3@,Urho.Matrix4@,Urho.Vector3@)">
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.TransformPosition(Urho.Vector3,Urho.Matrix4)">
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <summary>Transform a Position by the given Matrix</summary>
            <returns>The transformed position</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.TransformPosition(Urho.Vector3@,Urho.Matrix4@,Urho.Vector3@)">
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed position</param>
            <summary>Transform a Position by the given Matrix</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.TransformVector(Urho.Vector3,Urho.Matrix4)">
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <returns>The transformed vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector3.TransformVector(Urho.Vector3@,Urho.Matrix4@,Urho.Vector3@)">
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector3.UnitX">
            <summary>
            Defines a unit-length Vector3 that points towards the X-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector3.UnitY">
            <summary>
            Defines a unit-length Vector3 that points towards the Y-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector3.UnitZ">
            <summary>
            /// Defines a unit-length Vector3 that points towards the Z-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector3.X">
            <summary>
            The X component of the Vector3.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Vector3.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2 with the X and Y components of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector3.Y">
            <summary>
            The Y component of the Vector3.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector3.Z">
            <summary>
            The Z component of the Vector3.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector3.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Vector4">
            <summary>Represents a 4D vector using four single-precision floating-point numbers.</summary>
            <remarks>
            The Vector4 structure is suitable for interoperation with unmanaged code requiring four consecutive floats.
            </remarks>
        </member>
        <member name="C:Urho.Vector4(Urho.Vector2)">
            <param name="v">The Vector2 to copy components from.</param>
            <summary>
            Constructs a new Vector4 from the given Vector2.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Vector4(Urho.Vector3)">
            <param name="v">The Vector3 to copy components from.</param>
            <summary>
            Constructs a new Vector4 from the given Vector3.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Vector4(Urho.Vector4)">
            <param name="v">The Vector4 to copy components from.</param>
            <summary>
            Constructs a new Vector4 from the given Vector4.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Vector4(Urho.Vector3,System.Single)">
            <param name="v">The Vector3 to copy components from.</param>
            <param name="w">The W component of the new Vector4.</param>
            <summary>
            Constructs a new Vector4 from the specified Vector3 and W component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Vector4(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">The x component of the Vector4.</param>
            <param name="y">The y component of the Vector4.</param>
            <param name="z">The z component of the Vector4.</param>
            <param name="w">The z component of the Vector4.</param>
            <summary>
            Constructs a new Vector4.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Add(Urho.Vector4)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Add(Urho.Vector4@)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Add(Urho.Vector4,Urho.Vector4)">
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <summary>
            Adds two vectors.
            </summary>
            <returns>Result of operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Add(Urho.Vector4@,Urho.Vector4@,Urho.Vector4@)">
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
            <summary>
            Adds two vectors.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.BaryCentric(Urho.Vector4,Urho.Vector4,Urho.Vector4,System.Single,System.Single)">
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.BaryCentric(Urho.Vector4@,Urho.Vector4@,Urho.Vector4@,System.Single,System.Single,Urho.Vector4@)">
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Clamp(Urho.Vector4,Urho.Vector4,Urho.Vector4)">
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <returns>The clamped vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Clamp(Urho.Vector4@,Urho.Vector4@,Urho.Vector4@,Urho.Vector4@)">
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Div(System.Single)">
            <param name="f">Scalar operand.</param>
            <summary>Divide this instance by a scalar.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Div(Urho.Vector4,System.Single)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <summary>
            Divide a vector by a scalar
            </summary>
            <returns>Result of the division</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Div(Urho.Vector4@,System.Single,Urho.Vector4@)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
            <summary>
            Divide a vector by a scalar
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Divide(Urho.Vector4,System.Single)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Divides a vector by a scalar.
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Divide(Urho.Vector4,Urho.Vector4)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Divide(Urho.Vector4@,System.Single,Urho.Vector4@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Divides a vector by a scalar.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Divide(Urho.Vector4@,Urho.Vector4@,Urho.Vector4@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Dot(Urho.Vector4,Urho.Vector4)">
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <returns>The dot product of the two inputs</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Dot(Urho.Vector4@,Urho.Vector4@,System.Single@)">
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Equals(System.Object)">
            <param name="obj">The object to compare to.</param>
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>True if the instances are equal; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Equals(Urho.Vector4)">
            <param name="other">A vector to compare with this vector.</param>
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Vector4.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <value></value>
            <remarks></remarks>
            <see cref="P:Urho.Vector4.LengthFast" />
            <altmember cref="P:Urho.Vector4.LengthSquared" />
        </member>
        <member name="P:Urho.Vector4.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <value></value>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:Urho.Vector4.Length" />
            <altmember cref="P:Urho.Vector4.LengthSquared" />
        </member>
        <member name="P:Urho.Vector4.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <value></value>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:Urho.Vector4.Length" />
            <altmember cref="P:Urho.Vector4.LengthFast" />
        </member>
        <member name="M:Urho.Vector4.Lerp(Urho.Vector4,Urho.Vector4,System.Single)">
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Lerp(Urho.Vector4@,Urho.Vector4@,System.Single,Urho.Vector4@)">
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Max(Urho.Vector4,Urho.Vector4)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <returns>The component-wise maximum</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Max(Urho.Vector4@,Urho.Vector4@,Urho.Vector4@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Min(Urho.Vector4,Urho.Vector4)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <returns>The component-wise minimum</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Min(Urho.Vector4@,Urho.Vector4@,Urho.Vector4@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Mult(System.Single)">
            <param name="f">Scalar operand.</param>
            <summary>Multiply this instance by a scalar.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Mult(Urho.Vector4,System.Single)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <summary>
            Multiply a vector and a scalar
            </summary>
            <returns>Result of the multiplication</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Mult(Urho.Vector4@,System.Single,Urho.Vector4@)">
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
            <summary>
            Multiply a vector and a scalar
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Multiply(Urho.Vector4,System.Single)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Multiply(Urho.Vector4,Urho.Vector4)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <returns>Result of the operation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Multiply(Urho.Vector4@,System.Single,Urho.Vector4@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Multiply(Urho.Vector4@,Urho.Vector4@,Urho.Vector4@)">
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Normalize">
            <summary>
            Scales the Vector4 to unit length.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Normalize(Urho.Vector4)">
            <param name="vec">The input vector</param>
            <summary>
            Scale a vector to unit length
            </summary>
            <returns>The normalized vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Normalize(Urho.Vector4@,Urho.Vector4@)">
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
            <summary>
            Scale a vector to unit length
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.NormalizeFast">
            <summary>
            Scales the Vector4 to approximately unit length.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.NormalizeFast(Urho.Vector4)">
            <param name="vec">The input vector</param>
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <returns>The normalized vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.NormalizeFast(Urho.Vector4@,Urho.Vector4@)">
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector4.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.op_Addition(Urho.Vector4,Urho.Vector4)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Adds two instances.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.op_Division(Urho.Vector4,System.Single)">
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <summary>
            Divides an instance by a scalar.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.op_Equality(Urho.Vector4,Urho.Vector4)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Compares two instances for equality.
            </summary>
            <returns>True, if left equals right; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.op_Explicit(Urho.Vector4)~System.IntPtr">
            <param name="v">The instance.</param>
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <returns>A pointer to the first element of v.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.op_Explicit(Urho.Vector4)~System.Single*">
            <param name="v">The instance.</param>
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <returns>A pointer to the first element of v.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.op_Inequality(Urho.Vector4,Urho.Vector4)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Compares two instances for inequality.
            </summary>
            <returns>True, if left does not equa lright; false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.op_Multiply(System.Single,Urho.Vector4)">
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.op_Multiply(Urho.Vector4,System.Single)">
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.op_Subtraction(Urho.Vector4,Urho.Vector4)">
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <summary>
            Subtracts two instances.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.op_UnaryNegation(Urho.Vector4)">
            <param name="vec">The instance.</param>
            <summary>
            Negates an instance.
            </summary>
            <returns>The result of the calculation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Scale(Urho.Vector4)">
            <param name="scale">The scaling of the individual components.</param>
            <summary>Scales this instance by the given parameter.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Scale(Urho.Vector4@)">
            <param name="scale">The scaling of the individual components.</param>
            <summary>Scales this instance by the given parameter.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Scale(System.Single,System.Single,System.Single,System.Single)">
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
            <param name="sw">The scale of the Z component.</param>
            <summary>
            Scales the current Vector4 by the given amounts.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector4.SizeInBytes">
            <summary>
            Defines the size of the Vector4 struct in bytes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Sub(Urho.Vector4)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Sub(Urho.Vector4@)">
            <param name="right">Right operand. This parameter is only read from.</param>
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Sub(Urho.Vector4,Urho.Vector4)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <returns>Result of subtraction</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Sub(Urho.Vector4@,Urho.Vector4@,Urho.Vector4@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Subtract(Urho.Vector4,Urho.Vector4)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <returns>Result of subtraction</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Subtract(Urho.Vector4@,Urho.Vector4@,Urho.Vector4@)">
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
            <summary>
            Subtract one Vector from another
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.ToString">
            <summary>
            Returns a System.String that represents the current Vector4.
            </summary>
            <returns />
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Transform(Urho.Vector4,Urho.Matrix4)">
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <summary>Transform a Vector by the given Matrix</summary>
            <returns>The transformed vector</returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Vector4.Transform(Urho.Vector4@,Urho.Matrix4@,Urho.Vector4@)">
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
            <summary>Transform a Vector by the given Matrix</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector4.UnitW">
            <summary>
            Defines a unit-length Vector4 that points towards the W-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector4.UnitX">
            <summary>
            Defines a unit-length Vector4 that points towards the X-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector4.UnitY">
            <summary>
            Defines a unit-length Vector4 that points towards the Y-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector4.UnitZ">
            <summary>
            Defines a unit-length Vector4 that points towards the Z-axis.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector4.W">
            <summary>
            The W component of the Vector4.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector4.X">
            <summary>
            The X component of the Vector4.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Vector4.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2 with the X and Y components of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Vector4.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector4.Y">
            <summary>
            The Y component of the Vector4.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector4.Z">
            <summary>
            The Z component of the Vector4.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.Vector4.Zero">
            <summary>
            Defines a zero-length Vector4.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.VectorBase">
            <summary>Represents a vector that can be retrieved in different formats.</summary>
            <remarks>When you have a VectorBase, you can retrieve the data pointed to by the buffer with the given size into a managed array by invoking the generic ToArray method.</remarks>
        </member>
        <member name="F:Urho.VectorBase.Buffer">
            <summary>Pointer to the buffer holding the vector data.</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.VectorBase.Capacity">
            <summary>Capacity for the vector</summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.VectorBase.Size">
            <summary>The current size of the vector.</summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VectorBase.ToArray``1">
            <typeparam name="T"></typeparam>
            <summary>Retrieves up to Size elemenst from the location in memory pointed at by Buffer and casts each individual member into a type of T.</summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.VertexBuffer">
            <summary>
            Hardware vertex buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.VertexBuffer(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of VertexBuffer, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.VertexBuffer(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.VertexBuffer(Urho.Context,System.Boolean)">
            <param name="context">The context that this object will be attached to.</param>
            <param name="forceHeadless"></param>
            <summary>Creates an instance of VertexBuffer that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of VertexBuffer attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="P:Urho.VertexBuffer.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.VertexBuffer.ElementMask">
            <summary>
            Return bitmask of vertex elements.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.GetElementOffset(Urho.VertexElement)">
            <param name="element"></param>
            <summary>
            Return offset of a specified element within a vertex.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.GetElementOffset(Urho.ElementMask,Urho.VertexElement)">
            <param name="elementMask"></param>
            <param name="element"></param>
            <summary>
            Return element offset from an element mask.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.GetVertexSize(Urho.ElementMask)">
            <param name="elementMask"></param>
            <summary>
            Return vertex size corresponding to a vertex element mask.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.IsDynamic">
            <summary>
            Return whether is dynamic.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.IsLocked">
            <summary>
            Return whether is currently locked.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.IsShadowed">
            <summary>
            Return whether CPU memory shadowing is enabled.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.Lock(System.UInt32,System.UInt32,System.Boolean)">
            <param name="start"></param>
            <param name="count"></param>
            <param name="discard"></param>
            <summary>
            Lock the buffer for write-only editing. Return data pointer if successful. Optionally discard data outside the range.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.OnDeviceReset">
            <summary>
            Recreate the GPU resource and restore data if applicable.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.Release">
            <summary>
            Release the buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.SetData(System.Single[])">
            <param name="vertexData"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.SetData(System.Void*)">
            <param name="data"></param>
            <summary>
            Set all data in the buffer.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.SetDataRange(System.Void*,System.UInt32,System.UInt32,System.Boolean)">
            <param name="data"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="discard"></param>
            <summary>
            Set a data range in the buffer. Optionally discard data outside the range.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.SetShadowed(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Enable shadowing in CPU memory. Shadowing is forced on if the graphics subsystem does not exist.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.SetSize(System.UInt32,Urho.ElementMask,System.Boolean)">
            <param name="vertexCount"></param>
            <param name="elementMask"></param>
            <param name="dynamic"></param>
            <summary>
            Set size and vertex elements and dynamic mode. Previous data will be lost.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.VertexBuffer.ShadowData">
            <summary>
            Return CPU memory shadow data.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.VertexBuffer.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.VertexBuffer.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.VertexBuffer.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.VertexBuffer.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.VertexBuffer.Unlock">
            <summary>
            Unlock the buffer and apply changes to the GPU buffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.VertexBuffer.VertexCount">
            <summary>
            Return number of vertices.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.VertexBuffer.VertexSize">
            <summary>
            Return vertex size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.VertexElement">
            <summary>
            Vertex elements.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.VertexElement.Blendindices">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Blendweights">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Color">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Cubetexcoord1">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Cubetexcoord2">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Instancematrix1">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Instancematrix2">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Instancematrix3">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.MaxVertexElements">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Normal">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Position">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Tangent">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Texcoord1">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexElement.Texcoord2">
            <summary></summary>
        </member>
        <member name="T:Urho.VertexLightVSVariation">
            <summary>
            Per-vertex light vertex shader variations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.VertexLightVSVariation.MaxVertexlightVsVariations">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexLightVSVariation.N1Light">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexLightVSVariation.N2Lights">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexLightVSVariation.N3Lights">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexLightVSVariation.N4Lights">
            <summary></summary>
        </member>
        <member name="F:Urho.VertexLightVSVariation.Nolights">
            <summary></summary>
        </member>
        <member name="T:Urho.VerticalAlignment">
            <summary>
            %UI element vertical alignment.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.VerticalAlignment.Bottom">
            <summary></summary>
        </member>
        <member name="F:Urho.VerticalAlignment.Center">
            <summary></summary>
        </member>
        <member name="F:Urho.VerticalAlignment.Top">
            <summary></summary>
        </member>
        <member name="T:Urho.View">
            <summary>
            Internal structure for 3D rendering work. Created for each backbuffer and texture viewport, but not for shadow cameras.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.View(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of View, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.View(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of View that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of View attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.View(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.View.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.View.Camera">
            <summary>
            Return camera.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.View.Define(Urho.RenderSurface,Urho.Viewport)">
            <param name="renderTarget"></param>
            <param name="viewport"></param>
            <summary>
            Define with rendertarget and viewport. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View.DrawDebug">
            <summary>
            Return whether should draw debug geometry.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View.Graphics">
            <summary>
            Return graphics subsystem.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View.OcclusionBuffer">
            <summary>
            Return the last used software occlusion buffer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View.Octree">
            <summary>
            Return octree.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.View.Render">
            <summary>
            Render batches.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View.Renderer">
            <summary>
            Return renderer subsystem.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View.RenderTarget">
            <summary>
            Return the rendertarget. 0 if using the backbuffer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View.Scene">
            <summary>
            Return scene.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.View.SetCameraShaderParameters(Urho.Camera,System.Boolean)">
            <param name="camera"></param>
            <param name="setProjectionMatrix"></param>
            <summary>
            Set camera-specific shader parameters. Called by Batch and internally by View.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.View.SetGBufferShaderParameters(Urho.IntVector2,Urho.IntRect)">
            <param name="texSize"></param>
            <param name="viewRect"></param>
            <summary>
            Set G-buffer offset and inverse size shader parameters. Called by Batch and internally by View.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.View.SetGlobalShaderParameters">
            <summary>
            Set global (per-frame) shader parameters. Called by Batch and internally by View.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.View.SubscribeToBeginViewUpdate(System.Action{Urho.BeginViewUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the BeginViewUpdate event raised by the View.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="M:Urho.View.SubscribeToEndViewUpdate(System.Action{Urho.EndViewUpdateEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the EndViewUpdate event raised by the View.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.View.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.View.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.View.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.View.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.View3D">
            <summary>
            %UI element which renders a 3D scene.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.View3D(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of View3D, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.View3D(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of View3D that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of View3D attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.View3D(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.View3D.AutoUpdate">
            <summary>
            Return whether render target updates automatically.
            Or
            Set render target auto update mode. Default is true.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View3D.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.View3D.CameraNode">
            <summary>
            Return camera scene node.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View3D.DepthTexture">
            <summary>
            Return depth stencil texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View3D.Format">
            <summary>
            Return render texture pixel format.
            Or
            Set render texture pixel format. Default is RGB.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.View3D.OnResize">
            <summary>
            React to resize.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.View3D.QueueUpdate">
            <summary>
            Queue manual update on the render texture.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.View3D.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View3D.RenderTexture">
            <summary>
            Return render texture.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View3D.Scene">
            <summary>
            Return scene.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.View3D.SetView(Urho.Scene,Urho.Camera,System.Boolean)">
            <param name="scene"></param>
            <param name="camera"></param>
            <param name="ownScene"></param>
            <summary>
            Define the scene and camera to use in rendering. When ownScene is true the View3D will take ownership of them with shared pointers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View3D.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.View3D.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.View3D.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.View3D.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.View3D.Viewport">
            <summary>
            Return viewport.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ViewChangedEventArgs">
            <summary>Event arguments for the ScrollView's ViewChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ViewChangedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ViewChangedEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.ViewChangedEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.ViewOverrideFlags">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.ViewOverrideFlags.DisableOcclusion">
            <summary></summary>
        </member>
        <member name="F:Urho.ViewOverrideFlags.DisableShadows">
            <summary></summary>
        </member>
        <member name="F:Urho.ViewOverrideFlags.LowMaterialQuality">
            <summary></summary>
        </member>
        <member name="F:Urho.ViewOverrideFlags.None">
            <summary></summary>
        </member>
        <member name="T:Urho.Viewport">
            <summary>
            %Viewport definition either for a render surface or the backbuffer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Viewport(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Viewport, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Viewport(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Viewport that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Viewport attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Viewport(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="C:Urho.Viewport(Urho.Context,Urho.Scene,Urho.Camera,Urho.RenderPath)">
            <param name="context">The context that this object will be attached to.</param>
            <param name="scene"></param>
            <param name="camera"></param>
            <param name="renderPath"></param>
            <summary>Creates an instance of Viewport that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Viewport attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Viewport(Urho.Context,Urho.Scene,Urho.Camera,Urho.IntRect,Urho.RenderPath)">
            <param name="context">The context that this object will be attached to.</param>
            <param name="scene"></param>
            <param name="camera"></param>
            <param name="rect"></param>
            <param name="renderPath"></param>
            <summary>Creates an instance of Viewport that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Viewport attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="M:Urho.Viewport.AllocateView">
            <summary>
            Allocate the view structure. Called by Renderer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Viewport.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Viewport.Camera">
            <summary>
            Return camera.
            Or
            Set camera.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Viewport.DrawDebug">
            <summary>
            Return whether to draw debug geometry.
            Or
            Set whether to render debug geometry. Default true.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Viewport.GetScreenRay(System.Int32,System.Int32)">
            <param name="x"></param>
            <param name="y"></param>
            <summary>
            Return ray corresponding to normalized screen coordinates.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Viewport.Rect">
            <summary>
            Return rectangle.
            Or
            Set rectangle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Viewport.RenderPath">
            <summary>
            Return rendering path.
            Or
            Set rendering path.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Viewport.Scene">
            <summary>
            Return scene.
            Or
            Set scene.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Viewport.ScreenToWorldPoint(System.Int32,System.Int32,System.Single)">
            <param name="x"></param>
            <param name="y"></param>
            <param name="depth"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Viewport.SetRenderPath(Urho.XmlFile)">
            <param name="file"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Viewport.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Viewport.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Viewport.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Viewport.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Viewport.View">
            <summary>
            Return the internal rendering structure. May be null if the viewport has not been rendered yet.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Viewport.WorldToScreenPoint(Urho.Vector3)">
            <param name="worldPos"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Urho.VisibleChangedEventArgs">
            <summary>Event arguments for the UIElement's VisibleChanged event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.VisibleChangedEventArgs.Element">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.VisibleChangedEventArgs.Visible">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.WeakPtr">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Window">
            <summary>
            %Window %UI element that can optionally by moved or resized.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Window(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Window, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Window(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Window that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Window attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Window(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Window.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Window.FixedHeightResizing">
            <summary>
            Return whether is resizing height is fixed.
            Or
            Set whether resizing height is fixed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Window.FixedWidthResizing">
            <summary>
            Return whether is resizing width is fixed.
            Or
            Set whether resizing width is fixed.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.IsModal">
            <summary>
            Return modal flag.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.IsMovable">
            <summary>
            Return whether is movable.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.IsResizable">
            <summary>
            Return whether is resizable.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Window.ModalAutoDismiss">
            <summary>
            Return whether can be dismissed with escape key.
            Or
            Set whether model window can be dismissed with the escape key. Default true.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Window.ModalFrameColor">
            <summary>
            Get modal frame color.
            Or
            Set modal frame color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Window.ModalFrameSize">
            <summary>
            Get modal frame size.
            Or
            Set modal frame size.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Window.ModalShadeColor">
            <summary>
            Get modal shade color.
            Or
            Set modal shade color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.OnDragBegin(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag begin.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.OnDragCancel(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="dragButtons"></param>
            <param name="buttons"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag cancel.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.OnDragEnd(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="dragButtons"></param>
            <param name="buttons"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag end.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.OnDragMove(Urho.IntVector2,Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="deltaPos"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse drag motion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.OnHover(Urho.IntVector2,Urho.IntVector2,System.Int32,System.Int32,Urho.Cursor)">
            <param name="position"></param>
            <param name="screenPosition"></param>
            <param name="buttons"></param>
            <param name="qualifiers"></param>
            <param name="cursor"></param>
            <summary>
            React to mouse hover.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Window.ResizeBorder">
            <summary>
            Return resize area width at edges.
            Or
            Set resize area width at edges.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.SetModal(System.Boolean)">
            <param name="modal"></param>
            <summary>
            Set modal flag. When the modal flag is set, the focused window needs to be dismissed first to allow other UI elements to gain focus.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.SetMovable(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether can be moved.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.SetResizable(System.Boolean)">
            <param name="enable"></param>
            <summary>
            Set whether can be resized.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Window.SubscribeToModalChanged(System.Action{Urho.ModalChangedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the ModalChanged event raised by the Window.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.Window.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Window.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Window.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Window.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.WindowDragMode">
            <summary>
            %Window movement and resizing modes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.WindowDragMode.Move">
            <summary></summary>
        </member>
        <member name="F:Urho.WindowDragMode.None">
            <summary></summary>
        </member>
        <member name="F:Urho.WindowDragMode.ResizeBottom">
            <summary></summary>
        </member>
        <member name="F:Urho.WindowDragMode.ResizeBottomLeft">
            <summary></summary>
        </member>
        <member name="F:Urho.WindowDragMode.ResizeBottomRight">
            <summary></summary>
        </member>
        <member name="F:Urho.WindowDragMode.ResizeLeft">
            <summary></summary>
        </member>
        <member name="F:Urho.WindowDragMode.ResizeRight">
            <summary></summary>
        </member>
        <member name="F:Urho.WindowDragMode.ResizeTop">
            <summary></summary>
        </member>
        <member name="F:Urho.WindowDragMode.ResizeTopLeft">
            <summary></summary>
        </member>
        <member name="F:Urho.WindowDragMode.ResizeTopright">
            <summary></summary>
        </member>
        <member name="T:Urho.WindowPosEventArgs">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.WindowPosEventArgs.X">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.WindowPosEventArgs.Y">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.WorkItem">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.WorkItem(System.IntPtr)">
            <param name="p"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.WorkItemCompletedEventArgs">
            <summary>Event arguments for the WorkQueue's WorkItemCompleted event</summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.WorkItemCompletedEventArgs.Item">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.WorkQueue">
            <summary>
            Work queue subsystem for multithreading.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.WorkQueue(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of WorkQueue, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.WorkQueue(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of WorkQueue that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of WorkQueue attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.WorkQueue(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.WorkQueue.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.WorkQueue.Complete(System.UInt32)">
            <param name="priority"></param>
            <summary>
            Finish all queued work which has at least the specified priority. Main thread will also execute priority work. Pause worker threads if no more work remains.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.WorkQueue.CreateThreads(System.UInt32)">
            <param name="numThreads"></param>
            <summary>
            Create worker threads. Can only be called once.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.WorkQueue.FreeItem">
            <summary>
            Get pointer to an usable WorkItem from the item pool. Allocate one if no more free items.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.WorkQueue.IsCompleted(System.UInt32)">
            <param name="priority"></param>
            <summary>
            Return whether all work with at least the specified priority is finished.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.WorkQueue.IsCompleting">
            <summary>
            Return whether the queue is currently completing work in the main thread.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.WorkQueue.NonThreadedWorkMs">
            <summary>
            Return how many milliseconds maximum to spend on non-threaded low-priority work.
            Or
            Set how many milliseconds maximum per frame to spend on low-priority work, when there are no worker threads.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.WorkQueue.NumThreads">
            <summary>
            Return number of worker threads.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.WorkQueue.Pause">
            <summary>
            Pause worker threads.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.WorkQueue.Resume">
            <summary>
            Resume worker threads.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.WorkQueue.SubscribeToWorkItemCompleted(System.Action{Urho.WorkItemCompletedEventArgs})">
            <param name="handler">The handler to invoke when this event is raised.</param>
            <summary>Subscribes to the WorkItemCompleted event raised by the WorkQueue.</summary>
            <returns>Returns an Urho.Subscription that can be used to cancel the subscription.</returns>
            <remarks />
        </member>
        <member name="P:Urho.WorkQueue.Tolerance">
            <summary>
            Return the pool tolerance.
            Or
            Set the pool telerance before it starts deleting pool items.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.WorkQueue.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.WorkQueue.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.WorkQueue.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.WorkQueue.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.WrapMode">
            <summary>
            Animation wrap mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Urho.WrapMode.Clamp">
            <summary></summary>
        </member>
        <member name="F:Urho.WrapMode.Loop">
            <summary></summary>
        </member>
        <member name="F:Urho.WrapMode.Once">
            <summary></summary>
        </member>
        <member name="T:Urho.XmlComponentSerializer">
            <summary>
            XMLElement based implementation of IComponentSerializer
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.XmlComponentSerializer(Urho.XmlElement)">
            <param name="xmlElement"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlComponentSerializer.Deserialize``1(System.String)">
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlComponentSerializer.Serialize(System.String,System.Object)">
            <param name="key"></param>
            <param name="value"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.XmlElement">
            <summary>
            Element in an XML file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.XmlElement">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.XmlElement(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of XmlElement, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.XmlElement(Urho.XmlElement)">
            <param name="rhs"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.BoundingBox">
            <summary>
            Return bounding box attribute, or empty if missing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.File">
            <summary>
            Return XML file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetAttribute(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute, or empty if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetAttributeLower(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute in lowercase, or empty if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetAttributeUpper(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute in lowercase, or empty if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetBool(System.String)">
            <param name="name"></param>
            <summary>
            Return bool attribute, or false if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetBuffer(System.String,System.IntPtr,System.UInt32)">
            <param name="name"></param>
            <param name="dest"></param>
            <param name="size"></param>
            <summary>
            Copy buffer attribute into a supplied buffer. Return true if buffer was large enough.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetColor(System.String)">
            <param name="name"></param>
            <summary>
            Return a color attribute, or default if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetDouble(System.String)">
            <param name="name"></param>
            <summary>
            Return a double attribute, or zero if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetFloat(System.String)">
            <param name="name"></param>
            <summary>
            Return a float attribute, or zero if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetInt(System.String)">
            <param name="name"></param>
            <summary>
            Return an integer attribute, or zero if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetIntRect(System.String)">
            <param name="name"></param>
            <summary>
            Return an IntRect attribute, or default if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetIntVector2(System.String)">
            <param name="name"></param>
            <summary>
            Return an IntVector2 attribute, or default if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetMatrix3(System.String)">
            <param name="name"></param>
            <summary>
            Return a Matrix3 attribute, or zero matrix if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetMatrix3x4(System.String)">
            <param name="name"></param>
            <summary>
            Return a Matrix3x4 attribute, or zero matrix if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetMatrix4(System.String)">
            <param name="name"></param>
            <summary>
            Return a Matrix4 attribute, or zero matrix if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetQuaternion(System.String)">
            <param name="name"></param>
            <summary>
            Return a quaternion attribute, or default if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetRect(System.String)">
            <param name="name"></param>
            <summary>
            Return a Rect attribute, or default if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetUInt(System.String)">
            <param name="name"></param>
            <summary>
            Return an unsigned integer attribute, or zero if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVariantValue(Urho.VariantType)">
            <param name="type"></param>
            <summary>
            Return a variant attribute with static type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVector(System.String)">
            <param name="name"></param>
            <summary>
            Return any Vector attribute as Vector4. Missing coordinates will be zero.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVector2(System.String)">
            <param name="name"></param>
            <summary>
            Return a Vector2 attribute, or zero vector if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVector3(System.String)">
            <param name="name"></param>
            <summary>
            Return a Vector3 attribute, or zero vector if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVector4(System.String)">
            <param name="name"></param>
            <summary>
            Return a Vector4 attribute, or zero vector if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVectorVariant(System.String)">
            <param name="name"></param>
            <summary>
            Return a float, Vector or Matrix attribute as Variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.HasAttribute(System.String)">
            <param name="name"></param>
            <summary>
            Return whether has an attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.HasChild(System.String)">
            <param name="name"></param>
            <summary>
            Return whether has a child element.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.IsNull">
            <summary>
            Return whether does not refer to an element or an XPath node.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.Name">
            <summary>
            Return element name (or attribute name if it is an attribute only XPath query result).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.NotNull">
            <summary>
            Return whether refers to an element or an XPath node.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.NumAttributes">
            <summary>
            Return number of attributes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.RemoveAttribute(System.String)">
            <param name="name"></param>
            <summary>
            Remove an attribute by name. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.RemoveChild(System.String)">
            <param name="name"></param>
            <summary>
            Remove a child element by name. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.RemoveChild(Urho.XmlElement)">
            <param name="element"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.RemoveChildren(System.String)">
            <param name="name"></param>
            <summary>
            Remove child elements of certain name, or all child elements if name is empty. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.ResourceRef">
            <summary>
            Return a resource reference attribute, or empty if missing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.ResourceRefList">
            <summary>
            Return a resource reference list attribute, or empty if missing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetAttribute(System.String)">
            <param name="value"></param>
            <summary>
            Set an attribute. Only valid if it is an attribute only XPath query result.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetAttribute(System.String,System.String)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set an attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetBool(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a bool attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetBoundingBox(Urho.BoundingBox)">
            <param name="value"></param>
            <summary>
            Set a BoundingBox attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetBuffer(System.String,System.Void*,System.UInt32)">
            <param name="name"></param>
            <param name="data"></param>
            <param name="size"></param>
            <summary>
            Set a buffer attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetColor(System.String,Urho.Color)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a color attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetDouble(System.String,System.Double)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a double attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetFloat(System.String,System.Single)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetInt(System.String,System.Int32)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set an integer attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetIntRect(System.String,Urho.IntRect)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set an IntRect attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetIntVector2(System.String,Urho.IntVector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set an IntVector2 attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetQuaternion(System.String,Urho.Quaternion)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a quaternion attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetString(System.String,System.String)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a string attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetUInt(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set an unsigned integer attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetValue(System.String)">
            <param name="value"></param>
            <summary>
            Set the value for an inner node in the following format
            <node>value
            </node>.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(System.Int32)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(System.Single)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(System.String)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.Color)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.IntRect)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.IntVector2)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.Quaternion)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.Vector2)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.Vector3)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.Vector4)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(System.Int32)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(System.Single)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(System.String)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.Color)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.IntRect)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.IntVector2)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.Quaternion)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.Vector2)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.Vector3)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.Vector4)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVector2(System.String,Urho.Vector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a Vector2 attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVector3(System.String,Urho.Vector3)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a Vector3 attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVector4(System.String,Urho.Vector4)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a Vector4 attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,System.Int32)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,System.Single)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,System.String)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.Color)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.IntRect)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.IntVector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.Quaternion)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.Vector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.Vector3)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.Vector4)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.Value">
            <summary>
            Return inner value, or empty if missing for nodes like
            <node>value
            </node></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.Variant">
            <summary>
            Return a variant attribute, or empty if missing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.XPathResultIndex">
            <summary>
            Return current result index.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.XPathResultSet">
            <summary>
            Return XPath query result set.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.XmlElement">
            <summary>
            Element in an XML file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.XmlElement">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.XmlElement(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of XmlElement, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.XmlElement(Urho.XmlElement)">
            <param name="rhs"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.BoundingBox">
            <summary>
            Return bounding box attribute, or empty if missing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.File">
            <summary>
            Return XML file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetAttribute(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute, or empty if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetAttributeLower(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute in lowercase, or empty if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetAttributeUpper(System.String)">
            <param name="name"></param>
            <summary>
            Return attribute in lowercase, or empty if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetBool(System.String)">
            <param name="name"></param>
            <summary>
            Return bool attribute, or false if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetBuffer(System.String,System.IntPtr,System.UInt32)">
            <param name="name"></param>
            <param name="dest"></param>
            <param name="size"></param>
            <summary>
            Copy buffer attribute into a supplied buffer. Return true if buffer was large enough.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetColor(System.String)">
            <param name="name"></param>
            <summary>
            Return a color attribute, or default if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetDouble(System.String)">
            <param name="name"></param>
            <summary>
            Return a double attribute, or zero if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetFloat(System.String)">
            <param name="name"></param>
            <summary>
            Return a float attribute, or zero if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetInt(System.String)">
            <param name="name"></param>
            <summary>
            Return an integer attribute, or zero if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetIntRect(System.String)">
            <param name="name"></param>
            <summary>
            Return an IntRect attribute, or default if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetIntVector2(System.String)">
            <param name="name"></param>
            <summary>
            Return an IntVector2 attribute, or default if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetMatrix3(System.String)">
            <param name="name"></param>
            <summary>
            Return a Matrix3 attribute, or zero matrix if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetMatrix3x4(System.String)">
            <param name="name"></param>
            <summary>
            Return a Matrix3x4 attribute, or zero matrix if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetMatrix4(System.String)">
            <param name="name"></param>
            <summary>
            Return a Matrix4 attribute, or zero matrix if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetQuaternion(System.String)">
            <param name="name"></param>
            <summary>
            Return a quaternion attribute, or default if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetRect(System.String)">
            <param name="name"></param>
            <summary>
            Return a Rect attribute, or default if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetUInt(System.String)">
            <param name="name"></param>
            <summary>
            Return an unsigned integer attribute, or zero if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVariantValue(Urho.VariantType)">
            <param name="type"></param>
            <summary>
            Return a variant attribute with static type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVector(System.String)">
            <param name="name"></param>
            <summary>
            Return any Vector attribute as Vector4. Missing coordinates will be zero.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVector2(System.String)">
            <param name="name"></param>
            <summary>
            Return a Vector2 attribute, or zero vector if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVector3(System.String)">
            <param name="name"></param>
            <summary>
            Return a Vector3 attribute, or zero vector if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVector4(System.String)">
            <param name="name"></param>
            <summary>
            Return a Vector4 attribute, or zero vector if missing.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.GetVectorVariant(System.String)">
            <param name="name"></param>
            <summary>
            Return a float, Vector or Matrix attribute as Variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.HasAttribute(System.String)">
            <param name="name"></param>
            <summary>
            Return whether has an attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.HasChild(System.String)">
            <param name="name"></param>
            <summary>
            Return whether has a child element.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.IsNull">
            <summary>
            Return whether does not refer to an element or an XPath node.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.Name">
            <summary>
            Return element name (or attribute name if it is an attribute only XPath query result).
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.NotNull">
            <summary>
            Return whether refers to an element or an XPath node.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.NumAttributes">
            <summary>
            Return number of attributes.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.RemoveAttribute(System.String)">
            <param name="name"></param>
            <summary>
            Remove an attribute by name. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.RemoveChild(System.String)">
            <param name="name"></param>
            <summary>
            Remove a child element by name. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.RemoveChild(Urho.XmlElement)">
            <param name="element"></param>
            <summary></summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.RemoveChildren(System.String)">
            <param name="name"></param>
            <summary>
            Remove child elements of certain name, or all child elements if name is empty. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.ResourceRef">
            <summary>
            Return a resource reference attribute, or empty if missing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.ResourceRefList">
            <summary>
            Return a resource reference list attribute, or empty if missing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetAttribute(System.String)">
            <param name="value"></param>
            <summary>
            Set an attribute. Only valid if it is an attribute only XPath query result.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetAttribute(System.String,System.String)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set an attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetBool(System.String,System.Boolean)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a bool attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetBoundingBox(Urho.BoundingBox)">
            <param name="value"></param>
            <summary>
            Set a BoundingBox attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetBuffer(System.String,System.Void*,System.UInt32)">
            <param name="name"></param>
            <param name="data"></param>
            <param name="size"></param>
            <summary>
            Set a buffer attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetColor(System.String,Urho.Color)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a color attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetDouble(System.String,System.Double)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a double attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetFloat(System.String,System.Single)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetInt(System.String,System.Int32)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set an integer attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetIntRect(System.String,Urho.IntRect)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set an IntRect attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetIntVector2(System.String,Urho.IntVector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set an IntVector2 attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetQuaternion(System.String,Urho.Quaternion)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a quaternion attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetString(System.String,System.String)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a string attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetUInt(System.String,System.UInt32)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set an unsigned integer attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetValue(System.String)">
            <param name="value"></param>
            <summary>
            Set the value for an inner node in the following format
            <node>value
            </node>.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(System.Int32)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(System.Single)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(System.String)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.Color)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.IntRect)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.IntVector2)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.Quaternion)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.Vector2)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.Vector3)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariant(Urho.Vector4)">
            <param name="value"></param>
            <summary>
            Set a variant attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(System.Int32)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(System.Single)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(System.String)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.Color)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.IntRect)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.IntVector2)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.Quaternion)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.Vector2)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.Vector3)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVariantValue(Urho.Vector4)">
            <param name="value"></param>
            <summary>
            Set a variant attribute excluding the type.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVector2(System.String,Urho.Vector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a Vector2 attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVector3(System.String,Urho.Vector3)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a Vector3 attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVector4(System.String,Urho.Vector4)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a Vector4 attribute.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,System.Int32)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,System.Single)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,System.String)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.Color)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.IntRect)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.IntVector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.Quaternion)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.Vector2)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.Vector3)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlElement.SetVectorVariant(System.String,Urho.Vector4)">
            <param name="name"></param>
            <param name="value"></param>
            <summary>
            Set a float, Vector or Matrix attribute stored in a variant.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.Value">
            <summary>
            Return inner value, or empty if missing for nodes like
            <node>value
            </node></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.Variant">
            <summary>
            Return a variant attribute, or empty if missing.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.XPathResultIndex">
            <summary>
            Return current result index.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlElement.XPathResultSet">
            <summary>
            Return XPath query result set.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.XmlFile">
            <summary>
            XML document resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.XmlFile(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of XmlFile, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.XmlFile(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of XmlFile that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of XmlFile attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.XmlFile(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.XmlFile.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.XmlFile.FromString(System.String)">
            <param name="source"></param>
            <summary>
            Deserialize from a string. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlFile.Patch(Urho.XmlFile)">
            <param name="patchFile"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlFile.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlFile.ToDebugString(System.String)">
            <param name="indentation"></param>
            <summary>
            Serialize the XML content to a string.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlFile.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.XmlFile.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.XmlFile.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.XmlFile.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.XmlFile">
            <summary>
            XML document resource.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.XmlFile(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of XmlFile, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.XmlFile(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of XmlFile that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of XmlFile attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.XmlFile(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.XmlFile.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.XmlFile.FromString(System.String)">
            <param name="source"></param>
            <summary>
            Deserialize from a string. Return true if successful.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlFile.Patch(Urho.XmlFile)">
            <param name="patchFile"></param>
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlFile.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.XmlFile.ToDebugString(System.String)">
            <param name="indentation"></param>
            <summary>
            Serialize the XML content to a string.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.XmlFile.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.XmlFile.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.XmlFile.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.XmlFile.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Urho.XPathResultSet">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="T:Urho.Zone">
            <summary>
            %Component that describes global rendering properties.
            </summary>
            <remarks></remarks>
        </member>
        <member name="C:Urho.Zone(System.IntPtr)">
            <param name="handle">Pointer to the raw unmanaged Urho object.</param>
            <summary>Constructs a new instance of Zone, given a raw pointer to an unmanaged object</summary>
            <remarks>
                <para>This creates a new managed wrapper for the type using the raw pointer to an unmanaged object.</para>
                <para>Objects that are created in this fashion get registered with the UrhoSharp runtime.</para>
                <para>This is intended to be used by the UrhoSharp runtime, and is not intended to be used by users.</para>
            </remarks>
        </member>
        <member name="C:Urho.Zone(Urho.Context)">
            <param name="context">The context that this object will be attached to.</param>
            <summary>Creates an instance of Zone that is attached to an execution context.</summary>
            <remarks>
                <para>This creates an instance of Zone attached to the specified execution context.</para>
            </remarks>
        </member>
        <member name="C:Urho.Zone(Urho.UrhoObjectFlag)">
            <param name="emptyFlag">Pass UrhoObjectFlag.Empty.</param>
            <summary>Empty constructor, chain to this constructor when you provide your own constructor that sets the handle field.</summary>
            <remarks>
                <para>This constructor should be invoked by your code if you provide your own constructor that sets the handle field.</para>
                <para>This essentially circumvents the default path that creates a new object and sets the handle and does not call RegisterObject on the target, you must do this on your own constructor.</para>
                <para>You would typically chain to this constructor from your own, and then set the handle to the unmanaged object from your code, and then register your object.</para>
            </remarks>
        </member>
        <member name="P:Urho.Zone.AmbientColor">
            <summary>
            Return zone's own ambient color, disregarding gradient mode.
            Or
            Set ambient color
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.AmbientEndColor">
            <summary>
            Return ambient end color. Not safe to call from worker threads due to possible octree query.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.AmbientGradient">
            <summary>
            Return whether ambient gradient mode is enabled.
            Or
            Set ambient gradient mode. In gradient mode ambient color is interpolated from neighbor zones.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.AmbientStartColor">
            <summary>
            Return ambient start color. Not safe to call from worker threads due to possible octree query.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.BaseType">
            <summary>Urho's type system base type.</summary>
            <value>StringHash representing the base type for this Urho type.</value>
            <remarks>This returns the Urho type system base type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="M:Urho.Zone.DrawDebugGeometry(Urho.DebugRenderer,System.Boolean)">
            <param name="debug"></param>
            <param name="depthTest"></param>
            <summary>
            Visualize the component as debug geometry.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.FogColor">
            <summary>
            Return fog color.
            Or
            Set fog color.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.FogEnd">
            <summary>
            Return fog end distance.
            Or
            Set fog end distance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.FogHeight">
            <summary>
            Return fog height distance relative to the scene node's world position.
            Or
            Set fog height distance relative to the scene node's world position. Effective only in height fog mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.FogHeightScale">
            <summary>
            Return fog height scale.
            Or
            Set fog height scale. Effective only in height fog mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.FogStart">
            <summary>
            Return fog start distance.
            Or
            Set fog start distance.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.HeightFog">
            <summary>
            Return whether height fog mode is enabled.
            Or
            Set height fog mode.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Zone.IsInside(Urho.Vector3)">
            <param name="point"></param>
            <summary>
            Check whether a point is inside.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.Override">
            <summary>
            Return whether override mode is enabled.
            Or
            Set override mode. If camera is inside an override zone, that zone will be used for all rendered objects instead of their own zone.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.Priority">
            <summary>
            Return zone priority.
            Or
            Set zone priority. If an object or camera is inside several zones, the one with highest priority is used.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Zone.RegisterObject(Urho.Context)">
            <param name="context"></param>
            <summary>
            Register object factory. Drawable must be registered first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Urho.Zone.SetBoundingBox(Urho.BoundingBox)">
            <param name="box"></param>
            <summary>
            Set local-space bounding box. Will be used as an oriented bounding box to test whether objects or the camera are inside.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.Type">
            <summary>Urho's type system type.</summary>
            <value>StringHash representing the type for this C# type.</value>
            <remarks>This returns the Urho's type and is surfaced for low-level Urho code.</remarks>
        </member>
        <member name="P:Urho.Zone.TypeName">
            <summary>Urho's low-level type name.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Zone.TypeNameStatic">
            <summary>Urho's low-level type name, accessible as a static method.</summary>
            <value>Stringified low-level type name.</value>
            <remarks />
        </member>
        <member name="P:Urho.Zone.TypeStatic">
            <summary></summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.ZoneTexture">
            <summary>
            Return zone texture.
            Or
            Set zone texture. This will be bound to the zone texture unit when rendering objects inside the zone. Note that the default shaders do not use it.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Urho.Zone.ZoneTextureAttr">
            <summary>
            Return zone texture attribute.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
    </members>
</doc>
